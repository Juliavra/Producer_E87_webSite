"use strict";

async function Offline_Context() {
  //alert("offlineContext");
  const offlineContext = new Tone.OfflineContext(2, 4, 44100); // 2 channels, 4 seconds, 44.1kHz sample rate
  const player_test = new Tone.Player("https://juliavra.github.io/Producer_E87_webSite/audio/110_Base_tranqui_reggae.mp3").toDestination();

  player_test.start();

  // Define your Tone.js instruments and schedule events
  // Render the audio
  const buffer = await offlineContext.render();

}

/*
// Define both online and offline audio contexts
let audioCtx; // Must be initialized after a user interaction
const offlineCtx = new OfflineAudioContext(2, 44100 * 40, 44100);

// Define constants for dom nodes
const play = document.querySelector("#play");

function getData() {
  // Fetch an audio track, decode it and stick it in a buffer.
  // Then we put the buffer into the source and can play it.
  fetch("viper.ogg")
    .then((response) => response.arrayBuffer())
    .then((downloadedBuffer) => audioCtx.decodeAudioData(downloadedBuffer))
    .then((decodedBuffer) => {
      console.log("File downloaded successfully.");
      const source = new AudioBufferSourceNode(offlineCtx, {
        buffer: decodedBuffer,
      });
      source.connect(offlineCtx.destination);
      return source.start();
    })
    .then(() => offlineCtx.startRendering())
    .then((renderedBuffer) => {
      console.log("Rendering completed successfully.");
      play.disabled = false;
      const song = new AudioBufferSourceNode(audioCtx, {
        buffer: renderedBuffer,
      });
      song.connect(audioCtx.destination);

      // Start the song
      song.start();
    })
    .catch((err) => {
      console.error(`Error encountered: ${err}`);
    });
}

// Activate the play button
play.onclick = () => {
  play.disabled = true;
  // We can initialize the context as the user clicked.
  audioCtx = new AudioContext();

  // Fetch the data and start the song
  getData();
};

/**/


var currentAudioControlKeys = 1;
const teclaApretada = document.getElementById("teclaApretada");

document.onkeydown = function (e) {
  e = e || window.event;
  var test_key = e.key;
  //alert("test_key: " + test_key)
  switch (test_key) {
    case '1':
      {
        teclaApretada.innerHTML = "1";
        currentAudioControlKeys = 1;
        break;
      }
    case '2':
      {
        teclaApretada.innerHTML = "2";
        currentAudioControlKeys = 2;
        break;
      }
    case '3':
      {
        teclaApretada.innerHTML = "3";
        currentAudioControlKeys = 3;
        break;
      }
    case '4':
      {
        teclaApretada.innerHTML = "4";
        currentAudioControlKeys = 4;
        break;
      }
    case 'c':
    case 'C':
      {
        var value_track = prompt('Ingresa el track', '01 - 100');
        if (value_track >= 1 && value_track <= 100) {
          var value_player = prompt('Ingresa el player', '1 - 4');
          if (value_player >= 1 && value_player <= 4) {
            switch (value_player) {
              case "1":
                {
                  if (audio.currentTime > 0 && audio.paused == false && audio.ended == false && audio.volume > 0) {
                    alert("EL Player esta reproduciendo musica")
                  }
                  else {
                    array_Canciones.forEach(element => {
                      if (element.id.includes(value_track)) {
                        var player_1 = document.getElementById("myAudio");
                        //console.log("element.url_src: "+element.url_src)
                        fixed_song_1_name.innerHTML = document.getElementById("player_1_label").innerHTML = element.id;
                        if (local == true) {
                          player_1.src = `C:/Users/Juli/My Projects/Producer_E87_webSite/audio/` + `${element.id}` + `.mp3`;
                        }
                        else { player_1.src = element.url_src; }
                        duration_1_value.innerHTML = Math.round(`${audio.duration}`);
                        player_1.load();
                        currentAudioControlKeys = 1;
                        if (autoplay_1 == true) {
                          player_1.play();
                          lista = lista + "p_1: " + getsId(player_1.src) + `<br>`;
                          muestraLista();
                        }
                      }
                    });
                  }
                  break;
                }
              case "2":
                {
                  if (audio2.currentTime > 0 && audio2.paused == false && audio2.ended == false && audio2.volume > 0) {
                    alert("EL Player 2 esta reproduciendo musica")
                  }
                  else {
                    array_Canciones.forEach(element => {
                      if (element.id.includes(value_track)) {
                        var player_2 = document.getElementById("myAudio2");
                        //console.log("element.url_src: "+element.url_src)
                        fixed_song_2_name.innerHTML = document.getElementById("player_2_label").innerHTML = element.id;
                        if (local == true) {
                          player_2.src = `C:/Users/Juli/My Projects/Producer_E87_webSite/audio/` + `${element.id}` + `.mp3`;
                        }
                        else { player_2.src = element.url_src; }
                        duration_2_value.innerHTML = Math.round(`${audio2.duration}`);
                        player_2.load();
                        currentAudioControlKeys = 2;
                        if (autoplay_2 == true) {
                          lista = lista + "p_2: " + getsId(player_2.src) + `<br>`;
                          muestraLista();
                          player_2.play();
                        }
                      }
                    });
                  }
                  break;
                }
              case "3":
                {
                  if (audio3.currentTime > 0 && audio3.paused == false && audio3.ended == false && audio3.volume > 0) {
                    alert("EL Player 3 esta reproduciendo musica")
                  }
                  else {
                    array_Canciones.forEach(element => {
                      if (element.id.includes(value_track)) {
                        var player_3 = document.getElementById("myAudio3");
                        //console.log("element.url_src: "+element.url_src)
                        fixed_song_3_name.innerHTML = document.getElementById("player_3_label").innerHTML = element.id;
                        if (local == true) {
                          player_3.src = `C:/Users/Juli/My Projects/Producer_E87_webSite/audio/` + `${element.id}` + `.mp3`;
                        }
                        else { player_3.src = element.url_src; }
                        duration_3_value.innerHTML = Math.round(`${audio3.duration}`);
                        player_3.load();
                        currentAudioControlKeys = 3;
                        if (autoplay_3 == true) {
                          lista = lista + "p_3: " + getsId(player_3.src) + `<br>`;
                          muestraLista();
                          player_3.play();
                        }
                      }
                    });
                  }
                  break;
                }
              case "4":
                {
                  if (audio4.currentTime > 0 && audio4.paused == false && audio4.ended == false && audio4.volume > 0) {
                    alert("EL Player 4 esta reproduciendo musica")
                  }
                  else {
                    array_Canciones.forEach(element => {
                      if (element.id.includes(value_track)) {
                        var player_4 = document.getElementById("myAudio4");
                        //console.log("element.url_src: "+element.url_src)
                        fixed_song_4_name.innerHTML = document.getElementById("player_4_label").innerHTML = element.id;
                        if (local == true) {
                          player_4.src = `C:/Users/Juli/My Projects/Producer_E87_webSite/audio/` + `${element.id}` + `.mp3`;
                        }
                        else { player_4.src = element.url_src; }
                        duration_4_value.innerHTML = Math.round(`${audio4.duration}`);
                        player_4.load();
                        currentAudioControlKeys = 4;
                        if (autoplay_4 == true) {
                          lista = lista + "p_4: " + getsId(player_4.src) + `<br>`;
                          muestraLista();
                          player_4.play();
                        }
                      }
                    });
                  }
                  break;
                }
              default: {
                alert("SOY DEFAULT")
                break;
              }
            }
          }
          else { alert("Ingreso un player erroneo") }
        }
        else { alert("Ingreso un track erroneo") }
        break;
      }
    case 'l':
    case 'L':
      {
        teclaApretada.innerHTML = "L l ";
        if (currentAudioControlKeys == 1) {
          audio.loop = (!audio.loop);
          loop_checkbox.checked = (!loop_checkbox.checked);
        }
        else if (currentAudioControlKeys == 2) {
          audio2.loop = (!audio.loop);
          loop_checkbox2.checked = (!loop_checkbox2.checked);
        }
        else if (currentAudioControlKeys == 3) {
          audio3.loop = (!audio3.loop);
          loop_checkbox3.checked = (!loop_checkbox3.checked);
        }
        else if (currentAudioControlKeys == 4) {
          audio4.loop = (!audio4.loop);
          loop_checkbox4.checked = (!loop_checkbox4.checked);
        }
        break;
      }
    case 'k':
    case 'K':
      {
        teclaApretada.innerHTML = "K k ";
        if (currentAudioControlKeys == 1) {
          autoplay_1 = (!autoplay_1);
          autoplay_checkbox.checked = (!autoplay_checkbox.checked);
        }
        else if (currentAudioControlKeys == 2) {
          autoplay_2 = (!autoplay_2);
          autoplay_checkbox2.checked = (!autoplay_checkbox2.checked);

        }
        else if (currentAudioControlKeys == 3) {
          autoplay_3 = (!autoplay_3);
          autoplay_checkbox3.checked = (!autoplay_checkbox3.checked);

        }
        else if (currentAudioControlKeys == 4) {
          autoplay_4 = (!autoplay_4);
          autoplay_checkbox4.checked = (!autoplay_checkbox4.checked);

        }
        break;
      }
    case 'p':
    case 'P':
      {
        teclaApretada.innerHTML = "p";
        if (currentAudioControlKeys == 1) {
          switch (source_1_actual_patch) {
            case "empty": {
              console.log("empty");
              break;
            }
            case "noiseSynth": {
              console.log("noiseSynth");
              break;
            }
            case "noise": {
              console.log("noise");
              break;
            }
            case "player": {
              // console.log("player");
              if (player_1_Node.buffer.duration != 0) {
                if (!player_1_Node.loaded) {
                  player_1_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = player_1_Node.buffer.duration;
                  player_1_duration_value.innerHTML = Math.round(`${duration}`);
                  player_1_Node.start();
                  player_1_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "player_1", "play");
                }
              }
              break;
            }
            case "grainPlayer": {
              // console.log("grainPlayer");
              if (grainPlayer_1_Node.buffer.duration != 0) {
                if (!grainPlayer_1_Node.loaded) {
                  grainPlayer_1_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = grainPlayer_1_Node.buffer.duration;
                  grainPlayer_1_duration_value.innerHTML = Math.round(`${duration}`);
                  grainPlayer_1_Node.start();
                  grainPlayer_1_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1", "play");
                }
              }
              break;
            }
            default: { break; }
          }
        }
        if (currentAudioControlKeys == 2) {
          switch (source_2_actual_patch) {
            case "empty": {
              console.log("empty");
              break;
            }
            case "noiseSynth": {
              console.log("noiseSynth");
              break;
            }
            case "noise": {
              console.log("noise");
              break;
            }
            case "player": {
              // console.log("player");
              if (player_2_Node.buffer.duration != 0) {
                if (!player_2_Node.loaded) {
                  player_2_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = player_2_Node.buffer.duration;
                  player_2_duration_value.innerHTML = Math.round(`${duration}`);
                  player_2_Node.start();
                  player_2_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "player_2", "play");
                }
              }
              break;
            }
            case "grainPlayer": {
              // console.log("grainPlayer");
              if (grainPlayer_2_Node.buffer.duration != 0) {
                if (!grainPlayer_2_Node.loaded) {
                  grainPlayer_2_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = grainPlayer_2_Node.buffer.duration;
                  grainPlayer_2_duration_value.innerHTML = Math.round(`${duration}`);
                  grainPlayer_2_Node.start();
                  grainPlayer_2_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_2", "play");
                }
              }
              break;
            }
            default: { break; }
          }
        }
        else if (currentAudioControlKeys == 3) {
          switch (source_3_actual_patch) {
            case "empty": {
              console.log("empty");
              break;
            }
            case "noiseSynth": {
              console.log("noiseSynth");
              break;
            }
            case "noise": {
              console.log("noise");
              break;
            }
            case "player": {
              // console.log("player");
              if (player_3_Node.buffer.duration != 0) {
                if (!player_3_Node.loaded) {
                  player_3_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = player_3_Node.buffer.duration;
                  player_3_duration_value.innerHTML = Math.round(`${duration}`);
                  player_3_Node.start();
                  player_3_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "player_3", "play");
                }
              }
              break;
            }
            case "grainPlayer": {
              // console.log("grainPlayer");
              if (grainPlayer_3_Node.buffer.duration != 0) {
                if (!grainPlayer_3_Node.loaded) {
                  grainPlayer_3_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = grainPlayer_3_Node.buffer.duration;
                  grainPlayer_3_duration_value.innerHTML = Math.round(`${duration}`);
                  grainPlayer_3_Node.start();
                  grainPlayer_3_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3", "play");
                }
              }
              break;
            }
            default: { break; }
          }
        }
        else if (currentAudioControlKeys == 4) {
          switch (source_4_actual_patch) {
            case "empty": {
              console.log("empty");
              break;
            }
            case "noiseSynth": {
              console.log("noiseSynth");
              break;
            }
            case "noise": {
              console.log("noise");
              break;
            }
            case "player": {
              // console.log("player");
              if (player_4_Node.buffer.duration != 0) {
                if (!player_4_Node.loaded) {
                  player_4_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = player_4_Node.buffer.duration;
                  player_4_duration_value.innerHTML = Math.round(`${duration}`);
                  player_4_Node.start();
                  player_4_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "player_4", "play");
                }
              }
              break;
            }
            case "grainPlayer": {
              // console.log("grainPlayer");
              if (grainPlayer_4_Node.buffer.duration != 0) {
                if (!grainPlayer_4_Node.loaded) {
                  grainPlayer_4_duration_value.innerHTML = "!loaded";
                }
                else {
                  var duration = grainPlayer_4_Node.buffer.duration;
                  grainPlayer_4_duration_value.innerHTML = Math.round(`${duration}`);
                  grainPlayer_4_Node.start();
                  grainPlayer_4_playButton.style.backgroundColor = "green";
                  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4", "play");
                }
              }
              break;
            }
            default: { break; }
          }
        }
        break;
      }
    case 'o':
    case 'O':
      {
        teclaApretada.innerHTML = "o";
        if (currentAudioControlKeys == 1) { audio.load(); }
        else if (currentAudioControlKeys == 2) { audio2.load(); }
        else if (currentAudioControlKeys == 3) { audio3.load(); }
        else if (currentAudioControlKeys == 4) { audio4.load(); }
        break;
      }
    case 'Q':
    case 'q':
      {
        teclaApretada.innerHTML = "q";
        switch (source_1_actual_patch) {
          case "empty": {
            console.log("empty");
            break;
          }
          case "noiseSynth": {
            console.log("noiseSynth");
            break;
          }
          case "noise": {
            console.log("noise");
            break;
          }
          case "player": {
            // console.log("player");
            if (player_1_Node.volume.value < 11) {
              player_1_Node.volume.value += 1;
              player_1_volume.value = Math.round(`${player_1_Node.volume.value}`);
              player_1_volume_value.innerHTML = Math.round(`${player_1_Node.volume.value}`);
              mixEvent.logIntoListaNewValue(Tone.now(), "player_1_volume", player_1_Node.volume.value);
            }
            break;
          }
          case "grainPlayer": {
            // console.log("grainPlayer");
            if (grainPlayer_1_Node.volume.value < 11) {
              grainPlayer_1_Node.volume.value += 1;
              grainPlayer_1_volume_value.innerHTML = Math.round(`${grainPlayer_1_Node.volume.value}`);
              mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_1_volume", player_1_Node.volume.value);
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case 'A':
    case 'a':
      {
        teclaApretada.innerHTML = "a";
        switch (source_1_actual_patch) {
          case "empty": {
            console.log("empty");
            break;
          }
          case "noiseSynth": {
            console.log("noiseSynth");
            break;
          }
          case "noise": {
            console.log("noise");
            break;
          }
          case "player": {
            // console.log("player");
            if (player_1_Node.volume.value > -100 &&
              player_1_Node.volume.value <= 11) {
              player_1_Node.volume.value -= 1;
              player_1_volume.value = Math.round(`${player_1_Node.volume.value}`);
              player_1_volume_value.innerHTML = Math.round(`${player_1_Node.volume.value}`);
              mixEvent.logIntoListaNewValue(Tone.now(), "player_1_volume", player_1_Node.volume.value);
            }
            break;
          }
          case "grainPlayer": {
            // console.log("grainPlayer");
            if (grainPlayer_1_Node.volume.value < 11 && grainPlayer_1_Node.volume.value > -100) {
              grainPlayer_1_Node.volume.value += 1;
              grainPlayer_1_volume_value.innerHTML = Math.round(`${grainPlayer_1_Node.volume.value}`);
              mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_1_volume", player_1_Node.volume.value);
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case 'W':
    case 'w':
      {
        teclaApretada.innerHTML = "w";
        if (audio2.volume < 0.99) {
          audio2.volume = audio2.volume + 0.01;
          fixed_volume_2_value.innerHTML = volume_2_value.innerHTML = Math.round(`${audio2.volume * 100}`);
          volume_2.value = audio2.volume;
        }
        else {
          audio2.volume = 1;
          fixed_volume_2_value.innerHTML = volume_2_value.innerHTML = Math.round(`${audio2.volume * 100}`);
          volume_2.value = audio2.volume;
        }
        break;
      }
    case 's':
    case 'S':
      {
        teclaApretada.innerHTML = "s";
        if (audio2.volume > 0.01) {
          audio2.volume -= 0.01;
          fixed_volume_2_value.innerHTML = volume_2_value.innerHTML = Math.round(`${audio2.volume * 100}`);
          volume_2.value = audio2.volume;
        }
        else {
          audio2.volume = 0;
          fixed_volume_2_value.innerHTML = volume_2_value.innerHTML = Math.round(`${audio2.volume * 100}`);
          volume_2.value = audio2.volume;
          Math.round(`${audio2.volume * 100}`);
        }
        break;
      }
    case 'e':
    case 'E':
      {
        teclaApretada.innerHTML = "e";
        if (audio3.volume < 0.99) {
          audio3.volume = audio3.volume + 0.01;
          fixed_volume_3_value.innerHTML = volume_3_value.innerHTML = Math.round(`${audio3.volume * 100}`);
          volume_3.value = audio3.volume;
        }
        else {
          audio3.volume = 1;
          fixed_volume_3_value.innerHTML = volume_3_value.innerHTML = Math.round(`${audio3.volume * 100}`);
          volume_3.value = audio3.volume;
        }
        break;
      }
    case 'd':
    case 'D':
      {
        teclaApretada.innerHTML = "d";
        if (audio3.volume > 0.01) {
          audio3.volume -= 0.01;
          fixed_volume_3_value.innerHTML = volume_3_value.innerHTML = Math.round(`${audio3.volume * 100}`);
          volume_3.value = audio3.volume;
        }
        else {
          audio3.volume = 0;
          fixed_volume_3_value.innerHTML = volume_3_value.innerHTML = Math.round(`${audio3.volume * 100}`);
          volume_3.value = audio3.volume;
        }
        break;
      }
    case 'r':
    case 'R':
      {
        teclaApretada.innerHTML = "r";
        if (audio4.volume < 0.99) {
          audio4.volume = audio4.volume + 0.01;
          fixed_volume_4_value.innerHTML = volume_4_value.innerHTML = Math.round(`${audio4.volume * 100}`);
          volume_4.value = audio4.volume;
        }
        else {
          audio4.volume = 1;
          fixed_volume_4_value.innerHTML = volume_4_value.innerHTML = Math.round(`${audio4.volume * 100}`);
          volume_4.value = audio4.volume;
        }
        break;
      }
    case 'f':
    case 'F':
      {
        teclaApretada.innerHTML = "f";
        if (audio4.volume > 0.01) {
          audio4.volume -= 0.01;
          fixed_volume_4_value.innerHTML = volume_4_value.innerHTML = Math.round(`${audio4.volume * 100}`);
          volume_4.value = audio4.volume;
        }
        else {
          audio4.volume = 0;
          fixed_volume_4_value.innerHTML = volume_4_value.innerHTML = Math.round(`${audio4.volume * 100}`);
          volume_4.value = audio4.volume;
        }
        break;
      }
  }
};

/**/

//PARA QUITAR UN ELEMENTO CANCION DE LA LISTA DE CANCIONES 
//remove()	Removes an option from a drop-down list
// select.remove("Tascam_424");

//player.chain(filter, distortion, Tone.Destination);

/*
  setInterval(() => {
    console.log(Tone.immediate());
  }, 3000);
  /**/

/*
You can use the Math.trunc() method to remove the decimals of a number:

//*********************************************************** */
//*********************************************************** */
/* TODO LIST

// REVISAR AUTOPLAY A VER SI FUNCIONA
// REVISAR fadeIn
// REVISAR fadeOut
// AGREGAR .seek() A LOS 4 PLAYERS 
// REVISAR .sync() PARA USAR EN LOS PLAYERS //.unsync() TAMBIEN 
// REVISAR .solo
// AGREGAR BUTTON PARA   rolloff: -12, -24, -48, -96,  
// noiseSynth_1_Sync_checkbox: Sync no hace NADA 
// channel_1_Mid_SemiParam_gain_tascam_rampTo NO FUNCA EL MID EQ AT ALL
// NOISE SYNTH NO TIENE NINGUN SEND
// NO HACE PLAY noiseSynth_1.triggerAttack("D4", Tone.now);
// TASCAM MID SEMI PARAM NOT WORKING AT ALL
// NINGUN MUTE DE NOISE OSC 1-4 FUNCA //TypeError: mute is not a function
//PLAYER UNO MUTE VOLUMEN ANTERIOR A MUTE IMPORTANTE
PARA DEVOLVER A LA CANCION AL MUTE.FALSE
// NOISE SYNTH 1-4 NO TEST AT ALL
//
 
*/

//************************************************************************* */
//************************************************************************* */
//ARRAY SONG DATA ADD DURATION 

//Tone.context.createMediaElementSource(mediaElement)
//USAR ESTO PARA CREAR UN AUDIO TAG Y CARGAR EL SRC EN UN BUFFER 
// Y PASARLO A UN TONE PLAYER, SE PUEDE SACAR LA DURATION Y ALGUNA COSA MAS

// Autoplay policy: start context after user gesture.
//AUDIOWORKLET
/*
const audioContext = new AudioContext();
await audioContext.audioWorklet.addModule("white-noise-processor.js");
const whiteNoiseNode = new AudioWorkletNode(
  audioContext,
  "white-noise-processor",
);
whiteNoiseNode.connect(audioContext.destination);
/**/

//agregaReverbWorklet();
//https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet
//https://googlechromelabs.github.io/web-audio-samples/audio-worklet/basic/hello-audio-worklet/
//https://github.com/GoogleChromeLabs/web-audio-samples/blob/main/src/audio-worklet/basic/hello-audio-worklet/bypass-processor.js
//https://github.com/GoogleChromeLabs/web-audio-samples/blob/main/src/audio-worklet/basic/hello-audio-worklet/main.js
//https://gist.github.com/miselaytes-anton/fa683b0309e5cf05afe78f95aa881aee#file-audio-worklet-delay-example-js

//Tone.context.latencyHint = "playback";

//TEST PLAYER
const player_test_Node = new Tone.Player("https://juliavra.github.io/Producer_E87_webSite/audio/110_Base_tranqui_reggae.mp3");
const meter_test_Node = new Tone.Meter(0);
const meter_test_Node_RMS = document.getElementById("meter_test_Node_RMS");
//-----------------------------------------------------------

isShowOpenFilePickerSupported();

window.addEventListener('click', () => {
  Tone.context.resume().then(() => {
    console.log('AudioContext started');
  });
}, {
  once: true,
  capture: true,
  passive: true,
});

window.addEventListener("error", mostrarerror);

var cancion_1 = {
  id: 1,
  title: "01 Dark Ringy Short Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/01_Dark_Ringy_Short_Loop.mp3",
  duration: 17
};
var cancion_2 = {
  id: 2,
  title: "02 Hard Acople Amb Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/02_Hard_Acople_Amb_Song.mp3"
};
var cancion_3 = {
  id: 3,
  title: "03 Phased Sleppy Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/03_Phased_Sleppy_Noise_Loop.mp3"
};
var cancion_4 = {
  id: 4,
  title: "04 Ruido Digital Zarpado Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/04_Ruido_Digital_Zarpado_Loop.mp3"
};
var cancion_5 = {
  id: 5,
  title: "05 Deep Dark Amb Slow Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/05_Deep_Dark_Amb_Slow_Loop.mp3"
};
var cancion_6 = {
  id: 6,
  title: "06 Ringy Dark Slow Amb Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/06_Ringy_Dark_Slow_Amb_Loop.mp3"
};
var cancion_7 = {
  id: 7,
  title: "07 Calm Mellow Slow Amb Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/07_Calm_Mellow_Slow_Amb_Song.mp3"
};
var cancion_8 = {
  id: 8,
  title: "08 Digi Noise Reverb Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/08_Digi_Noise_Reverb_Loop.mp3"
};
var cancion_9 = {
  id: 9,
  title: "09 Digi Clippy Slow Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/09_Digi_Clippy_Slow_Loop.mp3"
};
var cancion_10 = {
  id: 10,
  title: "10 Pulse Burst Revb Slow Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/10_Pulse_Burst_Revb_Slow_Song.mp3"
};
var cancion_11 = {
  id: 11,
  title: "11 Sube Baja Calm Space Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/11_Sube_Baja_Calm_Space_Loop.mp3"
};
var cancion_12 = {
  id: 12,
  title: "12 Acople Drone Amb Slo Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/12_Acople_Drone_Amb_Slo_Song.mp3"
};
var cancion_13 = {
  id: 13,
  title: "13 Amb Revb Tono Mal Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/13_Amb_Revb_Tono_Mal_Loop.mp3"
};
var cancion_14 = {
  id: 14,
  title: "14 Amb Calm Low Evolve Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/14_Amb_Calm_Low_Evolve_Song.mp3"
};
var cancion_15 = {
  id: 15,
  title: "15 Low Amb Melo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/15_Low_Amb_Melo_Loop.mp3"
};
var cancion_16 = {
  id: 16,
  title: "16 Chopped Reverse Calm Bright Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/16_Chopped_Reverse_Calm_Bright_Loop.mp3"
};
var cancion_17 = {
  id: 17,
  title: "17 Revb Bouncy Easy Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/17_Revb_Bouncy_Easy_Noise_Loop.mp3"
};
var cancion_18 = {
  id: 18,
  title: "18 Noise Gate Sample Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/18_Noise_Gate_Sample_Song.mp3"
};
var cancion_19 = {
  id: 19,
  title: "19 Reverse Short Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/19_Reverse_Short_Loop.mp3"
};
var cancion_20 = {
  id: 20,
  title: "20 Dubby NR Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/20_Dubby_NR_Song.mp3"
};
var cancion_21 = {
  id: 21,
  title: "21 Weird NR Music Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/21_Weird_NR_Music_Loop.mp3"
};
var cancion_22 = {
  id: 22,
  title: "22 Choppd Vibrato Bube Baja Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/22_Choppd_Vibrato_Bube_Baja_Loop.mp3"
};
var cancion_23 = {
  id: 23,
  title: "23 Choppd Vibrato Sube Baja Melo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/23_Choppd_Vibrato_Sube_Baja_Melo_Loop.mp3"
};
var cancion_24 = {
  id: 24,
  title: "24 Line Noise Clippin Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/24_Line_Noise_Clippin_Loop.mp3"
};
var cancion_25 = {
  id: 25,
  title: "25 Sub Noise Ritmo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/25_Sub_Noise_Ritmo_Loop.mp3"
};
var cancion_26 = {
  id: 26,
  title: "26 Bass Melo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/26_Bass_Melo_Loop.mp3"
};
var cancion_27 = {
  id: 27,
  title: "27 Line Noise Clippin 2 Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/27_Line_Noise_Clippin_2_Loop.mp3"
};
var cancion_28 = {
  id: 28,
  title: "28 Reverse Metal Low Drum Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/28_Reverse_Metal_Low_Drum_Song.mp3"
};
var cancion_29 = {
  id: 29,
  title: "29 White Noise Trip Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/29_White_Noise_Trip_Loop_Song.mp3"
};
var cancion_30 = {
  id: 30,
  title: "30 Chopped Tone FX Evolution Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/30_Chopped_Tone_FX_Evolution_Song.mp3"
};
var cancion_31 = {
  id: 31,
  title: "31 Windy Tremolo Tren Clima Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/31_Windy_Tremolo_Tren_Clima_Loop.mp3"
};
var cancion_32 = {
  id: 32,
  title: "32 Hiss Ritmico Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/32_Hiss_Ritmico_Song.mp3"
};
var cancion_33 = {
  id: 33,
  title: "33 Bouncing Turbina Slow Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/33_Bouncing_Turbina_Slow_Song.mp3"
};
var cancion_34 = {
  id: 34,
  title: "34 NR Digi Reverse Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/34_NR_Digi_Reverse_Loop.mp3"
};
var cancion_35 = {
  id: 35,
  title: "35 Grainy Sub Vibrato Soplido Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/35_Grainy_Sub_Vibrato_Soplido_Song.mp3"
};
var cancion_36 = {
  id: 36,
  title: "36 Ringy Pad Slow Melo Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/36_Ringy_Pad_Slow_Melo_Loop_Song.mp3"
};
var cancion_37 = {
  id: 37,
  title: "37 Reverse NR Wicked Birds Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/37_Reverse_NR_Wicked_Birds_Loop.mp3"
};
var cancion_38 = {
  id: 38,
  title: "38 Mid Lo Bouncy Choppd Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/38_Mid_Lo_Bouncy_Choppd_Loop.mp3"
};
var cancion_39 = {
  id: 39,
  title: "39 Sube Baja Ringy Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/39_Sube_Baja_Ringy_Loop_Song.mp3"
};
var cancion_40 = {
  id: 40,
  title: "40 Acople Viaje Hi Eq Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/40_Acople_Viaje_Hi_Eq_Loop.mp3"
};
var cancion_41 = {
  id: 41,
  title: "41 Dark Sub Clips Amb Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/41_Dark_Sub_Clips_Amb_Song.mp3"
};
var cancion_42 = {
  id: 42,
  title: "42 Low Engine Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/42_Low_Engine_Loop.mp3"
};
var cancion_43 = {
  id: 43,
  title: "43 Fax Signal Acople Clima Digi Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/43_Fax_Signal_Acople_Clima_Digi_Noise_Loop.mp3"
};
var cancion_44 = {
  id: 44,
  title: "44 Caballos Digi Noise Tempo Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/44_Caballos_Digi_Noise_Tempo_Song.mp3"
};
var cancion_45 = {
  id: 45,
  title: "45 Metal NR Talkin Melody Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/45_Metal_NR_Talkin_Melody_Song"
};
var cancion_46 = {
  id: 46,
  title: "46 Rain Metal bursts Talkie Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/46_Rain_Metal_bursts_Talkie_Loop_Song.mp3"
};
var cancion_47 = {
  id: 47,
  title: "47 Ringy Sub Melody Tempo Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/47_Ringy_Sub_Melody_Tempo_Song.mp3"
};
var cancion_48 = {
  id: 48,
  title: "48 Chopped ST Noise Calm Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/48_Chopped_ST_Noise_Calm_Song.mp3"
};
var cancion_49 = {
  id: 49,
  title: "49 Reverse Weird Music Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/49_Reverse_Weird_Music_Song.mp3"
};
var cancion_50 = {
  id: 50,
  title: "50 Ritmo Hit Pila Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/50_Ritmo_Hit_Pila_Song.mp3"
};
var cancion_51 = {
  id: 51,
  title: "51 Low Drone Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/51_Low_Drone_Noise_Loop.mp3"
};
var cancion_52 = {
  id: 52,
  title: "52 Sub Ultra Slow Mzk Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/52_Sub_Ultra_Slow_Mzk_Song.mp3"
};
var cancion_53 = {
  id: 53,
  title: "53 Low Digi Vibrato Snaps Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/53_Low_Digi_Vibrato_Snaps_Loop.mp3"
};
var cancion_54 = {
  id: 54,
  title: "54 Sub Windy Deep Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/54_Sub_Windy_Deep_Song.mp3"
};
var cancion_55 = {
  id: 55,
  title: "55 Ringy Sweepin Howl Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/55_Ringy_Sweepin_Howl_Song.mp3"
};
var cancion_56 = {
  id: 56,
  title: "56 Chopped Snappy Melo Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/56_Chopped_Snappy_Melo_Song.mp3"
};
var cancion_57 = {
  id: 57,
  title: "57 Distort Chopped Ring Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/57_Distort_Chopped_Ring_Loop.mp3"
};
var cancion_58 = {
  id: 58,
  title: "58 Sub Dark Hits Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/58_Sub_Dark_Hits_Song.mp3"
};
var cancion_59 = {
  id: 59,
  title: "59 Ringy EG Chopped Amb Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/59_Ringy_EG_Chopped_Amb_Song.mp3"
};
var cancion_60 = {
  id: 60,
  title: "60 Melancholic Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/60_Melancholic_Song.mp3"
};
var cancion_61 = {
  id: 61,
  title: "61 Sube Baja Melo Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/61_Sube_Baja_Melo_Song.mp3"
};
var cancion_62 = {
  id: 62,
  title: "62 Sub Noise Talkative Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/62_Sub_Noise_Talkative_Loop.mp3"
};
var cancion_63 = {
  id: 63,
  title: "63 Grainy Dirty Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/63_Grainy_Dirty_Noise_Loop.mp3"
};
var cancion_64 = {
  id: 64,
  title: "64 Clipped Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/64_Clipped_Noise_Loop.mp3"
};
var cancion_65 = {
  id: 65,
  title: "65 Acople Hard Crescendo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/65_Acople_Hard_Crescendo_Loop.mp3"
};
var cancion_66 = {
  id: 66,
  title: "66 Chopped Ptch Dwn Amb Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/66_Chopped_Ptch_Dwn_Amb_Loop.mp3"
};
var cancion_67 = {
  id: 67,
  title: "67 Low Ocean like Amb Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/67_Low_Ocean_like_Amb_Song.mp3"
};
var cancion_68 = {
  id: 68,
  title: "68 Reverse Deep Dark Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/68_Reverse_Deep_Dark_Loop.mp3"
};
var cancion_69 = {
  id: 69,
  title: "69 Drone Delay Melo Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/69_Drone_Delay_Melo_Loop_Song.mp3"
};
var cancion_70 = {
  id: 70,
  title: "70 Chopped Ritmo ST Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/70_Chopped_Ritmo_ST_Loop.mp3"
};
var cancion_71 = {
  id: 71,
  title: "71 Melo Sube Baja Clima Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/71_Melo_Sube_Baja_Clima_Loop.mp3"
};
var cancion_72 = {
  id: 72,
  title: "72 Choppd fast ST Music Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/72_Choppd_fast_ST_Music_Loop.mp3"
};
var cancion_73 = {
  id: 73,
  title: "73 Trenes al galope Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/73_Trenes_al_galope_Loop.mp3"
};
var cancion_74 = {
  id: 74,
  title: "74 Drone Hard Noise Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/74_Drone_Hard_Noise_Loop_Song.mp3"
};
var cancion_75 = {
  id: 75,
  title: "75 Grainy Windy Dirty Noise Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/75_Grainy_Windy_Dirty_Noise_Loop.mp3"
};
var cancion_76 = {
  id: 76,
  title: "76 Sub Dub NR Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/76_Sub_Dub_NR_Loop.mp3"
};
var cancion_77 = {
  id: 77,
  title: "77 Weird EG Vibrato Melo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/77_Weird_EG_Vibrato_Melo_Loop.mp3"
};
var cancion_78 = {
  id: 78,
  title: "78 Away Revb Industrial Noise Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/78_Away_Revb_Industrial_Noise_Song.mp3"
};
var cancion_79 = {
  id: 79,
  title: "79 Mellow Strings NR Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/79_Mellow_Strings_NR_Song.mp3"
};
var cancion_80 = {
  id: 80,
  title: "80 Phased Orkestra NR Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/80_Phased_Orkestra_NR_Song.mp3"
};
var cancion_81 = {
  id: 81,
  title: "81 Un Clip Procesado Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/81_Un_Clip_Procesado_Song.mp3"
};
var cancion_82 = {
  id: 82,
  title: "82 Reverse Dubby Drum Beat",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/82_Reverse_Dubby_Drum_Beat.mp3"
};
var cancion_83 = {
  id: 83,
  title: "83 Ptch Dwn Drum",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/83_Ptch_Dwn_Drum.mp3"
};
var cancion_84 = {
  id: 84,
  title: "84 Chopped Dubby Beat Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/84_Chopped_Dubby_Beat_Loop.mp3"
};
var cancion_85 = {
  id: 85,
  title: "85 Sub Vibrato Delay N Gate Drum",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/85_Sub_Vibrato_Delay_N_Gate_Drum.mp3"
};
var cancion_86 = {
  id: 86,
  title: "86 One Drop Distort Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/86_One_Drop_Distort_Loop.mp3"
};
var cancion_87 = {
  id: 87,
  title: "87 4 BD Space Dub Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/87_4_BD_Space_Dub_Loop.mp3"
};
var cancion_88 = {
  id: 88,
  title: "88 Distort Ptch Dwn Hip Hop Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/88_Distort_Ptch_Dwn_Hip_Hop_Loop.mp3"
};
var cancion_89 = {
  id: 89,
  title: "89 Distort EQ Hip Hop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/89_Distort_EQ_Hip_Hop.mp3"
};
var cancion_90 = {
  id: 90,
  title: "90 Ultra Slo Dub Trip Hop Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/90_Ultra_Slo_Dub_Trip_Hop_Loop.mp3"
};
var cancion_91 = {
  id: 91,
  title: "91 Dub Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/91_Dub_Loop.mp3"
};
var cancion_92 = {
  id: 92,
  title: "92 Sub Space Tribal Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/92_Sub_Space_Tribal_Loop.mp3"
};
var cancion_93 = {
  id: 93,
  title: "93 Autechre Jumpin Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/93_Autechre_Jumpin_Loop.mp3"
};
var cancion_94 = {
  id: 94,
  title: "94 Dirty Trip Hop Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/94_Dirty_Trip_Hop_Loop.mp3"
};
var cancion_95 = {
  id: 95,
  title: "95 Break Cool Dance Beat Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/95_Break_Cool_Dance_Beat_Loop.mp3"
};
var cancion_96 = {
  id: 96,
  title: "96 Clippy Choppd Melo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/96_Clippy_Choppd_Melo_Loop.mp3"
};
var cancion_97 = {
  id: 97,
  title: "97 Reverse Fast Trance Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/97_Reverse_Fast_Trance_Loop.mp3"
};
var cancion_98 = {
  id: 98,
  title: "98 All Over T Hop NR loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/98_All_Over_T_Hop_NR_loop_Song.mp3"
};
var cancion_99 = {
  id: 99,
  title: "99 Melo Drums Tempo Loop",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/99_Melo_Drums_Tempo_Loop.mp3"
};
var cancion_100 = {
  id: 100,
  title: "100 B Beat re laburado Loop Song",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/100_B_Beat_re_laburado_Loop_Song.mp3"
};
var cancion_101 = {
  id: 101,
  title: "101 Jijiji",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/101_Jijiji.mp3"
};
var cancion_102 = {
  id: 102,
  title: "102 El Cazador",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/102_El_cazador.mp3"
};
var cancion_103 = {
  id: 103,
  title: "103 Fuegos de Octubre",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/103_Fuegos_de_Octubre.mp3"
};
var cancion_104 = {
  id: 104,
  title: "104 Conf.La Pesadilla (Borges)",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/108_Atmosfera_submarina.mp3"
};
var cancion_105 = {
  id: 105,
  title: "105 Conf.La Pesadilla (Borges)",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/109_Attack_A_Withmore.mp3"
};
var cancion_106 = {
  id: 106,
  title: "106 Aquatica_2_Gary_Numan",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/106_Aquatica_2_Gary_Numan.mp3"
};
var cancion_107 = {
  id: 107,
  title: "107 Aquatica_Gary_Numan",
  url_src: "https://juliavra.github.io/Producer_E87_webSite/audio/107_Aquatica_Gary_Numan.mp3"
};

var array_Canciones = [];
array_Canciones.push(cancion_1);
array_Canciones.push(cancion_2);
array_Canciones.push(cancion_3);
array_Canciones.push(cancion_4);
array_Canciones.push(cancion_5);
array_Canciones.push(cancion_6);
array_Canciones.push(cancion_7);
array_Canciones.push(cancion_8);
array_Canciones.push(cancion_9);
array_Canciones.push(cancion_10);
array_Canciones.push(cancion_11);
array_Canciones.push(cancion_12);
array_Canciones.push(cancion_13);
array_Canciones.push(cancion_14);
array_Canciones.push(cancion_15);
array_Canciones.push(cancion_16);
array_Canciones.push(cancion_17);
array_Canciones.push(cancion_18);
array_Canciones.push(cancion_19);
array_Canciones.push(cancion_20);
array_Canciones.push(cancion_21);
array_Canciones.push(cancion_22);
array_Canciones.push(cancion_23);
array_Canciones.push(cancion_24);
array_Canciones.push(cancion_25);
array_Canciones.push(cancion_26);
array_Canciones.push(cancion_27);
array_Canciones.push(cancion_28);
array_Canciones.push(cancion_29);
array_Canciones.push(cancion_30);
array_Canciones.push(cancion_31);
array_Canciones.push(cancion_32);
array_Canciones.push(cancion_33);
array_Canciones.push(cancion_34);
array_Canciones.push(cancion_35);
array_Canciones.push(cancion_36);
array_Canciones.push(cancion_37);
array_Canciones.push(cancion_38);
array_Canciones.push(cancion_39);
array_Canciones.push(cancion_40);
array_Canciones.push(cancion_41);
array_Canciones.push(cancion_42);
array_Canciones.push(cancion_43);
array_Canciones.push(cancion_44);
array_Canciones.push(cancion_45);
array_Canciones.push(cancion_46);
array_Canciones.push(cancion_47);
array_Canciones.push(cancion_48);
array_Canciones.push(cancion_49);
array_Canciones.push(cancion_50);
array_Canciones.push(cancion_51);
array_Canciones.push(cancion_52);
array_Canciones.push(cancion_53);
array_Canciones.push(cancion_54);
array_Canciones.push(cancion_55);
array_Canciones.push(cancion_56);
array_Canciones.push(cancion_57);
array_Canciones.push(cancion_58);
array_Canciones.push(cancion_59);
array_Canciones.push(cancion_60);
array_Canciones.push(cancion_61);
array_Canciones.push(cancion_62);
array_Canciones.push(cancion_63);
array_Canciones.push(cancion_64);
array_Canciones.push(cancion_65);
array_Canciones.push(cancion_66);
array_Canciones.push(cancion_67);
array_Canciones.push(cancion_68);
array_Canciones.push(cancion_69);
array_Canciones.push(cancion_70);
array_Canciones.push(cancion_71);
array_Canciones.push(cancion_72);
array_Canciones.push(cancion_73);
array_Canciones.push(cancion_74);
array_Canciones.push(cancion_75);
array_Canciones.push(cancion_76);
array_Canciones.push(cancion_77);
array_Canciones.push(cancion_78);
array_Canciones.push(cancion_79);
array_Canciones.push(cancion_80);
array_Canciones.push(cancion_81);
array_Canciones.push(cancion_82);
array_Canciones.push(cancion_83);
array_Canciones.push(cancion_84);
array_Canciones.push(cancion_85);
array_Canciones.push(cancion_86);
array_Canciones.push(cancion_87);
array_Canciones.push(cancion_88);
array_Canciones.push(cancion_89);
array_Canciones.push(cancion_90);
array_Canciones.push(cancion_91);
array_Canciones.push(cancion_92);
array_Canciones.push(cancion_93);
array_Canciones.push(cancion_94);
array_Canciones.push(cancion_95);
array_Canciones.push(cancion_96);
array_Canciones.push(cancion_97);
array_Canciones.push(cancion_98);
array_Canciones.push(cancion_99);
array_Canciones.push(cancion_100);
array_Canciones.push(cancion_101);
array_Canciones.push(cancion_102);
array_Canciones.push(cancion_103);
array_Canciones.push(cancion_104);
array_Canciones.push(cancion_105);
array_Canciones.push(cancion_106);
array_Canciones.push(cancion_107);
//array_Canciones.push(cancion_108);

//************************************************************************* */
//************************************************************************* */
//************************************************************************* */
//************************************************************************* */
//DOM ACQUISITIONS

var lista = [];
const soundClips_1 = document.querySelector(".sound-clips_1");

//*************************************************************************************
//MULTIPLE PLAYS

const multiple_play_source_1 = document.getElementById("multiple_play_source_1");
const multiple_play_source_2 = document.getElementById("multiple_play_source_2");
const multiple_play_source_3 = document.getElementById("multiple_play_source_3");
const multiple_play_source_4 = document.getElementById("multiple_play_source_4");
const multiple_play_test_player = document.getElementById("multiple_play_test_player");
//*************************************************************************************
//*************************************************************************************
//********     CHANNEL 1 - 4 CHANNEL CONTROLS   **************************************************************
//*************************************************************************************
//*************************************************************************************
//CHANNEL 1 - 4

const channel_1_volume = document.getElementById("channel_1_volume");
const channel_1_volume_value = document.getElementById("channel_1_volume_value");
channel_1_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_volNode.volume.value = -100;
    channel_1_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_volume", -100);
  }
  else {
    channel_1_volNode.volume.value = e.currentTarget.value;
    channel_1_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_volume", e.currentTarget.value);
  }
});

channel_1_volume.ondblclick = function () {
  channel_1_volNode.volume.rampTo(0, 0.500);
  channel_1_volume_value.innerHTML = 0;
  channel_1_volume.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_volume_rampTo", 0);
};

const channel_2_volume = document.getElementById("channel_2_volume");
const channel_2_volume_value = document.getElementById("channel_2_volume_value");
channel_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_volNode.volume.value = -100;
    channel_2_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_volume", -100);
  }
  else {
    channel_2_volNode.volume.value = e.currentTarget.value;
    channel_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_volume", e.currentTarget.value);
  }
});

channel_2_volume.ondblclick = function () {
  channel_2_volNode.volume.rampTo(0, 0.500);
  channel_2_volume_value.innerHTML = 0;
  channel_2_volume.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_volume_rampTo", 0);
};

const channel_3_volume = document.getElementById("channel_3_volume");
const channel_3_volume_value = document.getElementById("channel_3_volume_value");
channel_3_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_volNode.volume.value = -100;
    channel_3_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_volume", -100);
  }
  else {
    channel_3_volNode.volume.value = e.currentTarget.value;
    channel_3_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_volume", e.currentTarget.value);
  }
});

channel_3_volume.ondblclick = function () {
  channel_3_volNode.volume.rampTo(0, 0.500);
  channel_3_volume_value.innerHTML = 0;
  channel_3_volume.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_volume_rampTo", 0);
};

const channel_4_volume = document.getElementById("channel_4_volume");
const channel_4_volume_value = document.getElementById("channel_4_volume_value");
channel_4_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_volNode.volume.value = -100;
    channel_4_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_4_volume", -100);
  }
  else {
    channel_4_volNode.volume.value = e.currentTarget.value;
    channel_4_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_4_volume", e.currentTarget.value);
  }
});

channel_4_volume.ondblclick = function () {
  channel_4_volNode.volume.rampTo(0, 0.500);
  channel_4_volume_value.innerHTML = 0;
  channel_4_volume.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_4_volume_rampTo", 0);
};

const channel_1_pan = document.getElementById("channel_1_pan");
const channel_1_pan_value = document.getElementById("channel_1_pan_value");
channel_1_pan.addEventListener("change", function (e) {
  channel_1_panNode.pan.value = e.currentTarget.value;
  channel_1_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_pan", e.currentTarget.value);
});

channel_1_pan.ondblclick = function () {
  channel_1_panNode.pan.rampTo(0, 2);
  channel_1_pan_value.innerHTML = 0;
  channel_1_pan.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_pan", 0);
};

const channel_2_pan = document.getElementById("channel_2_pan");
const channel_2_pan_value = document.getElementById("channel_2_pan_value");
channel_2_pan.addEventListener("change", function (e) {
  channel_2_panNode.pan.value = e.currentTarget.value;
  channel_2_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_pan", e.currentTarget.value);
});

channel_2_pan.ondblclick = function () {
  channel_2_panNode.pan.rampTo(0, 2);
  channel_2_pan_value.innerHTML = 0;
  channel_2_pan.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_pan", 0);
};
const channel_3_pan = document.getElementById("channel_3_pan");
const channel_3_pan_value = document.getElementById("channel_3_pan_value");
channel_3_pan.addEventListener("change", function (e) {
  channel_3_panNode.pan.value = e.currentTarget.value;
  channel_3_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_pan", e.currentTarget.value);
});

channel_3_pan.ondblclick = function () {
  channel_3_panNode.pan.rampTo(0, 2);
  channel_3_pan_value.innerHTML = 0;
  channel_3_pan.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_pan", 0);
};
const channel_4_pan = document.getElementById("channel_4_pan");
const channel_4_pan_value = document.getElementById("channel_4_pan_value");
channel_4_pan.addEventListener("change", function (e) {
  channel_4_panNode.pan.value = e.currentTarget.value;
  channel_4_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_4_pan", e.currentTarget.value);
});

channel_4_pan.ondblclick = function () {
  channel_4_panNode.pan.rampTo(0, 2);
  channel_4_pan_value.innerHTML = 0;
  channel_4_pan.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_4_pan", 0);
};

//*************************************************************************************
//*************************************************************************************
//********     CHANNEL 1  - 4 ************************************************************
// *******     FX  1  - 4     **********************************************************
// ********       FILTER    **************************************************************
//*************************************************************************************
//*************************************************************************************
const channel_1_filter_1_select = document.getElementById("channel_1_filter_1_select");
channel_1_filter_1_select.addEventListener("change", function (e) {

  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        channel_1_filter.type = e.currentTarget.value;
        channel_1_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_select", e.currentTarget.value);
        if (channel_1_filter_eq_type == "on") {
          hide_all_EQ_divs("1");
          channel_1_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        channel_1_filter.type = e.currentTarget.value;
        channel_1_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        channel_1_filter.type = e.currentTarget.value;
        channel_1_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      channel_1_filter_eq_type = "empty";
      channel_1_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT channel_1_filter_select switch"); }
  }
});

//SHELF
const channel_1_filter_frequency_text_shelf = document.getElementById("channel_1_filter_frequency_text_shelf");
const channel_1_filter_frequency_shelf = document.getElementById("channel_1_filter_frequency_shelf");
const channel_1_filter_frequency_value_shelf = document.getElementById("channel_1_filter_frequency_value_shelf");
channel_1_filter_frequency_shelf.addEventListener("change", function (e) {
  channel_1_filter.frequency.value = e.currentTarget.value;
  channel_1_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_frequency_text_shelf", e.currentTarget.value);
});

const channel_1_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const channel_1_filter_detune_shelf = document.getElementById("channel_1_filter_detune_shelf");
const channel_1_filter_detune_value_shelf = document.getElementById("channel_1_filter_detune_value_shelf");
channel_1_filter_detune_shelf.addEventListener("change", function (e) {
  channel_1_filter.detune.value = e.currentTarget.value;
  channel_1_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_detune_text_shelf", e.currentTarget.value);
});

const channel_1_filter_gain_text_shelf = document.getElementById("channel_1_filter_gain_text_shelf");
const channel_1_filter_gain_shelf = document.getElementById("channel_1_filter_gain_shelf");
const channel_1_filter_gain_value_shelf = document.getElementById("channel_1_filter_gain_value_shelf");
channel_1_filter_gain_shelf.addEventListener("change", function (e) {
  channel_1_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_gain_shelf", e.currentTarget.value);
  channel_1_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const channel_1_filter_frequency_text_peaking = document.getElementById("channel_1_filter_frequency_text_peaking");
const channel_1_filter_frequency_peaking = document.getElementById("channel_1_filter_frequency_peaking");
const channel_1_filter_frequency_value_peaking = document.getElementById("channel_1_filter_frequency_value_peaking");
channel_1_filter_frequency_peaking.addEventListener("change", function (e) {
  channel_1_filter.frequency.value = e.currentTarget.value;
  channel_1_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_frequency_peaking", e.currentTarget.value);
});

const channel_1_filter_Q_text_peaking = document.getElementById("channel_1_filter_Q_text_peaking");
const channel_1_filter_Q_peaking = document.getElementById("channel_1_filter_Q_peaking");
const channel_1_filter_Q_value_peaking = document.getElementById("channel_1_filter_Q_value_peaking");
channel_1_filter_Q_peaking.addEventListener("change", function (e) {
  channel_1_filter.Q.value = e.currentTarget.value;
  channel_1_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_Q_peaking", e.currentTarget.value);
});

const channel_1_filter_detune_text_peaking = document.getElementById("channel_1_filter_detune_text_peaking");
const channel_1_filter_detune_peaking = document.getElementById("channel_1_filter_detune_peaking");
const channel_1_filter_detune_value_peaking = document.getElementById("channel_1_filter_detune_value_peaking");
channel_1_filter_detune_peaking.addEventListener("change", function (e) {
  channel_1_filter.detune.value = e.currentTarget.value;
  channel_1_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_detune_peaking", e.currentTarget.value);
});

const channel_1_filter_gain_text_peaking = document.getElementById("channel_1_filter_gain_text_peaking");
const channel_1_filter_gain_peaking = document.getElementById("channel_1_filter_gain_peaking");
const channel_1_filter_gain_value_peaking = document.getElementById("channel_1_filter_gain_value_peaking");
channel_1_filter_gain_peaking.addEventListener("change", function (e) {
  channel_1_filter.gain.value = e.currentTarget.value;
  channel_1_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const channel_1_filter_frequency_allpass = document.getElementById("channel_1_filter_frequency_allpass");
const channel_1_filter_frequency_value_allpass = document.getElementById("channel_1_filter_frequency_value_allpass");
const channel_1_filter_frequency_text_allpass = document.getElementById("channel_1_filter_frequency_text_allpass");
channel_1_filter_frequency_allpass.addEventListener("change", function (e) {
  channel_1_filter.frequency.value = e.currentTarget.value;
  channel_1_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_frequency_value_allpass", e.currentTarget.value);
});

const channel_1_filter_Q_allpass = document.getElementById("channel_1_filter_Q_allpass");
const channel_1_filter_Q_value_allpass = document.getElementById("channel_1_filter_Q_value_allpass");
const channel_1_filter_Q_text_allpass = document.getElementById("channel_1_filter_Q_text_allpass");
channel_1_filter_Q_allpass.addEventListener("change", function (e) {
  channel_1_filter.Q.value = e.currentTarget.value;
  channel_1_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_Q_value_allpass", e.currentTarget.value);
});

const channel_1_filter_detune_allpass = document.getElementById("channel_1_filter_detune_allpass");
const channel_1_filter_detune_value_allpass = document.getElementById("channel_1_filter_detune_value_allpass");
const channel_1_filter_detune_text_allpass = document.getElementById("channel_1_filter_detune_text_allpass");
channel_1_filter_detune_allpass.addEventListener("change", function (e) {
  channel_1_filter.detune.value = e.currentTarget.value;
  channel_1_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_filter_detune_value_allpass", e.currentTarget.value);
});

const channel_1_filter_eq_On_Button = document.getElementById("channel_1_filter_eq_On_Button");

const channel_2_filter_1_select = document.getElementById("channel_2_filter_1_select");
channel_2_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        channel_2_filter.type = e.currentTarget.value;
        channel_2_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_select", e.currentTarget.value);
        if (channel_2_filter_eq_type == "on") {
          hide_all_EQ_divs("2");
          channel_2_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        channel_2_filter.type = e.currentTarget.value;
        channel_2_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        channel_2_filter.type = e.currentTarget.value;
        channel_2_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      channel_2_filter_eq_type = "empty";
      channel_2_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT channel_2_filter_select switch"); }
  }
});

//SHELF
const channel_2_filter_frequency_text_shelf = document.getElementById("channel_2_filter_frequency_text_shelf");
const channel_2_filter_frequency_shelf = document.getElementById("channel_2_filter_frequency_shelf");
const channel_2_filter_frequency_value_shelf = document.getElementById("channel_2_filter_frequency_value_shelf");
channel_2_filter_frequency_shelf.addEventListener("change", function (e) {
  channel_2_filter.frequency.value = e.currentTarget.value;
  channel_2_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_frequency_text_shelf", e.currentTarget.value);
});

const channel_2_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const channel_2_filter_detune_shelf = document.getElementById("channel_2_filter_detune_shelf");
const channel_2_filter_detune_value_shelf = document.getElementById("channel_2_filter_detune_value_shelf");
channel_2_filter_detune_shelf.addEventListener("change", function (e) {
  channel_2_filter.detune.value = e.currentTarget.value;
  channel_2_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_detune_text_shelf", e.currentTarget.value);
});

const channel_2_filter_gain_text_shelf = document.getElementById("channel_2_filter_gain_text_shelf");
const channel_2_filter_gain_shelf = document.getElementById("channel_2_filter_gain_shelf");
const channel_2_filter_gain_value_shelf = document.getElementById("channel_2_filter_gain_value_shelf");
channel_2_filter_gain_shelf.addEventListener("change", function (e) {
  channel_2_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_gain_shelf", e.currentTarget.value);
  channel_2_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const channel_2_filter_frequency_text_peaking = document.getElementById("channel_2_filter_frequency_text_peaking");
const channel_2_filter_frequency_peaking = document.getElementById("channel_2_filter_frequency_peaking");
const channel_2_filter_frequency_value_peaking = document.getElementById("channel_2_filter_frequency_value_peaking");
channel_2_filter_frequency_peaking.addEventListener("change", function (e) {
  channel_2_filter.frequency.value = e.currentTarget.value;
  channel_2_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_frequency_peaking", e.currentTarget.value);
});

const channel_2_filter_Q_text_peaking = document.getElementById("channel_2_filter_Q_text_peaking");
const channel_2_filter_Q_peaking = document.getElementById("channel_2_filter_Q_peaking");
const channel_2_filter_Q_value_peaking = document.getElementById("channel_2_filter_Q_value_peaking");
channel_2_filter_Q_peaking.addEventListener("change", function (e) {
  channel_2_filter.Q.value = e.currentTarget.value;
  channel_2_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_Q_peaking", e.currentTarget.value);
});

const channel_2_filter_detune_text_peaking = document.getElementById("channel_2_filter_detune_text_peaking");
const channel_2_filter_detune_peaking = document.getElementById("channel_2_filter_detune_peaking");
const channel_2_filter_detune_value_peaking = document.getElementById("channel_2_filter_detune_value_peaking");
channel_2_filter_detune_peaking.addEventListener("change", function (e) {
  channel_2_filter.detune.value = e.currentTarget.value;
  channel_2_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_detune_peaking", e.currentTarget.value);
});

const channel_2_filter_gain_text_peaking = document.getElementById("channel_2_filter_gain_text_peaking");
const channel_2_filter_gain_peaking = document.getElementById("channel_2_filter_gain_peaking");
const channel_2_filter_gain_value_peaking = document.getElementById("channel_2_filter_gain_value_peaking");
channel_2_filter_gain_peaking.addEventListener("change", function (e) {
  channel_2_filter.gain.value = e.currentTarget.value;
  channel_2_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const channel_2_filter_frequency_allpass = document.getElementById("channel_2_filter_frequency_allpass");
const channel_2_filter_frequency_value_allpass = document.getElementById("channel_2_filter_frequency_value_allpass");
const channel_2_filter_frequency_text_allpass = document.getElementById("channel_2_filter_frequency_text_allpass");
channel_2_filter_frequency_allpass.addEventListener("change", function (e) {
  channel_2_filter.frequency.value = e.currentTarget.value;
  channel_2_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_frequency_value_allpass", e.currentTarget.value);
});

const channel_2_filter_Q_allpass = document.getElementById("channel_2_filter_Q_allpass");
const channel_2_filter_Q_value_allpass = document.getElementById("channel_2_filter_Q_value_allpass");
const channel_2_filter_Q_text_allpass = document.getElementById("channel_2_filter_Q_text_allpass");
channel_2_filter_Q_allpass.addEventListener("change", function (e) {
  channel_2_filter.Q.value = e.currentTarget.value;
  channel_2_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_Q_value_allpass", e.currentTarget.value);
});

const channel_2_filter_detune_allpass = document.getElementById("channel_2_filter_detune_allpass");
const channel_2_filter_detune_value_allpass = document.getElementById("channel_2_filter_detune_value_allpass");
const channel_2_filter_detune_text_allpass = document.getElementById("channel_2_filter_detune_text_allpass");
channel_2_filter_detune_allpass.addEventListener("change", function (e) {
  channel_2_filter.detune.value = e.currentTarget.value;
  channel_2_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_filter_detune_value_allpass", e.currentTarget.value);
});

const channel_2_filter_eq_On_Button = document.getElementById("channel_2_filter_eq_On_Button");

const channel_3_filter_1_select = document.getElementById("channel_3_filter_1_select");
channel_3_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        channel_3_filter.type = e.currentTarget.value;
        channel_3_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_select", e.currentTarget.value);
        if (channel_3_filter_eq_type == "on") {
          hide_all_EQ_divs("3");
          channel_3_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        channel_3_filter.type = e.currentTarget.value;
        channel_3_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        channel_3_filter.type = e.currentTarget.value;
        channel_3_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      channel_3_filter_eq_type = "empty";
      channel_3_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT channel_3_filter_select switch"); }
  }
});

//SHELF
const channel_3_filter_frequency_text_shelf = document.getElementById("channel_3_filter_frequency_text_shelf");
const channel_3_filter_frequency_shelf = document.getElementById("channel_3_filter_frequency_shelf");
const channel_3_filter_frequency_value_shelf = document.getElementById("channel_3_filter_frequency_value_shelf");
channel_3_filter_frequency_shelf.addEventListener("change", function (e) {
  channel_3_filter.frequency.value = e.currentTarget.value;
  channel_3_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_frequency_text_shelf", e.currentTarget.value);
});

const channel_3_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const channel_3_filter_detune_shelf = document.getElementById("channel_3_filter_detune_shelf");
const channel_3_filter_detune_value_shelf = document.getElementById("channel_3_filter_detune_value_shelf");
channel_3_filter_detune_shelf.addEventListener("change", function (e) {
  channel_3_filter.detune.value = e.currentTarget.value;
  channel_3_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_detune_text_shelf", e.currentTarget.value);
});

const channel_3_filter_gain_text_shelf = document.getElementById("channel_3_filter_gain_text_shelf");
const channel_3_filter_gain_shelf = document.getElementById("channel_3_filter_gain_shelf");
const channel_3_filter_gain_value_shelf = document.getElementById("channel_3_filter_gain_value_shelf");
channel_3_filter_gain_shelf.addEventListener("change", function (e) {
  channel_3_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_gain_shelf", e.currentTarget.value);
  channel_3_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const channel_3_filter_frequency_text_peaking = document.getElementById("channel_3_filter_frequency_text_peaking");
const channel_3_filter_frequency_peaking = document.getElementById("channel_3_filter_frequency_peaking");
const channel_3_filter_frequency_value_peaking = document.getElementById("channel_3_filter_frequency_value_peaking");
channel_3_filter_frequency_peaking.addEventListener("change", function (e) {
  channel_3_filter.frequency.value = e.currentTarget.value;
  channel_3_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_frequency_peaking", e.currentTarget.value);
});

const channel_3_filter_Q_text_peaking = document.getElementById("channel_3_filter_Q_text_peaking");
const channel_3_filter_Q_peaking = document.getElementById("channel_3_filter_Q_peaking");
const channel_3_filter_Q_value_peaking = document.getElementById("channel_3_filter_Q_value_peaking");
channel_3_filter_Q_peaking.addEventListener("change", function (e) {
  channel_3_filter.Q.value = e.currentTarget.value;
  channel_3_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_Q_peaking", e.currentTarget.value);
});

const channel_3_filter_detune_text_peaking = document.getElementById("channel_3_filter_detune_text_peaking");
const channel_3_filter_detune_peaking = document.getElementById("channel_3_filter_detune_peaking");
const channel_3_filter_detune_value_peaking = document.getElementById("channel_3_filter_detune_value_peaking");
channel_3_filter_detune_peaking.addEventListener("change", function (e) {
  channel_3_filter.detune.value = e.currentTarget.value;
  channel_3_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_detune_peaking", e.currentTarget.value);
});

const channel_3_filter_gain_text_peaking = document.getElementById("channel_3_filter_gain_text_peaking");
const channel_3_filter_gain_peaking = document.getElementById("channel_3_filter_gain_peaking");
const channel_3_filter_gain_value_peaking = document.getElementById("channel_3_filter_gain_value_peaking");
channel_3_filter_gain_peaking.addEventListener("change", function (e) {
  channel_3_filter.gain.value = e.currentTarget.value;
  channel_3_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const channel_3_filter_frequency_allpass = document.getElementById("channel_3_filter_frequency_allpass");
const channel_3_filter_frequency_value_allpass = document.getElementById("channel_3_filter_frequency_value_allpass");
const channel_3_filter_frequency_text_allpass = document.getElementById("channel_3_filter_frequency_text_allpass");
channel_3_filter_frequency_allpass.addEventListener("change", function (e) {
  channel_3_filter.frequency.value = e.currentTarget.value;
  channel_3_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_frequency_value_allpass", e.currentTarget.value);
});

const channel_3_filter_Q_allpass = document.getElementById("channel_3_filter_Q_allpass");
const channel_3_filter_Q_value_allpass = document.getElementById("channel_3_filter_Q_value_allpass");
const channel_3_filter_Q_text_allpass = document.getElementById("channel_3_filter_Q_text_allpass");
channel_3_filter_Q_allpass.addEventListener("change", function (e) {
  channel_3_filter.Q.value = e.currentTarget.value;
  channel_3_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_Q_value_allpass", e.currentTarget.value);
});

const channel_3_filter_detune_allpass = document.getElementById("channel_3_filter_detune_allpass");
const channel_3_filter_detune_value_allpass = document.getElementById("channel_3_filter_detune_value_allpass");
const channel_3_filter_detune_text_allpass = document.getElementById("channel_3_filter_detune_text_allpass");
channel_3_filter_detune_allpass.addEventListener("change", function (e) {
  channel_3_filter.detune.value = e.currentTarget.value;
  channel_3_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_filter_detune_value_allpass", e.currentTarget.value);
});

const channel_3_filter_eq_On_Button = document.getElementById("channel_3_filter_eq_On_Button");

const channel_4_filter_1_select = document.getElementById("channel_4_filter_1_select");
channel_4_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        channel_4_filter.type = e.currentTarget.value;
        channel_4_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_select", e.currentTarget.value);
        if (channel_4_filter_eq_type == "on") {
          hide_all_EQ_divs("4");
          channel_4_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        channel_4_filter.type = e.currentTarget.value;
        channel_4_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        channel_4_filter.type = e.currentTarget.value;
        channel_4_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      channel_4_filter_eq_type = "empty";
      channel_4_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT channel_4_filter_select switch"); }
  }
});

//SHELF
const channel_4_filter_frequency_text_shelf = document.getElementById("channel_4_filter_frequency_text_shelf");
const channel_4_filter_frequency_shelf = document.getElementById("channel_4_filter_frequency_shelf");
const channel_4_filter_frequency_value_shelf = document.getElementById("channel_4_filter_frequency_value_shelf");
channel_4_filter_frequency_shelf.addEventListener("change", function (e) {
  channel_4_filter.frequency.value = e.currentTarget.value;
  channel_4_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_frequency_text_shelf", e.currentTarget.value);
});

const channel_4_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const channel_4_filter_detune_shelf = document.getElementById("channel_4_filter_detune_shelf");
const channel_4_filter_detune_value_shelf = document.getElementById("channel_4_filter_detune_value_shelf");
channel_4_filter_detune_shelf.addEventListener("change", function (e) {
  channel_4_filter.detune.value = e.currentTarget.value;
  channel_4_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_detune_text_shelf", e.currentTarget.value);
});

const channel_4_filter_gain_text_shelf = document.getElementById("channel_4_filter_gain_text_shelf");
const channel_4_filter_gain_shelf = document.getElementById("channel_4_filter_gain_shelf");
const channel_4_filter_gain_value_shelf = document.getElementById("channel_4_filter_gain_value_shelf");
channel_4_filter_gain_shelf.addEventListener("change", function (e) {
  channel_4_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_gain_shelf", e.currentTarget.value);
  channel_4_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const channel_4_filter_frequency_text_peaking = document.getElementById("channel_4_filter_frequency_text_peaking");
const channel_4_filter_frequency_peaking = document.getElementById("channel_4_filter_frequency_peaking");
const channel_4_filter_frequency_value_peaking = document.getElementById("channel_4_filter_frequency_value_peaking");
channel_4_filter_frequency_peaking.addEventListener("change", function (e) {
  channel_4_filter.frequency.value = e.currentTarget.value;
  channel_4_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_frequency_peaking", e.currentTarget.value);
});

const channel_4_filter_Q_text_peaking = document.getElementById("channel_4_filter_Q_text_peaking");
const channel_4_filter_Q_peaking = document.getElementById("channel_4_filter_Q_peaking");
const channel_4_filter_Q_value_peaking = document.getElementById("channel_4_filter_Q_value_peaking");
channel_4_filter_Q_peaking.addEventListener("change", function (e) {
  channel_4_filter.Q.value = e.currentTarget.value;
  channel_4_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_Q_peaking", e.currentTarget.value);
});

const channel_4_filter_detune_text_peaking = document.getElementById("channel_4_filter_detune_text_peaking");
const channel_4_filter_detune_peaking = document.getElementById("channel_4_filter_detune_peaking");
const channel_4_filter_detune_value_peaking = document.getElementById("channel_4_filter_detune_value_peaking");
channel_4_filter_detune_peaking.addEventListener("change", function (e) {
  channel_4_filter.detune.value = e.currentTarget.value;
  channel_4_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_detune_peaking", e.currentTarget.value);
});

const channel_4_filter_gain_text_peaking = document.getElementById("channel_4_filter_gain_text_peaking");
const channel_4_filter_gain_peaking = document.getElementById("channel_4_filter_gain_peaking");
const channel_4_filter_gain_value_peaking = document.getElementById("channel_4_filter_gain_value_peaking");
channel_4_filter_gain_peaking.addEventListener("change", function (e) {
  channel_4_filter.gain.value = e.currentTarget.value;
  channel_4_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const channel_4_filter_frequency_allpass = document.getElementById("channel_4_filter_frequency_allpass");
const channel_4_filter_frequency_value_allpass = document.getElementById("channel_4_filter_frequency_value_allpass");
const channel_4_filter_frequency_text_allpass = document.getElementById("channel_4_filter_frequency_text_allpass");
channel_4_filter_frequency_allpass.addEventListener("change", function (e) {
  channel_4_filter.frequency.value = e.currentTarget.value;
  channel_4_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_frequency_value_allpass", e.currentTarget.value);
});

const channel_4_filter_Q_allpass = document.getElementById("channel_4_filter_Q_allpass");
const channel_4_filter_Q_value_allpass = document.getElementById("channel_4_filter_Q_value_allpass");
const channel_4_filter_Q_text_allpass = document.getElementById("channel_4_filter_Q_text_allpass");
channel_4_filter_Q_allpass.addEventListener("change", function (e) {
  channel_4_filter.Q.value = e.currentTarget.value;
  channel_4_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_Q_value_allpass", e.currentTarget.value);
});

const channel_4_filter_detune_allpass = document.getElementById("channel_4_filter_detune_allpass");
const channel_4_filter_detune_value_allpass = document.getElementById("channel_4_filter_detune_value_allpass");
const channel_4_filter_detune_text_allpass = document.getElementById("channel_4_filter_detune_text_allpass");
channel_4_filter_detune_allpass.addEventListener("change", function (e) {
  channel_4_filter.detune.value = e.currentTarget.value;
  channel_4_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_detune_value_allpass", e.currentTarget.value);
});

const channel_4_filter_eq_On_Button = document.getElementById("channel_4_filter_eq_On_Button");

const fx_1_filter_1_select = document.getElementById("fx_1_filter_1_select");
fx_1_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        fx_1_filter.type = e.currentTarget.value;
        fx_1_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_select", e.currentTarget.value);
        if (fx_1_filter_eq_type == "on") {
          hide_all_EQ_divs("fx_1");
          fx_1_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        fx_1_filter.type = e.currentTarget.value;
        fx_1_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        fx_1_filter.type = e.currentTarget.value;
        fx_1_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      fx_1_filter_eq_type = "empty";
      fx_1_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT fx_1_filter_select switch"); }
  }
});

//SHELF
const fx_1_filter_frequency_text_shelf = document.getElementById("fx_1_filter_frequency_text_shelf");
const fx_1_filter_frequency_shelf = document.getElementById("fx_1_filter_frequency_shelf");
const fx_1_filter_frequency_value_shelf = document.getElementById("fx_1_filter_frequency_value_shelf");
fx_1_filter_frequency_shelf.addEventListener("change", function (e) {
  fx_1_filter.frequency.value = e.currentTarget.value;
  fx_1_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_frequency_text_shelf", e.currentTarget.value);
});

const fx_1_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const fx_1_filter_detune_shelf = document.getElementById("fx_1_filter_detune_shelf");
const fx_1_filter_detune_value_shelf = document.getElementById("fx_1_filter_detune_value_shelf");
fx_1_filter_detune_shelf.addEventListener("change", function (e) {
  fx_1_filter.detune.value = e.currentTarget.value;
  fx_1_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_detune_text_shelf", e.currentTarget.value);
});

const fx_1_filter_gain_text_shelf = document.getElementById("fx_1_filter_gain_text_shelf");
const fx_1_filter_gain_shelf = document.getElementById("fx_1_filter_gain_shelf");
const fx_1_filter_gain_value_shelf = document.getElementById("fx_1_filter_gain_value_shelf");
fx_1_filter_gain_shelf.addEventListener("change", function (e) {
  fx_1_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_gain_shelf", e.currentTarget.value);
  fx_1_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const fx_1_filter_frequency_text_peaking = document.getElementById("fx_1_filter_frequency_text_peaking");
const fx_1_filter_frequency_peaking = document.getElementById("fx_1_filter_frequency_peaking");
const fx_1_filter_frequency_value_peaking = document.getElementById("fx_1_filter_frequency_value_peaking");
fx_1_filter_frequency_peaking.addEventListener("change", function (e) {
  fx_1_filter.frequency.value = e.currentTarget.value;
  fx_1_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_frequency_peaking", e.currentTarget.value);
});

const fx_1_filter_Q_text_peaking = document.getElementById("fx_1_filter_Q_text_peaking");
const fx_1_filter_Q_peaking = document.getElementById("fx_1_filter_Q_peaking");
const fx_1_filter_Q_value_peaking = document.getElementById("fx_1_filter_Q_value_peaking");
fx_1_filter_Q_peaking.addEventListener("change", function (e) {
  fx_1_filter.Q.value = e.currentTarget.value;
  fx_1_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_Q_peaking", e.currentTarget.value);
});

const fx_1_filter_detune_text_peaking = document.getElementById("fx_1_filter_detune_text_peaking");
const fx_1_filter_detune_peaking = document.getElementById("fx_1_filter_detune_peaking");
const fx_1_filter_detune_value_peaking = document.getElementById("fx_1_filter_detune_value_peaking");
fx_1_filter_detune_peaking.addEventListener("change", function (e) {
  fx_1_filter.detune.value = e.currentTarget.value;
  fx_1_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_detune_peaking", e.currentTarget.value);
});

const fx_1_filter_gain_text_peaking = document.getElementById("fx_1_filter_gain_text_peaking");
const fx_1_filter_gain_peaking = document.getElementById("fx_1_filter_gain_peaking");
const fx_1_filter_gain_value_peaking = document.getElementById("fx_1_filter_gain_value_peaking");
fx_1_filter_gain_peaking.addEventListener("change", function (e) {
  fx_1_filter.gain.value = e.currentTarget.value;
  fx_1_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const fx_1_filter_frequency_allpass = document.getElementById("fx_1_filter_frequency_allpass");
const fx_1_filter_frequency_value_allpass = document.getElementById("fx_1_filter_frequency_value_allpass");
const fx_1_filter_frequency_text_allpass = document.getElementById("fx_1_filter_frequency_text_allpass");
fx_1_filter_frequency_allpass.addEventListener("change", function (e) {
  fx_1_filter.frequency.value = e.currentTarget.value;
  fx_1_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_frequency_value_allpass", e.currentTarget.value);
});

const fx_1_filter_Q_allpass = document.getElementById("fx_1_filter_Q_allpass");
const fx_1_filter_Q_value_allpass = document.getElementById("fx_1_filter_Q_value_allpass");
const fx_1_filter_Q_text_allpass = document.getElementById("fx_1_filter_Q_text_allpass");
fx_1_filter_Q_allpass.addEventListener("change", function (e) {
  fx_1_filter.Q.value = e.currentTarget.value;
  fx_1_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_Q_value_allpass", e.currentTarget.value);
});

const fx_1_filter_detune_allpass = document.getElementById("fx_1_filter_detune_allpass");
const fx_1_filter_detune_value_allpass = document.getElementById("fx_1_filter_detune_value_allpass");
const fx_1_filter_detune_text_allpass = document.getElementById("fx_1_filter_detune_text_allpass");
fx_1_filter_detune_allpass.addEventListener("change", function (e) {
  fx_1_filter.detune.value = e.currentTarget.value;
  fx_1_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_detune_value_allpass", e.currentTarget.value);
});

const fx_1_filter_eq_On_Button = document.getElementById("fx_1_filter_eq_On_Button");

const fx_2_filter_1_select = document.getElementById("fx_2_filter_1_select");
fx_2_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        fx_2_filter.type = e.currentTarget.value;
        fx_2_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_select", e.currentTarget.value);
        if (fx_2_filter_eq_type == "on") {
          hide_all_EQ_divs("fx_2");
          fx_2_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        fx_2_filter.type = e.currentTarget.value;
        fx_2_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        fx_2_filter.type = e.currentTarget.value;
        fx_2_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      fx_2_filter_eq_type = "empty";
      fx_2_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT fx_2_filter_select switch"); }
  }
});

//SHELF
const fx_2_filter_frequency_text_shelf = document.getElementById("fx_2_filter_frequency_text_shelf");
const fx_2_filter_frequency_shelf = document.getElementById("fx_2_filter_frequency_shelf");
const fx_2_filter_frequency_value_shelf = document.getElementById("fx_2_filter_frequency_value_shelf");
fx_2_filter_frequency_shelf.addEventListener("change", function (e) {
  fx_2_filter.frequency.value = e.currentTarget.value;
  fx_2_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_frequency_text_shelf", e.currentTarget.value);
});

const fx_2_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const fx_2_filter_detune_shelf = document.getElementById("fx_2_filter_detune_shelf");
const fx_2_filter_detune_value_shelf = document.getElementById("fx_2_filter_detune_value_shelf");
fx_2_filter_detune_shelf.addEventListener("change", function (e) {
  fx_2_filter.detune.value = e.currentTarget.value;
  fx_2_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_detune_text_shelf", e.currentTarget.value);
});

const fx_2_filter_gain_text_shelf = document.getElementById("fx_2_filter_gain_text_shelf");
const fx_2_filter_gain_shelf = document.getElementById("fx_2_filter_gain_shelf");
const fx_2_filter_gain_value_shelf = document.getElementById("fx_2_filter_gain_value_shelf");
fx_2_filter_gain_shelf.addEventListener("change", function (e) {
  fx_2_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_gain_shelf", e.currentTarget.value);
  fx_2_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const fx_2_filter_frequency_text_peaking = document.getElementById("fx_2_filter_frequency_text_peaking");
const fx_2_filter_frequency_peaking = document.getElementById("fx_2_filter_frequency_peaking");
const fx_2_filter_frequency_value_peaking = document.getElementById("fx_2_filter_frequency_value_peaking");
fx_2_filter_frequency_peaking.addEventListener("change", function (e) {
  fx_2_filter.frequency.value = e.currentTarget.value;
  fx_2_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_frequency_peaking", e.currentTarget.value);
});

const fx_2_filter_Q_text_peaking = document.getElementById("fx_2_filter_Q_text_peaking");
const fx_2_filter_Q_peaking = document.getElementById("fx_2_filter_Q_peaking");
const fx_2_filter_Q_value_peaking = document.getElementById("fx_2_filter_Q_value_peaking");
fx_2_filter_Q_peaking.addEventListener("change", function (e) {
  fx_2_filter.Q.value = e.currentTarget.value;
  fx_2_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_Q_peaking", e.currentTarget.value);
});

const fx_2_filter_detune_text_peaking = document.getElementById("fx_2_filter_detune_text_peaking");
const fx_2_filter_detune_peaking = document.getElementById("fx_2_filter_detune_peaking");
const fx_2_filter_detune_value_peaking = document.getElementById("fx_2_filter_detune_value_peaking");
fx_2_filter_detune_peaking.addEventListener("change", function (e) {
  fx_2_filter.detune.value = e.currentTarget.value;
  fx_2_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_detune_peaking", e.currentTarget.value);
});

const fx_2_filter_gain_text_peaking = document.getElementById("fx_2_filter_gain_text_peaking");
const fx_2_filter_gain_peaking = document.getElementById("fx_2_filter_gain_peaking");
const fx_2_filter_gain_value_peaking = document.getElementById("fx_2_filter_gain_value_peaking");
fx_2_filter_gain_peaking.addEventListener("change", function (e) {
  fx_2_filter.gain.value = e.currentTarget.value;
  fx_2_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const fx_2_filter_frequency_allpass = document.getElementById("fx_2_filter_frequency_allpass");
const fx_2_filter_frequency_value_allpass = document.getElementById("fx_2_filter_frequency_value_allpass");
const fx_2_filter_frequency_text_allpass = document.getElementById("fx_2_filter_frequency_text_allpass");
fx_2_filter_frequency_allpass.addEventListener("change", function (e) {
  fx_2_filter.frequency.value = e.currentTarget.value;
  fx_2_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_frequency_value_allpass", e.currentTarget.value);
});

const fx_2_filter_Q_allpass = document.getElementById("fx_2_filter_Q_allpass");
const fx_2_filter_Q_value_allpass = document.getElementById("fx_2_filter_Q_value_allpass");
const fx_2_filter_Q_text_allpass = document.getElementById("fx_2_filter_Q_text_allpass");
fx_2_filter_Q_allpass.addEventListener("change", function (e) {
  fx_2_filter.Q.value = e.currentTarget.value;
  fx_2_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_Q_value_allpass", e.currentTarget.value);
});

const fx_2_filter_detune_allpass = document.getElementById("fx_2_filter_detune_allpass");
const fx_2_filter_detune_value_allpass = document.getElementById("fx_2_filter_detune_value_allpass");
const fx_2_filter_detune_text_allpass = document.getElementById("fx_2_filter_detune_text_allpass");
fx_2_filter_detune_allpass.addEventListener("change", function (e) {
  fx_2_filter.detune.value = e.currentTarget.value;
  fx_2_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_detune_value_allpass", e.currentTarget.value);
});

const fx_2_filter_eq_On_Button = document.getElementById("fx_2_filter_eq_On_Button");

const fx_3_filter_1_select = document.getElementById("fx_3_filter_1_select");
fx_3_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        fx_3_filter.type = e.currentTarget.value;
        fx_3_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_select", e.currentTarget.value);
        if (fx_3_filter_eq_type == "on") {
          hide_all_EQ_divs("fx_3");
          fx_3_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        fx_3_filter.type = e.currentTarget.value;
        fx_3_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        fx_3_filter.type = e.currentTarget.value;
        fx_3_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      fx_3_filter_eq_type = "empty";
      fx_3_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT fx_3_filter_select switch"); }
  }
});

//SHELF
const fx_3_filter_frequency_text_shelf = document.getElementById("fx_3_filter_frequency_text_shelf");
const fx_3_filter_frequency_shelf = document.getElementById("fx_3_filter_frequency_shelf");
const fx_3_filter_frequency_value_shelf = document.getElementById("fx_3_filter_frequency_value_shelf");
fx_3_filter_frequency_shelf.addEventListener("change", function (e) {
  fx_3_filter.frequency.value = e.currentTarget.value;
  fx_3_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_frequency_text_shelf", e.currentTarget.value);
});

const fx_3_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const fx_3_filter_detune_shelf = document.getElementById("fx_3_filter_detune_shelf");
const fx_3_filter_detune_value_shelf = document.getElementById("fx_3_filter_detune_value_shelf");
fx_3_filter_detune_shelf.addEventListener("change", function (e) {
  fx_3_filter.detune.value = e.currentTarget.value;
  fx_3_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_detune_text_shelf", e.currentTarget.value);
});

const fx_3_filter_gain_text_shelf = document.getElementById("fx_3_filter_gain_text_shelf");
const fx_3_filter_gain_shelf = document.getElementById("fx_3_filter_gain_shelf");
const fx_3_filter_gain_value_shelf = document.getElementById("fx_3_filter_gain_value_shelf");
fx_3_filter_gain_shelf.addEventListener("change", function (e) {
  fx_3_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_gain_shelf", e.currentTarget.value);
  fx_3_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const fx_3_filter_frequency_text_peaking = document.getElementById("fx_3_filter_frequency_text_peaking");
const fx_3_filter_frequency_peaking = document.getElementById("fx_3_filter_frequency_peaking");
const fx_3_filter_frequency_value_peaking = document.getElementById("fx_3_filter_frequency_value_peaking");
fx_3_filter_frequency_peaking.addEventListener("change", function (e) {
  fx_3_filter.frequency.value = e.currentTarget.value;
  fx_3_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_frequency_peaking", e.currentTarget.value);
});

const fx_3_filter_Q_text_peaking = document.getElementById("fx_3_filter_Q_text_peaking");
const fx_3_filter_Q_peaking = document.getElementById("fx_3_filter_Q_peaking");
const fx_3_filter_Q_value_peaking = document.getElementById("fx_3_filter_Q_value_peaking");
fx_3_filter_Q_peaking.addEventListener("change", function (e) {
  fx_3_filter.Q.value = e.currentTarget.value;
  fx_3_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_Q_peaking", e.currentTarget.value);
});

const fx_3_filter_detune_text_peaking = document.getElementById("fx_3_filter_detune_text_peaking");
const fx_3_filter_detune_peaking = document.getElementById("fx_3_filter_detune_peaking");
const fx_3_filter_detune_value_peaking = document.getElementById("fx_3_filter_detune_value_peaking");
fx_3_filter_detune_peaking.addEventListener("change", function (e) {
  fx_3_filter.detune.value = e.currentTarget.value;
  fx_3_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_detune_peaking", e.currentTarget.value);
});

const fx_3_filter_gain_text_peaking = document.getElementById("fx_3_filter_gain_text_peaking");
const fx_3_filter_gain_peaking = document.getElementById("fx_3_filter_gain_peaking");
const fx_3_filter_gain_value_peaking = document.getElementById("fx_3_filter_gain_value_peaking");
fx_3_filter_gain_peaking.addEventListener("change", function (e) {
  fx_3_filter.gain.value = e.currentTarget.value;
  fx_3_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const fx_3_filter_frequency_allpass = document.getElementById("fx_3_filter_frequency_allpass");
const fx_3_filter_frequency_value_allpass = document.getElementById("fx_3_filter_frequency_value_allpass");
const fx_3_filter_frequency_text_allpass = document.getElementById("fx_3_filter_frequency_text_allpass");
fx_3_filter_frequency_allpass.addEventListener("change", function (e) {
  fx_3_filter.frequency.value = e.currentTarget.value;
  fx_3_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_frequency_value_allpass", e.currentTarget.value);
});

const fx_3_filter_Q_allpass = document.getElementById("fx_3_filter_Q_allpass");
const fx_3_filter_Q_value_allpass = document.getElementById("fx_3_filter_Q_value_allpass");
const fx_3_filter_Q_text_allpass = document.getElementById("fx_3_filter_Q_text_allpass");
fx_3_filter_Q_allpass.addEventListener("change", function (e) {
  fx_3_filter.Q.value = e.currentTarget.value;
  fx_3_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_Q_value_allpass", e.currentTarget.value);
});

const fx_3_filter_detune_allpass = document.getElementById("fx_3_filter_detune_allpass");
const fx_3_filter_detune_value_allpass = document.getElementById("fx_3_filter_detune_value_allpass");
const fx_3_filter_detune_text_allpass = document.getElementById("fx_3_filter_detune_text_allpass");
fx_3_filter_detune_allpass.addEventListener("change", function (e) {
  fx_3_filter.detune.value = e.currentTarget.value;
  fx_3_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_detune_value_allpass", e.currentTarget.value);
});

const fx_3_filter_eq_On_Button = document.getElementById("fx_3_filter_eq_On_Button");

const fx_4_filter_1_select = document.getElementById("fx_4_filter_1_select");
fx_4_filter_1_select.addEventListener("change", function (e) {
  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        fx_4_filter.type = e.currentTarget.value;
        fx_4_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_select", e.currentTarget.value);
        if (fx_4_filter_eq_type == "on") {
          hide_all_EQ_divs("fx_4");
          fx_4_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        fx_4_filter.type = e.currentTarget.value;
        fx_4_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        fx_4_filter.type = e.currentTarget.value;
        fx_4_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      fx_4_filter_eq_type = "empty";
      fx_4_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT fx_4_filter_select switch"); }
  }
});

//SHELF
const fx_4_filter_frequency_text_shelf = document.getElementById("fx_4_filter_frequency_text_shelf");
const fx_4_filter_frequency_shelf = document.getElementById("fx_4_filter_frequency_shelf");
const fx_4_filter_frequency_value_shelf = document.getElementById("fx_4_filter_frequency_value_shelf");
fx_4_filter_frequency_shelf.addEventListener("change", function (e) {
  fx_4_filter.frequency.value = e.currentTarget.value;
  fx_4_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_frequency_text_shelf", e.currentTarget.value);
});

const fx_4_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const fx_4_filter_detune_shelf = document.getElementById("fx_4_filter_detune_shelf");
const fx_4_filter_detune_value_shelf = document.getElementById("fx_4_filter_detune_value_shelf");
fx_4_filter_detune_shelf.addEventListener("change", function (e) {
  fx_4_filter.detune.value = e.currentTarget.value;
  fx_4_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_detune_text_shelf", e.currentTarget.value);
});

const fx_4_filter_gain_text_shelf = document.getElementById("fx_4_filter_gain_text_shelf");
const fx_4_filter_gain_shelf = document.getElementById("fx_4_filter_gain_shelf");
const fx_4_filter_gain_value_shelf = document.getElementById("fx_4_filter_gain_value_shelf");
fx_4_filter_gain_shelf.addEventListener("change", function (e) {
  fx_4_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_gain_shelf", e.currentTarget.value);
  fx_4_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const fx_4_filter_frequency_text_peaking = document.getElementById("fx_4_filter_frequency_text_peaking");
const fx_4_filter_frequency_peaking = document.getElementById("fx_4_filter_frequency_peaking");
const fx_4_filter_frequency_value_peaking = document.getElementById("fx_4_filter_frequency_value_peaking");
fx_4_filter_frequency_peaking.addEventListener("change", function (e) {
  fx_4_filter.frequency.value = e.currentTarget.value;
  fx_4_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_frequency_peaking", e.currentTarget.value);
});

const fx_4_filter_Q_text_peaking = document.getElementById("fx_4_filter_Q_text_peaking");
const fx_4_filter_Q_peaking = document.getElementById("fx_4_filter_Q_peaking");
const fx_4_filter_Q_value_peaking = document.getElementById("fx_4_filter_Q_value_peaking");
fx_4_filter_Q_peaking.addEventListener("change", function (e) {
  fx_4_filter.Q.value = e.currentTarget.value;
  fx_4_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_Q_peaking", e.currentTarget.value);
});

const fx_4_filter_detune_text_peaking = document.getElementById("fx_4_filter_detune_text_peaking");
const fx_4_filter_detune_peaking = document.getElementById("fx_4_filter_detune_peaking");
const fx_4_filter_detune_value_peaking = document.getElementById("fx_4_filter_detune_value_peaking");
fx_4_filter_detune_peaking.addEventListener("change", function (e) {
  fx_4_filter.detune.value = e.currentTarget.value;
  fx_4_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_detune_peaking", e.currentTarget.value);
});

const fx_4_filter_gain_text_peaking = document.getElementById("fx_4_filter_gain_text_peaking");
const fx_4_filter_gain_peaking = document.getElementById("fx_4_filter_gain_peaking");
const fx_4_filter_gain_value_peaking = document.getElementById("fx_4_filter_gain_value_peaking");
fx_4_filter_gain_peaking.addEventListener("change", function (e) {
  fx_4_filter.gain.value = e.currentTarget.value;
  fx_4_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const fx_4_filter_frequency_allpass = document.getElementById("fx_4_filter_frequency_allpass");
const fx_4_filter_frequency_value_allpass = document.getElementById("fx_4_filter_frequency_value_allpass");
const fx_4_filter_frequency_text_allpass = document.getElementById("fx_4_filter_frequency_text_allpass");
fx_4_filter_frequency_allpass.addEventListener("change", function (e) {
  fx_4_filter.frequency.value = e.currentTarget.value;
  fx_4_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_frequency_value_allpass", e.currentTarget.value);
});

const fx_4_filter_Q_allpass = document.getElementById("fx_4_filter_Q_allpass");
const fx_4_filter_Q_value_allpass = document.getElementById("fx_4_filter_Q_value_allpass");
const fx_4_filter_Q_text_allpass = document.getElementById("fx_4_filter_Q_text_allpass");
fx_4_filter_Q_allpass.addEventListener("change", function (e) {
  fx_4_filter.Q.value = e.currentTarget.value;
  fx_4_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_Q_value_allpass", e.currentTarget.value);
});

const fx_4_filter_detune_allpass = document.getElementById("fx_4_filter_detune_allpass");
const fx_4_filter_detune_value_allpass = document.getElementById("fx_4_filter_detune_value_allpass");
const fx_4_filter_detune_text_allpass = document.getElementById("fx_4_filter_detune_text_allpass");
fx_4_filter_detune_allpass.addEventListener("change", function (e) {
  fx_4_filter.detune.value = e.currentTarget.value;
  fx_4_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_detune_value_allpass", e.currentTarget.value);
});

const fx_4_filter_eq_On_Button = document.getElementById("fx_4_filter_eq_On_Button");

//*************************************************************************************
//*************************************************************************************
//********     channel 1 -4  EQ DIVS    **************************************************************
//*************************************************************************************
//*************************************************************************************
const channel_1_peaking_controls_div = document.getElementById("channel_1_peaking_controls_div");
const channel_1_tascam_424_controls_div = document.getElementById("channel_1_tascam_424_controls_div");
const channel_1_shelf_controls_div = document.getElementById("channel_1_shelf_controls_div");
const channel_1_allpass_controls_div = document.getElementById("channel_1_allpass_controls_div");
const channel_1_eq3_controls_div = document.getElementById("channel_1_eq3_controls_div");
const channel_1_empty_controls_div = document.getElementById("channel_1_empty_controls_div");
const channel_1_bypass_controls_div = document.getElementById("channel_1_bypass_controls_div");

const channel_2_peaking_controls_div = document.getElementById("channel_2_peaking_controls_div");
const channel_2_tascam_424_controls_div = document.getElementById("channel_2_tascam_424_controls_div");
const channel_2_shelf_controls_div = document.getElementById("channel_2_shelf_controls_div");
const channel_2_allpass_controls_div = document.getElementById("channel_2_allpass_controls_div");
const channel_2_eq3_controls_div = document.getElementById("channel_2_eq3_controls_div");
const channel_2_empty_controls_div = document.getElementById("channel_2_empty_controls_div");
const channel_2_bypass_controls_div = document.getElementById("channel_2_bypass_controls_div");

const channel_3_peaking_controls_div = document.getElementById("channel_3_peaking_controls_div");
const channel_3_tascam_424_controls_div = document.getElementById("channel_3_tascam_424_controls_div");
const channel_3_shelf_controls_div = document.getElementById("channel_3_shelf_controls_div");
const channel_3_allpass_controls_div = document.getElementById("channel_3_allpass_controls_div");
const channel_3_eq3_controls_div = document.getElementById("channel_3_eq3_controls_div");
const channel_3_empty_controls_div = document.getElementById("channel_3_empty_controls_div");
const channel_3_bypass_controls_div = document.getElementById("channel_3_bypass_controls_div");

const channel_4_peaking_controls_div = document.getElementById("channel_4_peaking_controls_div");
const channel_4_tascam_424_controls_div = document.getElementById("channel_4_tascam_424_controls_div");
const channel_4_shelf_controls_div = document.getElementById("channel_4_shelf_controls_div");
const channel_4_allpass_controls_div = document.getElementById("channel_4_allpass_controls_div");
const channel_4_eq3_controls_div = document.getElementById("channel_4_eq3_controls_div");
const channel_4_empty_controls_div = document.getElementById("channel_4_empty_controls_div");
const channel_4_bypass_controls_div = document.getElementById("channel_4_bypass_controls_div");

//*************************************************************************************
//*************************************************************************************
//********     CHANNEL 1 FX SEND     **************************************************************
//*************************************************************************************
//*************************************************************************************
const channel_1_fxSend_1_pre_EQ_Button = document.getElementById("channel_1_fxSend_1_pre_EQ_Button");
const channel_1_fxSend_1_post_EQ_Button = document.getElementById("channel_1_fxSend_1_post_EQ_Button");
const channel_1_fxSend_1_post_fader_Button = document.getElementById("channel_1_fxSend_1_post_fader_Button");

const channel_1_fxSend_2_pre_EQ_Button = document.getElementById("channel_1_fxSend_2_pre_EQ_Button");
const channel_1_fxSend_2_post_EQ_Button = document.getElementById("channel_1_fxSend_2_post_EQ_Button");
const channel_1_fxSend_2_post_fader_Button = document.getElementById("channel_1_fxSend_2_post_fader_Button");

const channel_1_fxSend_3_pre_EQ_Button = document.getElementById("channel_1_fxSend_3_pre_EQ_Button");
const channel_1_fxSend_3_post_EQ_Button = document.getElementById("channel_1_fxSend_3_post_EQ_Button");
const channel_1_fxSend_3_post_fader_Button = document.getElementById("channel_1_fxSend_3_post_fader_Button");

const channel_1_fxSend_4_pre_EQ_Button = document.getElementById("channel_1_fxSend_4_pre_EQ_Button");
const channel_1_fxSend_4_post_EQ_Button = document.getElementById("channel_1_fxSend_4_post_EQ_Button");
const channel_1_fxSend_4_post_fader_Button = document.getElementById("channel_1_fxSend_4_post_fader_Button");

const channel_1_fxSend_1_value = document.getElementById("channel_1_fxSend_1_value");
const channel_1_fxSend_2_value = document.getElementById("channel_1_fxSend_2_value");
const channel_1_fxSend_3_value = document.getElementById("channel_1_fxSend_3_value");
const channel_1_fxSend_4_value = document.getElementById("channel_1_fxSend_4_value");

const channel_1_fxSend_1_text = document.getElementById("channel_1_fxSend_1_text");
const channel_1_fxSend_2_text = document.getElementById("channel_1_fxSend_2_text");
const channel_1_fxSend_3_text = document.getElementById("channel_1_fxSend_3_text");
const channel_1_fxSend_4_text = document.getElementById("channel_1_fxSend_4_text");

const channel_1_fxSend_1 = document.getElementById("channel_1_fxSend_1");
channel_1_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_fxSend_1_preEq_volNode.volume.value = -100;
    channel_1_fxSend_1_postEq_volNode.volume.value = -100;
    channel_1_fxSend_1_postFdr_volNode.volume.value = -100;
    channel_1_fxSend_1_value.innerHTML = -100;
    channel_1_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_1", -100);
  }
  else {
    const nombre = "channel_1_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_1_fxSend_2 = document.getElementById("channel_1_fxSend_2");
channel_1_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_fxSend_2_preEq_volNode.volume.value = -100;
    channel_1_fxSend_2_postEq_volNode.volume.value = -100;
    channel_1_fxSend_2_postFdr_volNode.volume.value = -100;
    channel_1_fxSend_2_value.innerHTML = -100;
    channel_1_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_2", -100);
  }
  else {
    const nombre = "channel_1_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_1_fxSend_3 = document.getElementById("channel_1_fxSend_3");
channel_1_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_fxSend_3_preEq_volNode.volume.value = -100;
    channel_1_fxSend_3_postEq_volNode.volume.value = -100;
    channel_1_fxSend_3_postFdr_volNode.volume.value = -100;
    channel_1_fxSend_3_value.innerHTML = -100;
    channel_1_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_3", -100);
  }
  else {
    const nombre = "channel_1_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_1_fxSend_4 = document.getElementById("channel_1_fxSend_4");
channel_1_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_fxSend_4_preEq_volNode.volume.value = -100;
    channel_1_fxSend_4_postEq_volNode.volume.value = -100;
    channel_1_fxSend_4_postFdr_volNode.volume.value = -100;
    channel_1_fxSend_4_value.innerHTML = -100;
    channel_1_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_4", -100);
  }
  else {
    const nombre = "channel_1_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//*********************************************** */
//CHANNEL 2

const channel_2_fxSend_1_pre_EQ_Button = document.getElementById("channel_2_fxSend_1_pre_EQ_Button");
const channel_2_fxSend_1_post_EQ_Button = document.getElementById("channel_2_fxSend_1_post_EQ_Button");
const channel_2_fxSend_1_post_fader_Button = document.getElementById("channel_2_fxSend_1_post_fader_Button");

const channel_2_fxSend_2_pre_EQ_Button = document.getElementById("channel_2_fxSend_2_pre_EQ_Button");
const channel_2_fxSend_2_post_EQ_Button = document.getElementById("channel_2_fxSend_2_post_EQ_Button");
const channel_2_fxSend_2_post_fader_Button = document.getElementById("channel_2_fxSend_2_post_fader_Button");

const channel_2_fxSend_3_pre_EQ_Button = document.getElementById("channel_2_fxSend_3_pre_EQ_Button");
const channel_2_fxSend_3_post_EQ_Button = document.getElementById("channel_2_fxSend_3_post_EQ_Button");
const channel_2_fxSend_3_post_fader_Button = document.getElementById("channel_2_fxSend_3_post_fader_Button");

const channel_2_fxSend_4_pre_EQ_Button = document.getElementById("channel_2_fxSend_4_pre_EQ_Button");
const channel_2_fxSend_4_post_EQ_Button = document.getElementById("channel_2_fxSend_4_post_EQ_Button");
const channel_2_fxSend_4_post_fader_Button = document.getElementById("channel_2_fxSend_4_post_fader_Button");

const channel_2_fxSend_1_value = document.getElementById("channel_2_fxSend_1_value");
const channel_2_fxSend_2_value = document.getElementById("channel_2_fxSend_2_value");
const channel_2_fxSend_3_value = document.getElementById("channel_2_fxSend_3_value");
const channel_2_fxSend_4_value = document.getElementById("channel_2_fxSend_4_value");

const channel_2_fxSend_1_text = document.getElementById("channel_2_fxSend_1_text");
const channel_2_fxSend_2_text = document.getElementById("channel_2_fxSend_2_text");
const channel_2_fxSend_3_text = document.getElementById("channel_2_fxSend_3_text");
const channel_2_fxSend_4_text = document.getElementById("channel_2_fxSend_4_text");

const channel_2_fxSend_1 = document.getElementById("channel_2_fxSend_1");
channel_2_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_fxSend_1_preEq_volNode.volume.value = -100;
    channel_2_fxSend_1_postEq_volNode.volume.value = -100;
    channel_2_fxSend_1_postFdr_volNode.volume.value = -100;
    channel_2_fxSend_1_value.innerHTML = -100;
    channel_2_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_1", -100);
  }
  else {
    const nombre = "channel_2_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_2_fxSend_2 = document.getElementById("channel_2_fxSend_2");
channel_2_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_fxSend_2_preEq_volNode.volume.value = -100;
    channel_2_fxSend_2_postEq_volNode.volume.value = -100;
    channel_2_fxSend_2_postFdr_volNode.volume.value = -100;
    channel_2_fxSend_2_value.innerHTML = -100;
    channel_2_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_2", -100);
  }
  else {
    const nombre = "channel_2_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_2_fxSend_3 = document.getElementById("channel_2_fxSend_3");
channel_2_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_fxSend_3_preEq_volNode.volume.value = -100;
    channel_2_fxSend_3_postEq_volNode.volume.value = -100;
    channel_2_fxSend_3_postFdr_volNode.volume.value = -100;
    channel_2_fxSend_3_value.innerHTML = -100;
    channel_2_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_3", -100);
  }
  else {
    const nombre = "channel_2_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_2_fxSend_4 = document.getElementById("channel_2_fxSend_4");
channel_2_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_fxSend_4_preEq_volNode.volume.value = -100;
    channel_2_fxSend_4_postEq_volNode.volume.value = -100;
    channel_2_fxSend_4_postFdr_volNode.volume.value = -100;
    channel_2_fxSend_4_value.innerHTML = -100;
    channel_2_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_4", -100);
  }
  else {
    const nombre = "channel_2_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//************************************
//************************************
// CHANNEL 3

const channel_3_fxSend_1_pre_EQ_Button = document.getElementById("channel_3_fxSend_1_pre_EQ_Button");
const channel_3_fxSend_1_post_EQ_Button = document.getElementById("channel_3_fxSend_1_post_EQ_Button");
const channel_3_fxSend_1_post_fader_Button = document.getElementById("channel_3_fxSend_1_post_fader_Button");

const channel_3_fxSend_2_pre_EQ_Button = document.getElementById("channel_3_fxSend_2_pre_EQ_Button");
const channel_3_fxSend_2_post_EQ_Button = document.getElementById("channel_3_fxSend_2_post_EQ_Button");
const channel_3_fxSend_2_post_fader_Button = document.getElementById("channel_3_fxSend_2_post_fader_Button");

const channel_3_fxSend_3_pre_EQ_Button = document.getElementById("channel_3_fxSend_3_pre_EQ_Button");
const channel_3_fxSend_3_post_EQ_Button = document.getElementById("channel_3_fxSend_3_post_EQ_Button");
const channel_3_fxSend_3_post_fader_Button = document.getElementById("channel_3_fxSend_3_post_fader_Button");

const channel_3_fxSend_4_pre_EQ_Button = document.getElementById("channel_3_fxSend_4_pre_EQ_Button");
const channel_3_fxSend_4_post_EQ_Button = document.getElementById("channel_3_fxSend_4_post_EQ_Button");
const channel_3_fxSend_4_post_fader_Button = document.getElementById("channel_3_fxSend_4_post_fader_Button");

const channel_3_fxSend_1_value = document.getElementById("channel_3_fxSend_1_value");
const channel_3_fxSend_2_value = document.getElementById("channel_3_fxSend_2_value");
const channel_3_fxSend_3_value = document.getElementById("channel_3_fxSend_3_value");
const channel_3_fxSend_4_value = document.getElementById("channel_3_fxSend_4_value");

const channel_3_fxSend_1_text = document.getElementById("channel_3_fxSend_1_text");
const channel_3_fxSend_2_text = document.getElementById("channel_3_fxSend_2_text");
const channel_3_fxSend_3_text = document.getElementById("channel_3_fxSend_3_text");
const channel_3_fxSend_4_text = document.getElementById("channel_3_fxSend_4_text");

const channel_3_fxSend_1 = document.getElementById("channel_3_fxSend_1");
channel_3_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_fxSend_1_preEq_volNode.volume.value = -100;
    channel_3_fxSend_1_postEq_volNode.volume.value = -100;
    channel_3_fxSend_1_postFdr_volNode.volume.value = -100;
    channel_3_fxSend_1_value.innerHTML = -100;
    channel_3_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_1", -100);
  }
  else {
    const nombre = "channel_3_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_3_fxSend_2 = document.getElementById("channel_3_fxSend_2");
channel_3_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_fxSend_2_preEq_volNode.volume.value = -100;
    channel_3_fxSend_2_postEq_volNode.volume.value = -100;
    channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
    channel_3_fxSend_2_value.innerHTML = -100;
    channel_3_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_2", -100);
  }
  else {
    const nombre = "channel_3_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_3_fxSend_3 = document.getElementById("channel_3_fxSend_3");
channel_3_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_fxSend_3_preEq_volNode.volume.value = -100;
    channel_3_fxSend_3_postEq_volNode.volume.value = -100;
    channel_3_fxSend_3_postFdr_volNode.volume.value = -100;
    channel_3_fxSend_3_value.innerHTML = -100;
    channel_3_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_3", -100);
  }
  else {
    const nombre = "channel_3_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_3_fxSend_4 = document.getElementById("channel_3_fxSend_4");
channel_3_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_fxSend_4_preEq_volNode.volume.value = -100;
    channel_3_fxSend_4_postEq_volNode.volume.value = -100;
    channel_3_fxSend_4_postFdr_volNode.volume.value = -100;
    channel_3_fxSend_4_value.innerHTML = -100;
    channel_3_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_4", -100);
  }
  else {
    const nombre = "channel_3_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//**********************************************
//**********************************************
//CHANNEL 4
const channel_4_fxSend_1_pre_EQ_Button = document.getElementById("channel_4_fxSend_1_pre_EQ_Button");
const channel_4_fxSend_1_post_EQ_Button = document.getElementById("channel_4_fxSend_1_post_EQ_Button");
const channel_4_fxSend_1_post_fader_Button = document.getElementById("channel_4_fxSend_1_post_fader_Button");

const channel_4_fxSend_2_pre_EQ_Button = document.getElementById("channel_4_fxSend_2_pre_EQ_Button");
const channel_4_fxSend_2_post_EQ_Button = document.getElementById("channel_4_fxSend_2_post_EQ_Button");
const channel_4_fxSend_2_post_fader_Button = document.getElementById("channel_4_fxSend_2_post_fader_Button");

const channel_4_fxSend_3_pre_EQ_Button = document.getElementById("channel_4_fxSend_3_pre_EQ_Button");
const channel_4_fxSend_3_post_EQ_Button = document.getElementById("channel_4_fxSend_3_post_EQ_Button");
const channel_4_fxSend_3_post_fader_Button = document.getElementById("channel_4_fxSend_3_post_fader_Button");

const channel_4_fxSend_4_pre_EQ_Button = document.getElementById("channel_4_fxSend_4_pre_EQ_Button");
const channel_4_fxSend_4_post_EQ_Button = document.getElementById("channel_4_fxSend_4_post_EQ_Button");
const channel_4_fxSend_4_post_fader_Button = document.getElementById("channel_4_fxSend_4_post_fader_Button");

const channel_4_fxSend_1_value = document.getElementById("channel_4_fxSend_1_value");
const channel_4_fxSend_2_value = document.getElementById("channel_4_fxSend_2_value");
const channel_4_fxSend_3_value = document.getElementById("channel_4_fxSend_3_value");
const channel_4_fxSend_4_value = document.getElementById("channel_4_fxSend_4_value");

const channel_4_fxSend_1_text = document.getElementById("channel_4_fxSend_1_text");
const channel_4_fxSend_2_text = document.getElementById("channel_4_fxSend_2_text");
const channel_4_fxSend_3_text = document.getElementById("channel_4_fxSend_3_text");
const channel_4_fxSend_4_text = document.getElementById("channel_4_fxSend_4_text");

const channel_4_fxSend_1 = document.getElementById("channel_4_fxSend_1");
channel_4_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_fxSend_1_preEq_volNode.volume.value = -100;
    channel_4_fxSend_1_postEq_volNode.volume.value = -100;
    channel_4_fxSend_1_postFdr_volNode.volume.value = -100;
    channel_4_fxSend_1_value.innerHTML = -100;
    channel_4_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_1", -100);
  }
  else {
    const nombre = "channel_4_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_4_fxSend_2 = document.getElementById("channel_4_fxSend_2");
channel_4_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_fxSend_2_preEq_volNode.volume.value = -100;
    channel_4_fxSend_2_postEq_volNode.volume.value = -100;
    channel_4_fxSend_2_postFdr_volNode.volume.value = -100;
    channel_4_fxSend_2_value.innerHTML = -100;
    channel_4_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_2", -100);
  }
  else {
    const nombre = "channel_4_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_4_fxSend_3 = document.getElementById("channel_4_fxSend_3");
channel_4_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_fxSend_3_preEq_volNode.volume.value = -100;
    channel_4_fxSend_3_postEq_volNode.volume.value = -100;
    channel_4_fxSend_3_postFdr_volNode.volume.value = -100;
    channel_4_fxSend_3_value.innerHTML = -100;
    channel_4_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_3", -100);
  }
  else {
    const nombre = "channel_4_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const channel_4_fxSend_4 = document.getElementById("channel_4_fxSend_4");
channel_4_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_fxSend_4_preEq_volNode.volume.value = -100;
    channel_4_fxSend_4_postEq_volNode.volume.value = -100;
    channel_4_fxSend_4_postFdr_volNode.volume.value = -100;
    channel_4_fxSend_4_value.innerHTML = -100;
    channel_4_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_4", -100);
  }
  else {
    const nombre = "channel_4_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//****************************************
//FX 1 FX SEND 

const fx_1_fxSend_1_pre_EQ_Button = document.getElementById("fx_1_fxSend_1_pre_EQ_Button");
const fx_1_fxSend_1_post_EQ_Button = document.getElementById("fx_1_fxSend_1_post_EQ_Button");
const fx_1_fxSend_1_post_fader_Button = document.getElementById("fx_1_fxSend_1_post_fader_Button");

const fx_1_fxSend_2_pre_EQ_Button = document.getElementById("fx_1_fxSend_2_pre_EQ_Button");
const fx_1_fxSend_2_post_EQ_Button = document.getElementById("fx_1_fxSend_2_post_EQ_Button");
const fx_1_fxSend_2_post_fader_Button = document.getElementById("fx_1_fxSend_2_post_fader_Button");

const fx_1_fxSend_3_pre_EQ_Button = document.getElementById("fx_1_fxSend_3_pre_EQ_Button");
const fx_1_fxSend_3_post_EQ_Button = document.getElementById("fx_1_fxSend_3_post_EQ_Button");
const fx_1_fxSend_3_post_fader_Button = document.getElementById("fx_1_fxSend_3_post_fader_Button");

const fx_1_fxSend_4_pre_EQ_Button = document.getElementById("fx_1_fxSend_4_pre_EQ_Button");
const fx_1_fxSend_4_post_EQ_Button = document.getElementById("fx_1_fxSend_4_post_EQ_Button");
const fx_1_fxSend_4_post_fader_Button = document.getElementById("fx_1_fxSend_4_post_fader_Button");

const fx_1_fxSend_1 = document.getElementById("fx_1_fxSend_1");
const fx_1_fxSend_1_value = document.getElementById("fx_1_fxSend_1_value");


const fx_1_fxSend_2 = document.getElementById("fx_1_fxSend_2");
const fx_1_fxSend_2_value = document.getElementById("fx_1_fxSend_2_value");
fx_1_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_fxSend_2_preEq_volNode.volume.value = -100;
    fx_1_fxSend_2_postEq_volNode.volume.value = -100;
    fx_1_fxSend_2_postFdr_volNode.volume.value = -100;
    fx_1_fxSend_2_value.innerHTML = -100;
    fx_1_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_2", -100);
  }
  else {
    const nombre = "fx_1_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_1_fxSend_3 = document.getElementById("fx_1_fxSend_3");
const fx_1_fxSend_3_value = document.getElementById("fx_1_fxSend_3_value");
fx_1_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_fxSend_3_preEq_volNode.volume.value = -100;
    fx_1_fxSend_3_postEq_volNode.volume.value = -100;
    fx_1_fxSend_3_postFdr_volNode.volume.value = -100;
    fx_1_fxSend_3_value.innerHTML = -100;
    fx_1_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_3", -100);
  }
  else {
    const nombre = "fx_1_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_1_fxSend_4 = document.getElementById("fx_1_fxSend_4");
const fx_1_fxSend_4_value = document.getElementById("fx_1_fxSend_4_value");
fx_1_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_fxSend_4_preEq_volNode.volume.value = -100;
    fx_1_fxSend_4_postEq_volNode.volume.value = -100;
    fx_1_fxSend_4_postFdr_volNode.volume.value = -100;
    fx_1_fxSend_4_value.innerHTML = -100;
    fx_1_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_4", -100);
  }
  else {
    const nombre = "fx_1_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//****************************************
//FX 2 FX SEND 

const fx_2_fxSend_1_pre_EQ_Button = document.getElementById("fx_2_fxSend_1_pre_EQ_Button");
const fx_2_fxSend_1_post_EQ_Button = document.getElementById("fx_2_fxSend_1_post_EQ_Button");
const fx_2_fxSend_1_post_fader_Button = document.getElementById("fx_2_fxSend_1_post_fader_Button");

const fx_2_fxSend_2_pre_EQ_Button = document.getElementById("fx_2_fxSend_2_pre_EQ_Button");
const fx_2_fxSend_2_post_EQ_Button = document.getElementById("fx_2_fxSend_2_post_EQ_Button");
const fx_2_fxSend_2_post_fader_Button = document.getElementById("fx_2_fxSend_2_post_fader_Button");

const fx_2_fxSend_3_pre_EQ_Button = document.getElementById("fx_2_fxSend_3_pre_EQ_Button");
const fx_2_fxSend_3_post_EQ_Button = document.getElementById("fx_2_fxSend_3_post_EQ_Button");
const fx_2_fxSend_3_post_fader_Button = document.getElementById("fx_2_fxSend_3_post_fader_Button");

const fx_2_fxSend_4_pre_EQ_Button = document.getElementById("fx_2_fxSend_4_pre_EQ_Button");
const fx_2_fxSend_4_post_EQ_Button = document.getElementById("fx_2_fxSend_4_post_EQ_Button");
const fx_2_fxSend_4_post_fader_Button = document.getElementById("fx_2_fxSend_4_post_fader_Button");

const fx_2_fxSend_1_value = document.getElementById("fx_2_fxSend_1_value");
const fx_2_fxSend_1 = document.getElementById("fx_2_fxSend_1");

fx_2_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_fxSend_1_preEq_volNode.volume.value = -100;
    fx_2_fxSend_1_postEq_volNode.volume.value = -100;
    fx_2_fxSend_1_postFdr_volNode.volume.value = -100;
    fx_2_fxSend_1_value.innerHTML = -100;
    fx_2_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_1", -100);
  }
  else {
    const nombre = "fx_2_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_2_fxSend_2 = document.getElementById("fx_2_fxSend_2");
const fx_2_fxSend_2_value = document.getElementById("fx_2_fxSend_2_value");
fx_2_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_fxSend_2_preEq_volNode.volume.value = -100;
    fx_2_fxSend_2_postEq_volNode.volume.value = -100;
    fx_2_fxSend_2_postFdr_volNode.volume.value = -100;
    fx_2_fxSend_2_value.innerHTML = -100;
    fx_2_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_2", -100);
  }
  else {
    const nombre = "fx_2_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_2_fxSend_3 = document.getElementById("fx_2_fxSend_3");
const fx_2_fxSend_3_value = document.getElementById("fx_2_fxSend_3_value");
fx_2_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_fxSend_3_preEq_volNode.volume.value = -100;
    fx_2_fxSend_3_postEq_volNode.volume.value = -100;
    fx_2_fxSend_3_postFdr_volNode.volume.value = -100;
    fx_2_fxSend_3_value.innerHTML = -100;
    fx_2_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_3", -100);
  }
  else {
    const nombre = "fx_2_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_2_fxSend_4 = document.getElementById("fx_2_fxSend_4");
const fx_2_fxSend_4_value = document.getElementById("fx_2_fxSend_4_value");
fx_2_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_fxSend_4_preEq_volNode.volume.value = -100;
    fx_2_fxSend_4_postEq_volNode.volume.value = -100;
    fx_2_fxSend_4_postFdr_volNode.volume.value = -100;
    fx_2_fxSend_4_value.innerHTML = -100;
    fx_2_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_4", -100);
  }
  else {
    const nombre = "fx_2_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});


//****************************************
//FX 3 FX SEND 

const fx_3_fxSend_1_pre_EQ_Button = document.getElementById("fx_3_fxSend_1_pre_EQ_Button");
const fx_3_fxSend_1_post_EQ_Button = document.getElementById("fx_3_fxSend_1_post_EQ_Button");
const fx_3_fxSend_1_post_fader_Button = document.getElementById("fx_3_fxSend_1_post_fader_Button");

const fx_3_fxSend_2_pre_EQ_Button = document.getElementById("fx_3_fxSend_2_pre_EQ_Button");
const fx_3_fxSend_2_post_EQ_Button = document.getElementById("fx_3_fxSend_2_post_EQ_Button");
const fx_3_fxSend_2_post_fader_Button = document.getElementById("fx_3_fxSend_2_post_fader_Button");

const fx_3_fxSend_3_pre_EQ_Button = document.getElementById("fx_3_fxSend_3_pre_EQ_Button");
const fx_3_fxSend_3_post_EQ_Button = document.getElementById("fx_3_fxSend_3_post_EQ_Button");
const fx_3_fxSend_3_post_fader_Button = document.getElementById("fx_3_fxSend_3_post_fader_Button");

const fx_3_fxSend_4_pre_EQ_Button = document.getElementById("fx_3_fxSend_4_pre_EQ_Button");
const fx_3_fxSend_4_post_EQ_Button = document.getElementById("fx_3_fxSend_4_post_EQ_Button");
const fx_3_fxSend_4_post_fader_Button = document.getElementById("fx_3_fxSend_4_post_fader_Button");

const fx_3_fxSend_1 = document.getElementById("fx_3_fxSend_1");
const fx_3_fxSend_1_value = document.getElementById("fx_3_fxSend_1_value");

fx_3_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_fxSend_1_preEq_volNode.volume.value = -100;
    fx_3_fxSend_1_postEq_volNode.volume.value = -100;
    fx_3_fxSend_1_postFdr_volNode.volume.value = -100;
    fx_3_fxSend_1_value.innerHTML = -100;
    fx_3_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_1", -100);
  }
  else {
    const nombre = "fx_3_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_3_fxSend_2 = document.getElementById("fx_3_fxSend_2");
const fx_3_fxSend_2_value = document.getElementById("fx_3_fxSend_2_value");
fx_3_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_fxSend_2_preEq_volNode.volume.value = -100;
    fx_3_fxSend_2_postEq_volNode.volume.value = -100;
    fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
    fx_3_fxSend_2_value.innerHTML = -100;
    fx_3_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_2", -100);
  }
  else {
    const nombre = "fx_3_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_3_fxSend_3 = document.getElementById("fx_3_fxSend_3");
const fx_3_fxSend_3_value = document.getElementById("fx_3_fxSend_3_value");
fx_3_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_fxSend_3_preEq_volNode.volume.value = -100;
    fx_3_fxSend_3_postEq_volNode.volume.value = -100;
    fx_3_fxSend_3_postFdr_volNode.volume.value = -100;
    fx_3_fxSend_3_value.innerHTML = -100;
    fx_3_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_3", -100);
  }
  else {
    const nombre = "fx_3_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_3_fxSend_4 = document.getElementById("fx_3_fxSend_4");
const fx_3_fxSend_4_value = document.getElementById("fx_3_fxSend_4_value");
fx_3_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_fxSend_4_preEq_volNode.volume.value = -100;
    fx_3_fxSend_4_postEq_volNode.volume.value = -100;
    fx_3_fxSend_4_postFdr_volNode.volume.value = -100;
    fx_3_fxSend_4_value.innerHTML = -100;
    fx_3_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_4", -100);
  }
  else {
    const nombre = "fx_3_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//****************************************
//FX 4 FX SEND 

const fx_4_fxSend_1_pre_EQ_Button = document.getElementById("fx_4_fxSend_1_pre_EQ_Button");
const fx_4_fxSend_1_post_EQ_Button = document.getElementById("fx_4_fxSend_1_post_EQ_Button");
const fx_4_fxSend_1_post_fader_Button = document.getElementById("fx_4_fxSend_1_post_fader_Button");

const fx_4_fxSend_2_pre_EQ_Button = document.getElementById("fx_4_fxSend_2_pre_EQ_Button");
const fx_4_fxSend_2_post_EQ_Button = document.getElementById("fx_4_fxSend_2_post_EQ_Button");
const fx_4_fxSend_2_post_fader_Button = document.getElementById("fx_4_fxSend_2_post_fader_Button");

const fx_4_fxSend_3_pre_EQ_Button = document.getElementById("fx_4_fxSend_3_pre_EQ_Button");
const fx_4_fxSend_3_post_EQ_Button = document.getElementById("fx_4_fxSend_3_post_EQ_Button");
const fx_4_fxSend_3_post_fader_Button = document.getElementById("fx_4_fxSend_3_post_fader_Button");

const fx_4_fxSend_4_pre_EQ_Button = document.getElementById("fx_4_fxSend_4_pre_EQ_Button");
const fx_4_fxSend_4_post_EQ_Button = document.getElementById("fx_4_fxSend_4_post_EQ_Button");
const fx_4_fxSend_4_post_fader_Button = document.getElementById("fx_4_fxSend_4_post_fader_Button");

const fx_4_fxSend_1 = document.getElementById("fx_4_fxSend_1");
const fx_4_fxSend_1_value = document.getElementById("fx_4_fxSend_1_value");
fx_4_fxSend_1.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_fxSend_1_preEq_volNode.volume.value = -100;
    fx_4_fxSend_1_postEq_volNode.volume.value = -100;
    fx_4_fxSend_1_postFdr_volNode.volume.value = -100;
    fx_4_fxSend_1_value.innerHTML = -100;
    fx_4_fxSend_1.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_1", -100);
  }
  else {
    const nombre = "fx_4_fxSend_1";
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_1", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_4_fxSend_2 = document.getElementById("fx_4_fxSend_2");
const fx_4_fxSend_2_value = document.getElementById("fx_4_fxSend_2_value");
fx_4_fxSend_2.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_fxSend_2_preEq_volNode.volume.value = -100;
    fx_4_fxSend_2_postEq_volNode.volume.value = -100;
    fx_4_fxSend_2_postFdr_volNode.volume.value = -100;
    fx_4_fxSend_2_value.innerHTML = -100;
    fx_4_fxSend_2.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_2", -100);
  }
  else {
    const nombre = "fx_4_fxSend_2";
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_2", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_4_fxSend_3 = document.getElementById("fx_4_fxSend_3");
const fx_4_fxSend_3_value = document.getElementById("fx_4_fxSend_3_value");
fx_4_fxSend_3.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_fxSend_3_preEq_volNode.volume.value = -100;
    fx_4_fxSend_3_postEq_volNode.volume.value = -100;
    fx_4_fxSend_3_postFdr_volNode.volume.value = -100;
    fx_4_fxSend_3_value.innerHTML = -100;
    fx_4_fxSend_3.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_3", -100);
  }
  else {
    const nombre = "fx_4_fxSend_3";
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_3", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

const fx_4_fxSend_4 = document.getElementById("fx_4_fxSend_4");
const fx_4_fxSend_4_value = document.getElementById("fx_4_fxSend_4_value");
fx_4_fxSend_4.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_fxSend_4_preEq_volNode.volume.value = -100;
    fx_4_fxSend_4_postEq_volNode.volume.value = -100;
    fx_4_fxSend_4_postFdr_volNode.volume.value = -100;
    fx_4_fxSend_4_value.innerHTML = -100;
    fx_4_fxSend_4.value = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_4", -100);
  }
  else {
    const nombre = "fx_4_fxSend_4";
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_4", e.currentTarget.value);
    recieves_player_x_fxSend_x_value_Sets_Volume_value(e.currentTarget.value, nombre);
  }
});

//*************************************************************************************
//*************************************************************************************
//********     CHANNEL 1 - 4 RMS METERS     **************************************************************
//*************************************************************************************
//*************************************************************************************
const channel_1_rms_meter_inner = document.getElementById("channel_1_rms_meter_inner");
const channel_1_filter_bypass_meter_inner = document.getElementById("channel_1_filter_bypass_meter_inner");
const channel_1_filter_allpass_meter_inner = document.getElementById("channel_1_filter_allpass_meter_inner");
const channel_1_shelf_meter_inner = document.getElementById("channel_1_shelf_meter_inner");
const channel_1_peaking_meter_inner = document.getElementById("channel_1_peaking_meter_inner");
const channel_1_tascam_424_Hi_meter_inner = document.getElementById("channel_1_tascam_424_Hi_meter_inner");
const channel_1_tascam_424_Mid_meter_inner = document.getElementById("channel_1_tascam_424_Mid_meter_inner");
const channel_1_tascam_424_Low_meter_inner = document.getElementById("channel_1_tascam_424_Low_meter_inner");
const channel_1_eq3_meter_inner = document.getElementById("channel_1_eq3_meter_inner");
const channel_1_filter_meter_inner = document.getElementById("channel_1_filter_meter_inner");
const channel_1_rms_comp_bypass_meter_inner = document.getElementById("channel_1_rms_comp_bypass_meter_inner");
const channel_1_rms_comp_meter_inner = document.getElementById("channel_1_rms_comp_meter_inner");
const channel_1_rms_gate_bypass_meter_inner = document.getElementById("channel_1_rms_gate_bypass_meter_inner");
const channel_1_rms_gate_meter_inner = document.getElementById("channel_1_rms_gate_meter_inner");
const channel_1_rms_limiter_bypass_meter_inner = document.getElementById("channel_1_rms_limiter_bypass_meter_inner");
const channel_1_rms_limiter_meter_inner = document.getElementById("channel_1_rms_limiter_meter_inner");

//**********************************
//CHANNEL 2

const channel_2_rms_meter_inner = document.getElementById("channel_2_rms_meter_inner");
const channel_2_filter_bypass_meter_inner = document.getElementById("channel_2_filter_bypass_meter_inner");
const channel_2_filter_allpass_meter_inner = document.getElementById("channel_2_filter_allpass_meter_inner");
const channel_2_shelf_meter_inner = document.getElementById("channel_2_shelf_meter_inner");
const channel_2_peaking_meter_inner = document.getElementById("channel_2_peaking_meter_inner");
const channel_2_tascam_424_Hi_meter_inner = document.getElementById("channel_2_tascam_424_Hi_meter_inner");
const channel_2_tascam_424_Mid_meter_inner = document.getElementById("channel_2_tascam_424_Mid_meter_inner");
const channel_2_tascam_424_Low_meter_inner = document.getElementById("channel_2_tascam_424_Low_meter_inner");
const channel_2_eq3_meter_inner = document.getElementById("channel_2_eq3_meter_inner");
const channel_2_filter_meter_inner = document.getElementById("channel_2_filter_meter_inner");
const channel_2_rms_comp_bypass_meter_inner = document.getElementById("channel_2_rms_comp_bypass_meter_inner");
const channel_2_rms_comp_meter_inner = document.getElementById("channel_2_rms_comp_meter_inner");
const channel_2_rms_gate_bypass_meter_inner = document.getElementById("channel_2_rms_gate_bypass_meter_inner");
const channel_2_rms_gate_meter_inner = document.getElementById("channel_2_rms_gate_meter_inner");
const channel_2_rms_limiter_bypass_meter_inner = document.getElementById("channel_2_rms_limiter_bypass_meter_inner");
const channel_2_rms_limiter_meter_inner = document.getElementById("channel_2_rms_limiter_meter_inner");

//**********************************
//CHANNEL 3

const channel_3_rms_meter_inner = document.getElementById("channel_3_rms_meter_inner");
const channel_3_filter_bypass_meter_inner = document.getElementById("channel_3_filter_bypass_meter_inner");
const channel_3_filter_allpass_meter_inner = document.getElementById("channel_3_filter_allpass_meter_inner");
const channel_3_shelf_meter_inner = document.getElementById("channel_3_shelf_meter_inner");
const channel_3_peaking_meter_inner = document.getElementById("channel_3_peaking_meter_inner");
const channel_3_tascam_424_Hi_meter_inner = document.getElementById("channel_3_tascam_424_Hi_meter_inner");
const channel_3_tascam_424_Mid_meter_inner = document.getElementById("channel_3_tascam_424_Mid_meter_inner");
const channel_3_tascam_424_Low_meter_inner = document.getElementById("channel_3_tascam_424_Low_meter_inner");
const channel_3_eq3_meter_inner = document.getElementById("channel_3_eq3_meter_inner");
const channel_3_filter_meter_inner = document.getElementById("channel_3_filter_meter_inner");
const channel_3_rms_comp_bypass_meter_inner = document.getElementById("channel_3_rms_comp_bypass_meter_inner");
const channel_3_rms_comp_meter_inner = document.getElementById("channel_3_rms_comp_meter_inner");
const channel_3_rms_gate_bypass_meter_inner = document.getElementById("channel_3_rms_gate_bypass_meter_inner");
const channel_3_rms_gate_meter_inner = document.getElementById("channel_3_rms_gate_meter_inner");
const channel_3_rms_limiter_bypass_meter_inner = document.getElementById("channel_3_rms_limiter_bypass_meter_inner");
const channel_3_rms_limiter_meter_inner = document.getElementById("channel_3_rms_limiter_meter_inner");

//**********************************
//CHANNEL 4

const channel_4_rms_meter_inner = document.getElementById("channel_4_rms_meter_inner");
const channel_4_filter_bypass_meter_inner = document.getElementById("channel_4_filter_bypass_meter_inner");
const channel_4_filter_allpass_meter_inner = document.getElementById("channel_4_filter_allpass_meter_inner");
const channel_4_shelf_meter_inner = document.getElementById("channel_4_shelf_meter_inner");
const channel_4_peaking_meter_inner = document.getElementById("channel_4_peaking_meter_inner");
const channel_4_tascam_424_Hi_meter_inner = document.getElementById("channel_4_tascam_424_Hi_meter_inner");
const channel_4_tascam_424_Mid_meter_inner = document.getElementById("channel_4_tascam_424_Mid_meter_inner");
const channel_4_tascam_424_Low_meter_inner = document.getElementById("channel_4_tascam_424_Low_meter_inner");
const channel_4_eq3_meter_inner = document.getElementById("channel_4_eq3_meter_inner");
const channel_4_filter_meter_inner = document.getElementById("channel_4_filter_meter_inner");
const channel_4_rms_comp_bypass_meter_inner = document.getElementById("channel_4_rms_comp_bypass_meter_inner");
const channel_4_rms_comp_meter_inner = document.getElementById("channel_4_rms_comp_meter_inner");
const channel_4_rms_gate_bypass_meter_inner = document.getElementById("channel_4_rms_gate_bypass_meter_inner");
const channel_4_rms_gate_meter_inner = document.getElementById("channel_4_rms_gate_meter_inner");
const channel_4_rms_limiter_bypass_meter_inner = document.getElementById("channel_4_rms_limiter_bypass_meter_inner");
const channel_4_rms_limiter_meter_inner = document.getElementById("channel_4_rms_limiter_meter_inner");
//**************************************
//FX 1 -4

const fx_1_rms_meter_inner = document.getElementById("fx_1_rms_meter_inner");
const fx_2_rms_meter_inner = document.getElementById("fx_2_rms_meter_inner");
const fx_3_rms_meter_inner = document.getElementById("fx_3_rms_meter_inner");
const fx_4_rms_meter_inner = document.getElementById("fx_4_rms_meter_inner");


//*********************************************************************************************** */
//*********************************************************************************************** */
//*********     CHANNEL 1  COMPRESSOR       *************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
const channel_1_compressor_On_Off_Button = document.getElementById("channel_1_compressor_On_Off_Button");
const channel_1_dynamics_reduction_text = document.getElementById("channel_1_dynamics_reduction_text");
const channel_1_dynamics_reduction_value = document.getElementById("channel_1_dynamics_reduction_value");
const channel_1_dynamics_compressor_div = document.getElementById("channel_1_dynamics_compressor_div");

const channel_1_dynamics_ratio = document.getElementById("channel_1_dynamics_ratio");
const channel_1_dynamics_ratio_value = document.getElementById("channel_1_dynamics_ratio_value");
channel_1_dynamics_ratio.addEventListener("change", function (e) {
  channel_1_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  channel_1_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_1_dynamics_reduction_value.innerHTML = channel_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_dynamics_ratio", e.currentTarget.value);
});

const channel_1_dynamics_threshold = document.getElementById("channel_1_dynamics_threshold");
const channel_1_dynamics_threshold_value = document.getElementById("channel_1_dynamics_threshold_value");
channel_1_dynamics_threshold.addEventListener("change", function (e) {
  channel_1_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  channel_1_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_1_dynamics_reduction_value.innerHTML = channel_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_dynamics_threshold", e.currentTarget.value);
});

const channel_1_dynamics_release = document.getElementById("channel_1_dynamics_release");
const channel_1_dynamics_release_value = document.getElementById("channel_1_dynamics_release_value");
channel_1_dynamics_release.addEventListener("change", function (e) {
  channel_1_dynamics_compressorNode.release.value = e.currentTarget.value;
  channel_1_dynamics_release_value.innerHTML = `${e.currentTarget.value}`;
  channel_1_dynamics_reduction_value.innerHTML = channel_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_dynamics_release", e.currentTarget.value);
});

const channel_1_dynamics_attack = document.getElementById("channel_1_dynamics_attack");
const channel_1_dynamics_attack_value = document.getElementById("channel_1_dynamics_attack_value");
channel_1_dynamics_attack.addEventListener("change", function (e) {
  channel_1_dynamics_compressorNode.attack.value = e.currentTarget.value;
  channel_1_dynamics_attack_value.innerHTML = `${e.currentTarget.value}`;
  channel_1_dynamics_reduction_value.innerHTML = channel_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_dynamics_attack", e.currentTarget.value);
});

const channel_1_dynamics_knee = document.getElementById("channel_1_dynamics_knee");
const channel_1_dynamics_knee_value = document.getElementById("channel_1_dynamics_knee_value");
channel_1_dynamics_knee.addEventListener("change", function (e) {
  channel_1_dynamics_compressorNode.knee.value = e.currentTarget.value;
  channel_1_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_1_dynamics_reduction_value.innerHTML = channel_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_dynamics_knee", e.currentTarget.value);
});
//------------------
const channel_2_compressor_On_Off_Button = document.getElementById("channel_2_compressor_On_Off_Button");
const channel_2_dynamics_reduction_text = document.getElementById("channel_2_dynamics_reduction_text");
const channel_2_dynamics_reduction_value = document.getElementById("channel_2_dynamics_reduction_value");
const channel_2_dynamics_compressor_div = document.getElementById("channel_2_dynamics_compressor_div");

const channel_2_dynamics_ratio = document.getElementById("channel_2_dynamics_ratio");
const channel_2_dynamics_ratio_value = document.getElementById("channel_2_dynamics_ratio_value");
channel_2_dynamics_ratio.addEventListener("change", function (e) {
  channel_2_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  channel_2_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_2_dynamics_reduction_value.innerHTML = channel_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_dynamics_ratio", e.currentTarget.value);
});

const channel_2_dynamics_threshold = document.getElementById("channel_2_dynamics_threshold");
const channel_2_dynamics_threshold_value = document.getElementById("channel_2_dynamics_threshold_value");
channel_2_dynamics_threshold.addEventListener("change", function (e) {
  channel_2_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  channel_2_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_2_dynamics_reduction_value.innerHTML = channel_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_dynamics_threshold", e.currentTarget.value);
});

const channel_2_dynamics_release = document.getElementById("channel_2_dynamics_release");
const channel_2_dynamics_release_value = document.getElementById("channel_2_dynamics_release_value");
channel_2_dynamics_release.addEventListener("change", function (e) {
  channel_2_dynamics_compressorNode.release.value = e.currentTarget.value;
  channel_2_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_2_dynamics_reduction_value.innerHTML = channel_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_dynamics_release", e.currentTarget.value);
});

const channel_2_dynamics_attack = document.getElementById("channel_2_dynamics_attack");
const channel_2_dynamics_attack_value = document.getElementById("channel_2_dynamics_attack_value");
channel_2_dynamics_attack.addEventListener("change", function (e) {
  channel_2_dynamics_compressorNode.attack.value = e.currentTarget.value;
  channel_2_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_2_dynamics_reduction_value.innerHTML = channel_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_dynamics_attack", e.currentTarget.value);
});

const channel_2_dynamics_knee = document.getElementById("channel_2_dynamics_knee");
const channel_2_dynamics_knee_value = document.getElementById("channel_2_dynamics_knee_value");
channel_2_dynamics_knee.addEventListener("change", function (e) {
  channel_2_dynamics_compressorNode.knee.value = e.currentTarget.value;
  channel_2_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_2_dynamics_reduction_value.innerHTML = channel_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_dynamics_knee", e.currentTarget.value);
});
//------------------
const channel_3_compressor_On_Off_Button = document.getElementById("channel_3_compressor_On_Off_Button");
const channel_3_dynamics_reduction_text = document.getElementById("channel_3_dynamics_reduction_text");
const channel_3_dynamics_reduction_value = document.getElementById("channel_3_dynamics_reduction_value");
const channel_3_dynamics_compressor_div = document.getElementById("channel_3_dynamics_compressor_div");

const channel_3_dynamics_ratio = document.getElementById("channel_3_dynamics_ratio");
const channel_3_dynamics_ratio_value = document.getElementById("channel_3_dynamics_ratio_value");
channel_3_dynamics_ratio.addEventListener("change", function (e) {
  channel_3_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  channel_3_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_3_dynamics_reduction_value.innerHTML = channel_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_dynamics_ratio", e.currentTarget.value);
});

const channel_3_dynamics_threshold = document.getElementById("channel_3_dynamics_threshold");
const channel_3_dynamics_threshold_value = document.getElementById("channel_3_dynamics_threshold_value");
channel_3_dynamics_threshold.addEventListener("change", function (e) {
  channel_3_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  channel_3_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_3_dynamics_reduction_value.innerHTML = channel_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_dynamics_threshold", e.currentTarget.value);
});

const channel_3_dynamics_release = document.getElementById("channel_3_dynamics_release");
const channel_3_dynamics_release_value = document.getElementById("channel_3_dynamics_release_value");
channel_3_dynamics_release.addEventListener("change", function (e) {
  channel_3_dynamics_compressorNode.release.value = e.currentTarget.value;
  channel_3_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_3_dynamics_reduction_value.innerHTML = channel_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_dynamics_release", e.currentTarget.value);
});

const channel_3_dynamics_attack = document.getElementById("channel_3_dynamics_attack");
const channel_3_dynamics_attack_value = document.getElementById("channel_3_dynamics_attack_value");
channel_3_dynamics_attack.addEventListener("change", function (e) {
  channel_3_dynamics_compressorNode.attack.value = e.currentTarget.value;
  channel_3_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_3_dynamics_reduction_value.innerHTML = channel_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_dynamics_attack", e.currentTarget.value);
});

const channel_3_dynamics_knee = document.getElementById("channel_3_dynamics_knee");
const channel_3_dynamics_knee_value = document.getElementById("channel_3_dynamics_knee_value");
channel_3_dynamics_knee.addEventListener("change", function (e) {
  channel_3_dynamics_compressorNode.knee.value = e.currentTarget.value;
  channel_3_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_3_dynamics_reduction_value.innerHTML = channel_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_dynamics_knee", e.currentTarget.value);
});
//------------------
const channel_4_compressor_On_Off_Button = document.getElementById("channel_4_compressor_On_Off_Button");
const channel_4_dynamics_reduction_text = document.getElementById("channel_4_dynamics_reduction_text");
const channel_4_dynamics_reduction_value = document.getElementById("channel_4_dynamics_reduction_value");
const channel_4_dynamics_compressor_div = document.getElementById("channel_4_dynamics_compressor_div");

const channel_4_dynamics_ratio = document.getElementById("channel_4_dynamics_ratio");
const channel_4_dynamics_ratio_value = document.getElementById("channel_4_dynamics_ratio_value");
channel_4_dynamics_ratio.addEventListener("change", function (e) {
  channel_4_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  channel_4_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_4_dynamics_reduction_value.innerHTML = channel_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_dynamics_ratio", e.currentTarget.value);
});

const channel_4_dynamics_threshold = document.getElementById("channel_4_dynamics_threshold");
const channel_4_dynamics_threshold_value = document.getElementById("channel_4_dynamics_threshold_value");
channel_4_dynamics_threshold.addEventListener("change", function (e) {
  channel_4_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  channel_4_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_4_dynamics_reduction_value.innerHTML = channel_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_dynamics_threshold", e.currentTarget.value);
});

const channel_4_dynamics_release = document.getElementById("channel_4_dynamics_release");
const channel_4_dynamics_release_value = document.getElementById("channel_4_dynamics_release_value");
channel_4_dynamics_release.addEventListener("change", function (e) {
  channel_4_dynamics_compressorNode.release.value = e.currentTarget.value;
  channel_4_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_4_dynamics_reduction_value.innerHTML = channel_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_dynamics_release", e.currentTarget.value);
});

const channel_4_dynamics_attack = document.getElementById("channel_4_dynamics_attack");
const channel_4_dynamics_attack_value = document.getElementById("channel_4_dynamics_attack_value");
channel_4_dynamics_attack.addEventListener("change", function (e) {
  channel_4_dynamics_compressorNode.attack.value = e.currentTarget.value;
  channel_4_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_4_dynamics_reduction_value.innerHTML = channel_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_dynamics_attack", e.currentTarget.value);
});

const channel_4_dynamics_knee = document.getElementById("channel_4_dynamics_knee");
const channel_4_dynamics_knee_value = document.getElementById("channel_4_dynamics_knee_value");
channel_4_dynamics_knee.addEventListener("change", function (e) {
  channel_4_dynamics_compressorNode.knee.value = e.currentTarget.value;
  channel_4_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  channel_4_dynamics_reduction_value.innerHTML = channel_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_dynamics_knee", e.currentTarget.value);
});

const fx_1_compressor_On_Off_Button = document.getElementById("fx_1_compressor_On_Off_Button");
const fx_1_dynamics_reduction_text = document.getElementById("fx_1_dynamics_reduction_text");
const fx_1_dynamics_reduction_value = document.getElementById("fx_1_dynamics_reduction_value");
const fx_1_dynamics_compressor_div = document.getElementById("fx_1_dynamics_compressor_div");

const fx_1_dynamics_ratio = document.getElementById("fx_1_dynamics_ratio");
const fx_1_dynamics_ratio_value = document.getElementById("fx_1_dynamics_ratio_value");
fx_1_dynamics_ratio.addEventListener("change", function (e) {
  fx_1_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  fx_1_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_1_dynamics_reduction_value.innerHTML = fx_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_dynamics_ratio", e.currentTarget.value);
});

const fx_1_dynamics_threshold = document.getElementById("fx_1_dynamics_threshold");
const fx_1_dynamics_threshold_value = document.getElementById("fx_1_dynamics_threshold_value");
fx_1_dynamics_threshold.addEventListener("change", function (e) {
  fx_1_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  fx_1_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_1_dynamics_reduction_value.innerHTML = fx_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_dynamics_threshold", e.currentTarget.value);
});

const fx_1_dynamics_release = document.getElementById("fx_1_dynamics_release");
const fx_1_dynamics_release_value = document.getElementById("fx_1_dynamics_release_value");
fx_1_dynamics_release.addEventListener("change", function (e) {
  fx_1_dynamics_compressorNode.release.value = e.currentTarget.value;
  fx_1_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_1_dynamics_reduction_value.innerHTML = fx_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_dynamics_release", e.currentTarget.value);
});

const fx_1_dynamics_attack = document.getElementById("fx_1_dynamics_attack");
const fx_1_dynamics_attack_value = document.getElementById("fx_1_dynamics_attack_value");
fx_1_dynamics_attack.addEventListener("change", function (e) {
  fx_1_dynamics_compressorNode.attack.value = e.currentTarget.value;
  fx_1_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_1_dynamics_reduction_value.innerHTML = fx_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_dynamics_attack", e.currentTarget.value);
});

const fx_1_dynamics_knee = document.getElementById("fx_1_dynamics_knee");
const fx_1_dynamics_knee_value = document.getElementById("fx_1_dynamics_knee_value");
fx_1_dynamics_knee.addEventListener("change", function (e) {
  fx_1_dynamics_compressorNode.knee.value = e.currentTarget.value;
  fx_1_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_1_dynamics_reduction_value.innerHTML = fx_1_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_dynamics_knee", e.currentTarget.value);
});
//------------------
const fx_2_compressor_On_Off_Button = document.getElementById("fx_2_compressor_On_Off_Button");
const fx_2_dynamics_reduction_text = document.getElementById("fx_2_dynamics_reduction_text");
const fx_2_dynamics_reduction_value = document.getElementById("fx_2_dynamics_reduction_value");
const fx_2_dynamics_compressor_div = document.getElementById("fx_2_dynamics_compressor_div");

const fx_2_dynamics_ratio = document.getElementById("fx_2_dynamics_ratio");
const fx_2_dynamics_ratio_value = document.getElementById("fx_2_dynamics_ratio_value");
fx_2_dynamics_ratio.addEventListener("change", function (e) {
  fx_2_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  fx_2_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_2_dynamics_reduction_value.innerHTML = fx_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_dynamics_ratio", e.currentTarget.value);
});

const fx_2_dynamics_threshold = document.getElementById("fx_2_dynamics_threshold");
const fx_2_dynamics_threshold_value = document.getElementById("fx_2_dynamics_threshold_value");
fx_2_dynamics_threshold.addEventListener("change", function (e) {
  fx_2_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  fx_2_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_2_dynamics_reduction_value.innerHTML = fx_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_dynamics_threshold", e.currentTarget.value);
});

const fx_2_dynamics_release = document.getElementById("fx_2_dynamics_release");
const fx_2_dynamics_release_value = document.getElementById("fx_2_dynamics_release_value");
fx_2_dynamics_release.addEventListener("change", function (e) {
  fx_2_dynamics_compressorNode.release.value = e.currentTarget.value;
  fx_2_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_2_dynamics_reduction_value.innerHTML = fx_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_dynamics_release", e.currentTarget.value);
});

const fx_2_dynamics_attack = document.getElementById("fx_2_dynamics_attack");
const fx_2_dynamics_attack_value = document.getElementById("fx_2_dynamics_attack_value");
fx_2_dynamics_attack.addEventListener("change", function (e) {
  fx_2_dynamics_compressorNode.attack.value = e.currentTarget.value;
  fx_2_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_2_dynamics_reduction_value.innerHTML = fx_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_dynamics_attack", e.currentTarget.value);
});

const fx_2_dynamics_knee = document.getElementById("fx_2_dynamics_knee");
const fx_2_dynamics_knee_value = document.getElementById("fx_2_dynamics_knee_value");
fx_2_dynamics_knee.addEventListener("change", function (e) {
  fx_2_dynamics_compressorNode.knee.value = e.currentTarget.value;
  fx_2_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_2_dynamics_reduction_value.innerHTML = fx_2_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_dynamics_knee", e.currentTarget.value);
});
//------------------
const fx_3_compressor_On_Off_Button = document.getElementById("fx_3_compressor_On_Off_Button");
const fx_3_dynamics_reduction_text = document.getElementById("fx_3_dynamics_reduction_text");
const fx_3_dynamics_reduction_value = document.getElementById("fx_3_dynamics_reduction_value");
const fx_3_dynamics_compressor_div = document.getElementById("fx_3_dynamics_compressor_div");

const fx_3_dynamics_ratio = document.getElementById("fx_3_dynamics_ratio");
const fx_3_dynamics_ratio_value = document.getElementById("fx_3_dynamics_ratio_value");
fx_3_dynamics_ratio.addEventListener("change", function (e) {
  fx_3_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  fx_3_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_3_dynamics_reduction_value.innerHTML = fx_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_dynamics_ratio", e.currentTarget.value);
});

const fx_3_dynamics_threshold = document.getElementById("fx_3_dynamics_threshold");
const fx_3_dynamics_threshold_value = document.getElementById("fx_3_dynamics_threshold_value");
fx_3_dynamics_threshold.addEventListener("change", function (e) {
  fx_3_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  fx_3_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_3_dynamics_reduction_value.innerHTML = fx_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_dynamics_threshold", e.currentTarget.value);
});

const fx_3_dynamics_release = document.getElementById("fx_3_dynamics_release");
const fx_3_dynamics_release_value = document.getElementById("fx_3_dynamics_release_value");
fx_3_dynamics_release.addEventListener("change", function (e) {
  fx_3_dynamics_compressorNode.release.value = e.currentTarget.value;
  fx_3_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_3_dynamics_reduction_value.innerHTML = fx_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_dynamics_release", e.currentTarget.value);
});

const fx_3_dynamics_attack = document.getElementById("fx_3_dynamics_attack");
const fx_3_dynamics_attack_value = document.getElementById("fx_3_dynamics_attack_value");
fx_3_dynamics_attack.addEventListener("change", function (e) {
  fx_3_dynamics_compressorNode.attack.value = e.currentTarget.value;
  fx_3_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_3_dynamics_reduction_value.innerHTML = fx_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_dynamics_attack", e.currentTarget.value);
});

const fx_3_dynamics_knee = document.getElementById("fx_3_dynamics_knee");
const fx_3_dynamics_knee_value = document.getElementById("fx_3_dynamics_knee_value");
fx_3_dynamics_knee.addEventListener("change", function (e) {
  fx_3_dynamics_compressorNode.knee.value = e.currentTarget.value;
  fx_3_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_3_dynamics_reduction_value.innerHTML = fx_3_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_dynamics_knee", e.currentTarget.value);
});
//------------------
const fx_4_compressor_On_Off_Button = document.getElementById("fx_4_compressor_On_Off_Button");
const fx_4_dynamics_reduction_text = document.getElementById("fx_4_dynamics_reduction_text");
const fx_4_dynamics_reduction_value = document.getElementById("fx_4_dynamics_reduction_value");
const fx_4_dynamics_compressor_div = document.getElementById("fx_4_dynamics_compressor_div");

const fx_4_dynamics_ratio = document.getElementById("fx_4_dynamics_ratio");
const fx_4_dynamics_ratio_value = document.getElementById("fx_4_dynamics_ratio_value");
fx_4_dynamics_ratio.addEventListener("change", function (e) {
  fx_4_dynamics_compressorNode.ratio.value = e.currentTarget.value;
  fx_4_dynamics_ratio_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_4_dynamics_reduction_value.innerHTML = fx_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_dynamics_ratio", e.currentTarget.value);
});

const fx_4_dynamics_threshold = document.getElementById("fx_4_dynamics_threshold");
const fx_4_dynamics_threshold_value = document.getElementById("fx_4_dynamics_threshold_value");
fx_4_dynamics_threshold.addEventListener("change", function (e) {
  fx_4_dynamics_compressorNode.threshold.value = e.currentTarget.value;
  fx_4_dynamics_threshold_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_4_dynamics_reduction_value.innerHTML = fx_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_dynamics_threshold", e.currentTarget.value);
});

const fx_4_dynamics_release = document.getElementById("fx_4_dynamics_release");
const fx_4_dynamics_release_value = document.getElementById("fx_4_dynamics_release_value");
fx_4_dynamics_release.addEventListener("change", function (e) {
  fx_4_dynamics_compressorNode.release.value = e.currentTarget.value;
  fx_4_dynamics_release_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_4_dynamics_reduction_value.innerHTML = fx_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_dynamics_release", e.currentTarget.value);
});

const fx_4_dynamics_attack = document.getElementById("fx_4_dynamics_attack");
const fx_4_dynamics_attack_value = document.getElementById("fx_4_dynamics_attack_value");
fx_4_dynamics_attack.addEventListener("change", function (e) {
  fx_4_dynamics_compressorNode.attack.value = e.currentTarget.value;
  fx_4_dynamics_attack_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_4_dynamics_reduction_value.innerHTML = fx_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_dynamics_attack", e.currentTarget.value);
});

const fx_4_dynamics_knee = document.getElementById("fx_4_dynamics_knee");
const fx_4_dynamics_knee_value = document.getElementById("fx_4_dynamics_knee_value");
fx_4_dynamics_knee.addEventListener("change", function (e) {
  fx_4_dynamics_compressorNode.knee.value = e.currentTarget.value;
  fx_4_dynamics_knee_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  fx_4_dynamics_reduction_value.innerHTML = fx_4_dynamics_compressorNode.reduction;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_dynamics_knee", e.currentTarget.value);
});
//*********************************************************************************************** */ */
//*********************************************************************************************** */
//************    GATE CHANNEL 1            *********************************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
//Gate player 1
const channel_1_gate_On_Off_Button = document.getElementById("channel_1_gate_On_Off_Button");
const channel_1_dynamics_gate_div = document.getElementById("channel_1_dynamics_gate_div");
channel_1_dynamics_gate_div.style.display = "none";

const channel_1_gate_threshold = document.getElementById("channel_1_gate_threshold");
const channel_1_gate_threshold_value = document.getElementById("channel_1_gate_threshold_value");
channel_1_gate_threshold.addEventListener("change", function (e) {
  channel_1_dynamics_gateNode.threshold = e.currentTarget.value;
  channel_1_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_gate_threshold", e.currentTarget.value);
});

const channel_1_gate_smoothing = document.getElementById("channel_1_gate_smoothing");
const channel_1_gate_smoothing_value = document.getElementById("channel_1_gate_smoothing_value");
channel_1_gate_smoothing.addEventListener("change", function (e) {
  channel_1_dynamics_gateNode.smoothing = e.currentTarget.value;
  channel_1_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_gate_smoothing", e.currentTarget.value);
});
//------------------
const channel_2_gate_On_Off_Button = document.getElementById("channel_2_gate_On_Off_Button");
const channel_2_dynamics_gate_div = document.getElementById("channel_2_dynamics_gate_div");
channel_2_dynamics_gate_div.style.display = "none";

const channel_2_gate_threshold = document.getElementById("channel_2_gate_threshold");
const channel_2_gate_threshold_value = document.getElementById("channel_2_gate_threshold_value");
channel_2_gate_threshold.addEventListener("change", function (e) {
  channel_2_dynamics_gateNode.threshold = e.currentTarget.value;
  channel_2_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_gate_threshold", e.currentTarget.value);
});

const channel_2_gate_smoothing = document.getElementById("channel_2_gate_smoothing");
const channel_2_gate_smoothing_value = document.getElementById("channel_2_gate_smoothing_value");
channel_2_gate_smoothing.addEventListener("change", function (e) {
  channel_2_dynamics_gateNode.smoothing = e.currentTarget.value;
  channel_2_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_gate_smoothing", e.currentTarget.value);
});
//------------------
const channel_3_gate_On_Off_Button = document.getElementById("channel_3_gate_On_Off_Button");
const channel_3_dynamics_gate_div = document.getElementById("channel_3_dynamics_gate_div");
channel_3_dynamics_gate_div.style.display = "none";

const channel_3_gate_threshold = document.getElementById("channel_3_gate_threshold");
const channel_3_gate_threshold_value = document.getElementById("channel_3_gate_threshold_value");
channel_3_gate_threshold.addEventListener("change", function (e) {
  channel_3_dynamics_gateNode.threshold = e.currentTarget.value;
  channel_3_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_gate_threshold", e.currentTarget.value);
});

const channel_3_gate_smoothing = document.getElementById("channel_3_gate_smoothing");
const channel_3_gate_smoothing_value = document.getElementById("channel_3_gate_smoothing_value");
channel_3_gate_smoothing.addEventListener("change", function (e) {
  channel_3_dynamics_gateNode.smoothing = e.currentTarget.value;
  channel_3_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_gate_smoothing", e.currentTarget.value);
});
//------------------
const channel_4_gate_On_Off_Button = document.getElementById("channel_4_gate_On_Off_Button");
const channel_4_dynamics_gate_div = document.getElementById("channel_4_dynamics_gate_div");
channel_4_dynamics_gate_div.style.display = "none";

const channel_4_gate_threshold = document.getElementById("channel_4_gate_threshold");
const channel_4_gate_threshold_value = document.getElementById("channel_4_gate_threshold_value");
channel_4_gate_threshold.addEventListener("change", function (e) {
  channel_4_dynamics_gateNode.threshold = e.currentTarget.value;
  channel_4_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_gate_threshold", e.currentTarget.value);
});

const channel_4_gate_smoothing = document.getElementById("channel_4_gate_smoothing");
const channel_4_gate_smoothing_value = document.getElementById("channel_4_gate_smoothing_value");
channel_4_gate_smoothing.addEventListener("change", function (e) {
  channel_4_dynamics_gateNode.smoothing = e.currentTarget.value;
  channel_4_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_gate_smoothing", e.currentTarget.value);
});

//*********************************************************************************************** */ */
//*********************************************************************************************** */
//************    GATE FX 1-4            *********************************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
//Gate player 1
const fx_1_gate_On_Off_Button = document.getElementById("fx_1_gate_On_Off_Button");
const fx_1_dynamics_gate_div = document.getElementById("fx_1_dynamics_gate_div");
fx_1_dynamics_gate_div.style.display = "none";

const fx_1_gate_threshold = document.getElementById("fx_1_gate_threshold");
const fx_1_gate_threshold_value = document.getElementById("fx_1_gate_threshold_value");
fx_1_gate_threshold.addEventListener("change", function (e) {
  fx_1_dynamics_gateNode.threshold = e.currentTarget.value;
  fx_1_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_gate_threshold", e.currentTarget.value);
});

const fx_1_gate_smoothing = document.getElementById("fx_1_gate_smoothing");
const fx_1_gate_smoothing_value = document.getElementById("fx_1_gate_smoothing_value");
fx_1_gate_smoothing.addEventListener("change", function (e) {
  fx_1_dynamics_gateNode.smoothing = e.currentTarget.value;
  fx_1_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_gate_smoothing", e.currentTarget.value);
});
//------------------
const fx_2_gate_On_Off_Button = document.getElementById("fx_2_gate_On_Off_Button");
const fx_2_dynamics_gate_div = document.getElementById("fx_2_dynamics_gate_div");
fx_2_dynamics_gate_div.style.display = "none";

const fx_2_gate_threshold = document.getElementById("fx_2_gate_threshold");
const fx_2_gate_threshold_value = document.getElementById("fx_2_gate_threshold_value");
fx_2_gate_threshold.addEventListener("change", function (e) {
  fx_2_dynamics_gateNode.threshold = e.currentTarget.value;
  fx_2_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_gate_threshold", e.currentTarget.value);
});

const fx_2_gate_smoothing = document.getElementById("fx_2_gate_smoothing");
const fx_2_gate_smoothing_value = document.getElementById("fx_2_gate_smoothing_value");
fx_2_gate_smoothing.addEventListener("change", function (e) {
  fx_2_dynamics_gateNode.smoothing = e.currentTarget.value;
  fx_2_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_gate_smoothing", e.currentTarget.value);
});
//------------------
const fx_3_gate_On_Off_Button = document.getElementById("fx_3_gate_On_Off_Button");
const fx_3_dynamics_gate_div = document.getElementById("fx_3_dynamics_gate_div");
fx_3_dynamics_gate_div.style.display = "none";

const fx_3_gate_threshold = document.getElementById("fx_3_gate_threshold");
const fx_3_gate_threshold_value = document.getElementById("fx_3_gate_threshold_value");
fx_3_gate_threshold.addEventListener("change", function (e) {
  fx_3_dynamics_gateNode.threshold = e.currentTarget.value;
  fx_3_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_gate_threshold", e.currentTarget.value);
});

const fx_3_gate_smoothing = document.getElementById("fx_3_gate_smoothing");
const fx_3_gate_smoothing_value = document.getElementById("fx_3_gate_smoothing_value");
fx_3_gate_smoothing.addEventListener("change", function (e) {
  fx_3_dynamics_gateNode.smoothing = e.currentTarget.value;
  fx_3_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_gate_smoothing", e.currentTarget.value);
});
//------------------
const fx_4_gate_On_Off_Button = document.getElementById("fx_4_gate_On_Off_Button");
const fx_4_dynamics_gate_div = document.getElementById("fx_4_dynamics_gate_div");
fx_4_dynamics_gate_div.style.display = "none";

const fx_4_gate_threshold = document.getElementById("fx_4_gate_threshold");
const fx_4_gate_threshold_value = document.getElementById("fx_4_gate_threshold_value");
fx_4_gate_threshold.addEventListener("change", function (e) {
  fx_4_dynamics_gateNode.threshold = e.currentTarget.value;
  fx_4_gate_threshold_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_gate_threshold", e.currentTarget.value);
});

const fx_4_gate_smoothing = document.getElementById("fx_4_gate_smoothing");
const fx_4_gate_smoothing_value = document.getElementById("fx_4_gate_smoothing_value");
fx_4_gate_smoothing.addEventListener("change", function (e) {
  fx_4_dynamics_gateNode.smoothing = e.currentTarget.value;
  fx_4_gate_smoothing_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_gate_smoothing", e.currentTarget.value);
});

//*********************************************************************************************** */
//*********************************************************************************************** */
//***********  CHANNEL 1-4 LIMITER          ******************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
const channel_1_limiter_On_Off_Button = document.getElementById("channel_1_limiter_On_Off_Button");
const channel_1_limiter_reduction_value = document.getElementById("channel_1_limiter_reduction_value");
const channel_1_limiter_reduction_text = document.getElementById("channel_1_limiter_reduction_text");
const channel_1_dynamics_limiter_div = document.getElementById("channel_1_dynamics_limiter_div");
channel_1_dynamics_limiter_div.style.display = "none";

const channel_1_limiter_threshold = document.getElementById("channel_1_limiter_threshold");
const channel_1_limiter_threshold_value = document.getElementById("channel_1_limiter_threshold_value");
channel_1_limiter_threshold.addEventListener("change", function (e) {
  channel_1_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  channel_1_limiter_threshold_value.innerHTML = channel_1_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_limiter_threshold", e.currentTarget.value);
});

//------------------
const channel_2_limiter_On_Off_Button = document.getElementById("channel_2_limiter_On_Off_Button");
const channel_2_limiter_reduction_value = document.getElementById("channel_2_limiter_reduction_value");
const channel_2_limiter_reduction_text = document.getElementById("channel_2_limiter_reduction_text");
const channel_2_dynamics_limiter_div = document.getElementById("channel_2_dynamics_limiter_div");
channel_2_dynamics_limiter_div.style.display = "none";

const channel_2_limiter_threshold = document.getElementById("channel_2_limiter_threshold");
const channel_2_limiter_threshold_value = document.getElementById("channel_2_limiter_threshold_value");
channel_2_limiter_threshold.addEventListener("change", function (e) {
  channel_2_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  channel_2_limiter_threshold_value.innerHTML = channel_2_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_limiter_threshold", e.currentTarget.value);
});

//------------------
const channel_3_limiter_On_Off_Button = document.getElementById("channel_3_limiter_On_Off_Button");
const channel_3_limiter_reduction_value = document.getElementById("channel_3_limiter_reduction_value");
const channel_3_limiter_reduction_text = document.getElementById("channel_3_limiter_reduction_text");
const channel_3_dynamics_limiter_div = document.getElementById("channel_3_dynamics_limiter_div");
channel_3_dynamics_limiter_div.style.display = "none";

const channel_3_limiter_threshold = document.getElementById("channel_3_limiter_threshold");
const channel_3_limiter_threshold_value = document.getElementById("channel_3_limiter_threshold_value");
channel_3_limiter_threshold.addEventListener("change", function (e) {
  channel_3_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  channel_3_limiter_threshold_value.innerHTML = channel_3_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_limiter_threshold", e.currentTarget.value);
});

//------------------
const channel_4_limiter_On_Off_Button = document.getElementById("channel_4_limiter_On_Off_Button");
const channel_4_limiter_reduction_value = document.getElementById("channel_4_limiter_reduction_value");
const channel_4_limiter_reduction_text = document.getElementById("channel_4_limiter_reduction_text");
const channel_4_dynamics_limiter_div = document.getElementById("channel_4_dynamics_limiter_div");
channel_4_dynamics_limiter_div.style.display = "none";

const channel_4_limiter_threshold = document.getElementById("channel_4_limiter_threshold");
const channel_4_limiter_threshold_value = document.getElementById("channel_4_limiter_threshold_value");
channel_4_limiter_threshold.addEventListener("change", function (e) {
  channel_4_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  channel_4_limiter_threshold_value.innerHTML = channel_4_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_limiter_threshold", e.currentTarget.value);
});

//*********************************************************************************************** */
//*********************************************************************************************** */
//***********  FX 1-4 LIMITER          ******************************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */

const fx_1_limiter_On_Off_Button = document.getElementById("fx_1_limiter_On_Off_Button");
const fx_1_limiter_reduction_value = document.getElementById("fx_1_limiter_reduction_value");
const fx_1_limiter_reduction_text = document.getElementById("fx_1_limiter_reduction_text");
const fx_1_dynamics_limiter_div = document.getElementById("fx_1_dynamics_limiter_div");
fx_1_dynamics_limiter_div.style.display = "none";

const fx_1_limiter_threshold = document.getElementById("fx_1_limiter_threshold");
const fx_1_limiter_threshold_value = document.getElementById("fx_1_limiter_threshold_value");
fx_1_limiter_threshold.addEventListener("change", function (e) {
  fx_1_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  fx_1_limiter_threshold_value.innerHTML = fx_1_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_limiter_threshold", e.currentTarget.value);
});

//------------------
const fx_2_limiter_On_Off_Button = document.getElementById("fx_2_limiter_On_Off_Button");
const fx_2_limiter_reduction_value = document.getElementById("fx_2_limiter_reduction_value");
const fx_2_limiter_reduction_text = document.getElementById("fx_2_limiter_reduction_text");
const fx_2_dynamics_limiter_div = document.getElementById("fx_2_dynamics_limiter_div");
fx_2_dynamics_limiter_div.style.display = "none";

const fx_2_limiter_threshold = document.getElementById("fx_2_limiter_threshold");
const fx_2_limiter_threshold_value = document.getElementById("fx_2_limiter_threshold_value");
fx_2_limiter_threshold.addEventListener("change", function (e) {
  fx_2_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  fx_2_limiter_threshold_value.innerHTML = fx_2_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_limiter_threshold", e.currentTarget.value);
});

//------------------
const fx_3_limiter_On_Off_Button = document.getElementById("fx_3_limiter_On_Off_Button");
const fx_3_limiter_reduction_value = document.getElementById("fx_3_limiter_reduction_value");
const fx_3_limiter_reduction_text = document.getElementById("fx_3_limiter_reduction_text");
const fx_3_dynamics_limiter_div = document.getElementById("fx_3_dynamics_limiter_div");
fx_3_dynamics_limiter_div.style.display = "none";

const fx_3_limiter_threshold = document.getElementById("fx_3_limiter_threshold");
const fx_3_limiter_threshold_value = document.getElementById("fx_3_limiter_threshold_value");
fx_3_limiter_threshold.addEventListener("change", function (e) {
  fx_3_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  fx_3_limiter_threshold_value.innerHTML = fx_3_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_limiter_threshold", e.currentTarget.value);
});

//------------------
const fx_4_limiter_On_Off_Button = document.getElementById("fx_4_limiter_On_Off_Button");
const fx_4_limiter_reduction_value = document.getElementById("fx_4_limiter_reduction_value");
const fx_4_limiter_reduction_text = document.getElementById("fx_4_limiter_reduction_text");
const fx_4_dynamics_limiter_div = document.getElementById("fx_4_dynamics_limiter_div");
fx_4_dynamics_limiter_div.style.display = "none";

const fx_4_limiter_threshold = document.getElementById("fx_4_limiter_threshold");
const fx_4_limiter_threshold_value = document.getElementById("fx_4_limiter_threshold_value");
fx_4_limiter_threshold.addEventListener("change", function (e) {
  fx_4_dynamics_limiterNode.threshold.value = e.currentTarget.value;
  fx_4_limiter_threshold_value.innerHTML = fx_4_dynamics_limiterNode.threshold.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_limiter_threshold", e.currentTarget.value);
});

//*********************************************************************************************** */
//*********************************************************************************************** */
//************************   Tascam 424 channel 1      ********************************************************** */
//*********************************************************************************************** */
//*********************************************************************************************** */
const channel_1_filter_eq_On_Tascam_Button = document.getElementById("channel_1_filter_eq_On_Tascam_Button");
const channel_1_filter_eq_On_EQ3_Button = document.getElementById("channel_1_filter_eq_On_EQ3_Button");

const channel_1_tascam_in_Node = new Tone.Volume(0);
const channel_1_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const channel_1_tascam_LowShelf_gain = document.getElementById("channel_1_tascam_LowShelf_gain");
const channel_1_tascam_LowShelf_gain_value = document.getElementById("channel_1_tascam_LowShelf_gain_value");
const channel_1_tascam_LowShelf_gain_text = document.getElementById("channel_1_tascam_LowShelf_gain_text");
const channel_1_tascam_LowShelf_FilterNode = new Tone.Filter();

channel_1_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
channel_1_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_1_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_1_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_1_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const channel_1_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
channel_1_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 10,
  q: 0.2,
  rolloff: -24,
});

const channel_1_tascam_Mid_SemiParam_gain = document.getElementById("channel_1_tascam_Mid_SemiParam_gain");
const channel_1_tascam_Mid_SemiParam_gain_value = document.getElementById("channel_1_tascam_Mid_SemiParam_gain_value");
const channel_1_tascam_Mid_SemiParam_gain_text = document.getElementById("channel_1_tascam_Mid_SemiParam_gain_text");
const channel_1_tascam_Mid_SemiParam_frequency = document.getElementById("channel_1_tascam_Mid_SemiParam_frequency");
const channel_1_tascam_Mid_SemiParam_frequency_value = document.getElementById("channel_1_tascam_Mid_SemiParam_frequency_value");
const channel_1_tascam_Mid_SemiParam_frequency_text = document.getElementById("channel_1_tascam_Mid_SemiParam_frequency_text");
channel_1_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_1_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    console.log("channel_1_tascam_Mid_SemiParam_FilterNode.gain.value:  " + channel_1_tascam_Mid_SemiParam_FilterNode.gain.value)
    channel_1_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_1_tascam_Mid_SemiParam_gain");
  }
});
channel_1_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    channel_1_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    channel_1_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_1_tascam_Mid_SemiParam_frec");
  }
});

//HIGH SHELF
const channel_1_tascam_HighShelf_gain = document.getElementById("channel_1_tascam_HighShelf_gain");
const channel_1_tascam_HighShelf_gain_value = document.getElementById("channel_1_tascam_HighShelf_gain_value");
const channel_1_tascam_HighShelf_gain_text = document.getElementById("channel_1_tascam_HighShelf_gain_text");

const channel_1_tascam_HighShelf_FilterNode = new Tone.Filter();
channel_1_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

channel_1_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_1_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_1_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_1_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_1_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
channel_1_tascam_LowShelf_FilterNode.connect(channel_1_tascam_out_Node);
channel_1_tascam_Mid_SemiParam_FilterNode.connect(channel_1_tascam_out_Node);
channel_1_tascam_HighShelf_FilterNode.connect(channel_1_tascam_out_Node);

channel_1_tascam_in_Node.fan(channel_1_tascam_LowShelf_FilterNode,
  channel_1_tascam_Mid_SemiParam_FilterNode, channel_1_tascam_HighShelf_FilterNode);

//------------------
const channel_2_filter_eq_On_Tascam_Button = document.getElementById("channel_2_filter_eq_On_Tascam_Button");
const channel_2_filter_eq_On_EQ3_Button = document.getElementById("channel_2_filter_eq_On_EQ3_Button");

const channel_2_tascam_in_Node = new Tone.Volume(0);
const channel_2_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const channel_2_tascam_LowShelf_gain = document.getElementById("channel_2_tascam_LowShelf_gain");
const channel_2_tascam_LowShelf_gain_value = document.getElementById("channel_2_tascam_LowShelf_gain_value");
const channel_2_tascam_LowShelf_gain_text = document.getElementById("channel_2_tascam_LowShelf_gain_text");
const channel_2_tascam_LowShelf_FilterNode = new Tone.Filter();

const channel_2_rms_meter = new Tone.Meter(0);

channel_2_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
channel_2_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_2_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_2_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_2_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const channel_2_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
channel_2_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const channel_2_tascam_Mid_SemiParam_gain = document.getElementById("channel_2_tascam_Mid_SemiParam_gain");
const channel_2_tascam_Mid_SemiParam_gain_value = document.getElementById("channel_2_tascam_Mid_SemiParam_gain_value");
const channel_2_tascam_Mid_SemiParam_gain_text = document.getElementById("channel_2_tascam_Mid_SemiParam_gain_text");
const channel_2_tascam_Mid_SemiParam_frequency = document.getElementById("channel_2_tascam_Mid_SemiParam_frequency");
const channel_2_tascam_Mid_SemiParam_frequency_value = document.getElementById("channel_2_tascam_Mid_SemiParam_frequency_value");
const channel_2_tascam_Mid_SemiParam_frequency_text = document.getElementById("channel_2_tascam_Mid_SemiParam_frequency_text");
channel_2_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_2_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    channel_2_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_2_tascam_Mid_SemiParam_gain");
  }
});
channel_2_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    channel_2_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    channel_2_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_2_tascam_Mid_SemiParam_frec");
  }
});

//HIGH SHELF
const channel_2_tascam_HighShelf_gain = document.getElementById("channel_2_tascam_HighShelf_gain");
const channel_2_tascam_HighShelf_gain_value = document.getElementById("channel_2_tascam_HighShelf_gain_value");
const channel_2_tascam_HighShelf_gain_text = document.getElementById("channel_2_tascam_HighShelf_gain_text");

const channel_2_tascam_HighShelf_FilterNode = new Tone.Filter();
channel_2_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

channel_2_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_2_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_2_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_2_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_2_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
channel_2_tascam_LowShelf_FilterNode.connect(channel_2_tascam_out_Node);
channel_2_tascam_Mid_SemiParam_FilterNode.connect(channel_2_tascam_out_Node);
channel_2_tascam_HighShelf_FilterNode.connect(channel_2_tascam_out_Node);

channel_2_tascam_in_Node.fan(channel_2_tascam_LowShelf_FilterNode,
  channel_2_tascam_Mid_SemiParam_FilterNode, channel_2_tascam_HighShelf_FilterNode);

//------------------
const channel_3_filter_eq_On_Tascam_Button = document.getElementById("channel_3_filter_eq_On_Tascam_Button");
const channel_3_filter_eq_On_EQ3_Button = document.getElementById("channel_3_filter_eq_On_EQ3_Button");

const channel_3_tascam_in_Node = new Tone.Volume(0);
const channel_3_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const channel_3_tascam_LowShelf_gain = document.getElementById("channel_3_tascam_LowShelf_gain");
const channel_3_tascam_LowShelf_gain_value = document.getElementById("channel_3_tascam_LowShelf_gain_value");
const channel_3_tascam_LowShelf_gain_text = document.getElementById("channel_3_tascam_LowShelf_gain_text");
const channel_3_tascam_LowShelf_FilterNode = new Tone.Filter();

const channel_3_rms_meter = new Tone.Meter(0);

channel_3_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
channel_3_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_3_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_3_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_3_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const channel_3_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
channel_3_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const channel_3_tascam_Mid_SemiParam_gain = document.getElementById("channel_3_tascam_Mid_SemiParam_gain");
const channel_3_tascam_Mid_SemiParam_gain_value = document.getElementById("channel_3_tascam_Mid_SemiParam_gain_value");
const channel_3_tascam_Mid_SemiParam_gain_text = document.getElementById("channel_3_tascam_Mid_SemiParam_gain_text");
const channel_3_tascam_Mid_SemiParam_frequency = document.getElementById("channel_3_tascam_Mid_SemiParam_frequency");
const channel_3_tascam_Mid_SemiParam_frequency_value = document.getElementById("channel_3_tascam_Mid_SemiParam_frequency_value");
const channel_3_tascam_Mid_SemiParam_frequency_text = document.getElementById("channel_3_tascam_Mid_SemiParam_frequency_text");
channel_3_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_3_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    channel_3_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_3_tascam_Mid_SemiParam_gain");
  }
});
channel_3_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    channel_3_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    channel_3_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_3_tascam_Mid_SemiParam_frec");
  }
});


//HIGH SHELF
const channel_3_tascam_HighShelf_gain = document.getElementById("channel_3_tascam_HighShelf_gain");
const channel_3_tascam_HighShelf_gain_value = document.getElementById("channel_3_tascam_HighShelf_gain_value");
const channel_3_tascam_HighShelf_gain_text = document.getElementById("channel_3_tascam_HighShelf_gain_text");

const channel_3_tascam_HighShelf_FilterNode = new Tone.Filter();
channel_3_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

channel_3_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_3_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_3_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_3_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
channel_3_tascam_LowShelf_FilterNode.connect(channel_3_tascam_out_Node);
channel_3_tascam_Mid_SemiParam_FilterNode.connect(channel_3_tascam_out_Node);
channel_3_tascam_HighShelf_FilterNode.connect(channel_3_tascam_out_Node);

channel_3_tascam_in_Node.fan(channel_3_tascam_LowShelf_FilterNode,
  channel_3_tascam_Mid_SemiParam_FilterNode, channel_3_tascam_HighShelf_FilterNode);

//------------------
const channel_4_filter_eq_On_Tascam_Button = document.getElementById("channel_4_filter_eq_On_Tascam_Button");
const channel_4_filter_eq_On_EQ3_Button = document.getElementById("channel_4_filter_eq_On_EQ3_Button");

const channel_4_tascam_in_Node = new Tone.Volume(0);
const channel_4_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const channel_4_tascam_LowShelf_gain = document.getElementById("channel_4_tascam_LowShelf_gain");
const channel_4_tascam_LowShelf_gain_value = document.getElementById("channel_4_tascam_LowShelf_gain_value");
const channel_4_tascam_LowShelf_gain_text = document.getElementById("channel_4_tascam_LowShelf_gain_text");
const channel_4_tascam_LowShelf_FilterNode = new Tone.Filter();

const channel_4_rms_meter = new Tone.Meter(0);

channel_4_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
channel_4_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_4_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_4_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_4_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const channel_4_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
channel_4_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const channel_4_tascam_Mid_SemiParam_gain = document.getElementById("channel_4_tascam_Mid_SemiParam_gain");
const channel_4_tascam_Mid_SemiParam_gain_value = document.getElementById("channel_4_tascam_Mid_SemiParam_gain_value");
const channel_4_tascam_Mid_SemiParam_gain_text = document.getElementById("channel_4_tascam_Mid_SemiParam_gain_text");
const channel_4_tascam_Mid_SemiParam_frequency = document.getElementById("channel_4_tascam_Mid_SemiParam_frequency");
const channel_4_tascam_Mid_SemiParam_frequency_value = document.getElementById("channel_4_tascam_Mid_SemiParam_frequency_value");
const channel_4_tascam_Mid_SemiParam_frequency_text = document.getElementById("channel_4_tascam_Mid_SemiParam_frequency_text");
channel_4_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_4_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    channel_4_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_4_tascam_Mid_SemiParam_gain");
  }
});
channel_4_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    channel_4_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    channel_4_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_4_tascam_Mid_SemiParam_frec");
  }
});


//HIGH SHELF
const channel_4_tascam_HighShelf_gain = document.getElementById("channel_4_tascam_HighShelf_gain");
const channel_4_tascam_HighShelf_gain_value = document.getElementById("channel_4_tascam_HighShelf_gain_value");
const channel_4_tascam_HighShelf_gain_text = document.getElementById("channel_4_tascam_HighShelf_gain_text");

const channel_4_tascam_HighShelf_FilterNode = new Tone.Filter();
channel_4_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

channel_4_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    channel_4_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    channel_4_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE channel_4_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
channel_4_tascam_LowShelf_FilterNode.connect(channel_4_tascam_out_Node);
channel_4_tascam_Mid_SemiParam_FilterNode.connect(channel_4_tascam_out_Node);
channel_4_tascam_HighShelf_FilterNode.connect(channel_4_tascam_out_Node);

channel_4_tascam_in_Node.fan(channel_4_tascam_LowShelf_FilterNode,
  channel_4_tascam_Mid_SemiParam_FilterNode, channel_4_tascam_HighShelf_FilterNode);


const fx_1_filter_eq_On_Tascam_Button = document.getElementById("fx_1_filter_eq_On_Tascam_Button");

const fx_1_tascam_in_Node = new Tone.Volume(0);
const fx_1_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const fx_1_tascam_LowShelf_gain = document.getElementById("fx_1_tascam_LowShelf_gain");
const fx_1_tascam_LowShelf_gain_value = document.getElementById("fx_1_tascam_LowShelf_gain_value");
const fx_1_tascam_LowShelf_gain_text = document.getElementById("fx_1_tascam_LowShelf_gain_text");
const fx_1_tascam_LowShelf_FilterNode = new Tone.Filter();

const fx_1_rms_meter = new Tone.Meter(0);
const fx_1_filter_bypass_meter = new Tone.Meter(0);
const fx_1_eq3_meter = new Tone.Meter(0);

fx_1_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
fx_1_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_1_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_1_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_1_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const fx_1_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
fx_1_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const fx_1_tascam_Mid_SemiParam_gain = document.getElementById("fx_1_tascam_Mid_SemiParam_gain");
const fx_1_tascam_Mid_SemiParam_gain_value = document.getElementById("fx_1_tascam_Mid_SemiParam_gain_value");
const fx_1_tascam_Mid_SemiParam_gain_text = document.getElementById("fx_1_tascam_Mid_SemiParam_gain_text");
const fx_1_tascam_Mid_SemiParam_frequency = document.getElementById("fx_1_tascam_Mid_SemiParam_frequency");
const fx_1_tascam_Mid_SemiParam_frequency_value = document.getElementById("fx_1_tascam_Mid_SemiParam_frequency_value");
const fx_1_tascam_Mid_SemiParam_frequency_text = document.getElementById("fx_1_tascam_Mid_SemiParam_frequency_text");
fx_1_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_1_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    fx_1_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_1_tascam_Mid_SemiParam_gain");
  }
});
fx_1_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    fx_1_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    fx_1_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_1_tascam_Mid_SemiParam_frec");
  }
});


//HIGH SHELF
const fx_1_tascam_HighShelf_gain = document.getElementById("fx_1_tascam_HighShelf_gain");
const fx_1_tascam_HighShelf_gain_value = document.getElementById("fx_1_tascam_HighShelf_gain_value");
const fx_1_tascam_HighShelf_gain_text = document.getElementById("fx_1_tascam_HighShelf_gain_text");

const fx_1_tascam_HighShelf_FilterNode = new Tone.Filter();
fx_1_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

fx_1_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_1_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_1_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_1_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
fx_1_tascam_LowShelf_FilterNode.connect(fx_1_tascam_out_Node);
fx_1_tascam_Mid_SemiParam_FilterNode.connect(fx_1_tascam_out_Node);
fx_1_tascam_HighShelf_FilterNode.connect(fx_1_tascam_out_Node);

fx_1_tascam_in_Node.fan(fx_1_tascam_LowShelf_FilterNode,
  fx_1_tascam_Mid_SemiParam_FilterNode, fx_1_tascam_HighShelf_FilterNode);

//------------------
const fx_2_filter_eq_On_Tascam_Button = document.getElementById("fx_2_filter_eq_On_Tascam_Button");

const fx_2_tascam_in_Node = new Tone.Volume(0);
const fx_2_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const fx_2_tascam_LowShelf_gain = document.getElementById("fx_2_tascam_LowShelf_gain");
const fx_2_tascam_LowShelf_gain_value = document.getElementById("fx_2_tascam_LowShelf_gain_value");
const fx_2_tascam_LowShelf_gain_text = document.getElementById("fx_2_tascam_LowShelf_gain_text");
const fx_2_tascam_LowShelf_FilterNode = new Tone.Filter();

const fx_2_rms_meter = new Tone.Meter(0);

fx_2_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
fx_2_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_2_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_2_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_2_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const fx_2_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
fx_2_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const fx_2_tascam_Mid_SemiParam_gain = document.getElementById("fx_2_tascam_Mid_SemiParam_gain");
const fx_2_tascam_Mid_SemiParam_gain_value = document.getElementById("fx_2_tascam_Mid_SemiParam_gain_value");
const fx_2_tascam_Mid_SemiParam_gain_text = document.getElementById("fx_2_tascam_Mid_SemiParam_gain_text");
const fx_2_tascam_Mid_SemiParam_frequency = document.getElementById("fx_2_tascam_Mid_SemiParam_frequency");
const fx_2_tascam_Mid_SemiParam_frequency_value = document.getElementById("fx_2_tascam_Mid_SemiParam_frequency_value");
const fx_2_tascam_Mid_SemiParam_frequency_text = document.getElementById("fx_2_tascam_Mid_SemiParam_frequency_text");
fx_2_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_2_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    fx_2_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_2_tascam_Mid_SemiParam_gain");
  }
});
fx_2_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    fx_2_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    fx_2_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_2_tascam_Mid_SemiParam_frec");
  }
});

//HIGH SHELF
const fx_2_tascam_HighShelf_gain = document.getElementById("fx_2_tascam_HighShelf_gain");
const fx_2_tascam_HighShelf_gain_value = document.getElementById("fx_2_tascam_HighShelf_gain_value");
const fx_2_tascam_HighShelf_gain_text = document.getElementById("fx_2_tascam_HighShelf_gain_text");

const fx_2_tascam_HighShelf_FilterNode = new Tone.Filter();
fx_2_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

fx_2_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_2_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_2_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_2_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
fx_2_tascam_LowShelf_FilterNode.connect(fx_2_tascam_out_Node);
fx_2_tascam_Mid_SemiParam_FilterNode.connect(fx_2_tascam_out_Node);
fx_2_tascam_HighShelf_FilterNode.connect(fx_2_tascam_out_Node);

fx_2_tascam_in_Node.fan(fx_2_tascam_LowShelf_FilterNode,
  fx_2_tascam_Mid_SemiParam_FilterNode, fx_2_tascam_HighShelf_FilterNode);

//------------------
const fx_3_filter_eq_On_Tascam_Button = document.getElementById("fx_3_filter_eq_On_Tascam_Button");

const fx_3_tascam_in_Node = new Tone.Volume(0);
const fx_3_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const fx_3_tascam_LowShelf_gain = document.getElementById("fx_3_tascam_LowShelf_gain");
const fx_3_tascam_LowShelf_gain_value = document.getElementById("fx_3_tascam_LowShelf_gain_value");
const fx_3_tascam_LowShelf_gain_text = document.getElementById("fx_3_tascam_LowShelf_gain_text");
const fx_3_tascam_LowShelf_FilterNode = new Tone.Filter();

const fx_3_rms_meter = new Tone.Meter(0);

fx_3_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
fx_3_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_3_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_3_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_3_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const fx_3_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
fx_3_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const fx_3_tascam_Mid_SemiParam_gain = document.getElementById("fx_3_tascam_Mid_SemiParam_gain");
const fx_3_tascam_Mid_SemiParam_gain_value = document.getElementById("fx_3_tascam_Mid_SemiParam_gain_value");
const fx_3_tascam_Mid_SemiParam_gain_text = document.getElementById("fx_3_tascam_Mid_SemiParam_gain_text");
const fx_3_tascam_Mid_SemiParam_frequency = document.getElementById("fx_3_tascam_Mid_SemiParam_frequency");
const fx_3_tascam_Mid_SemiParam_frequency_value = document.getElementById("fx_3_tascam_Mid_SemiParam_frequency_value");
const fx_3_tascam_Mid_SemiParam_frequency_text = document.getElementById("fx_3_tascam_Mid_SemiParam_frequency_text");
fx_3_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_3_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    fx_3_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_3_tascam_Mid_SemiParam_gain");
  }
});
fx_3_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    fx_3_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    fx_3_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_3_tascam_Mid_SemiParam_frec");
  }
});


//HIGH SHELF
const fx_3_tascam_HighShelf_gain = document.getElementById("fx_3_tascam_HighShelf_gain");
const fx_3_tascam_HighShelf_gain_value = document.getElementById("fx_3_tascam_HighShelf_gain_value");
const fx_3_tascam_HighShelf_gain_text = document.getElementById("fx_3_tascam_HighShelf_gain_text");

const fx_3_tascam_HighShelf_FilterNode = new Tone.Filter();
fx_3_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

fx_3_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_3_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_3_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_3_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
fx_3_tascam_LowShelf_FilterNode.connect(fx_3_tascam_out_Node);
fx_3_tascam_Mid_SemiParam_FilterNode.connect(fx_3_tascam_out_Node);
fx_3_tascam_HighShelf_FilterNode.connect(fx_3_tascam_out_Node);

fx_3_tascam_in_Node.fan(fx_3_tascam_LowShelf_FilterNode,
  fx_3_tascam_Mid_SemiParam_FilterNode, fx_3_tascam_HighShelf_FilterNode);

//------------------
const fx_4_filter_eq_On_Tascam_Button = document.getElementById("fx_4_filter_eq_On_Tascam_Button");

const fx_4_tascam_in_Node = new Tone.Volume(0);
const fx_4_tascam_out_Node = new Tone.Volume(0);

//LOW SHELF
const fx_4_tascam_LowShelf_gain = document.getElementById("fx_4_tascam_LowShelf_gain");
const fx_4_tascam_LowShelf_gain_value = document.getElementById("fx_4_tascam_LowShelf_gain_value");
const fx_4_tascam_LowShelf_gain_text = document.getElementById("fx_4_tascam_LowShelf_gain_text");
const fx_4_tascam_LowShelf_FilterNode = new Tone.Filter();

const fx_4_rms_meter = new Tone.Meter(0);

fx_4_tascam_LowShelf_FilterNode.set({
  frequency: 100,
  type: "lowshelf",
  gain: 0,
  rolloff: -24,
});
fx_4_tascam_LowShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_4_tascam_LowShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_4_tascam_LowShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_tascam_LowShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_4_tascam_LowShelf_gain");
  }
});

//SEMI PARAMETRIC
const fx_4_tascam_Mid_SemiParam_FilterNode = new Tone.Filter();
fx_4_tascam_Mid_SemiParam_FilterNode.set({
  frequency: 1000,
  type: "bandpass",
  gain: 0,
  q: 2,
  rolloff: -24,
});

const fx_4_tascam_Mid_SemiParam_gain = document.getElementById("fx_4_tascam_Mid_SemiParam_gain");
const fx_4_tascam_Mid_SemiParam_gain_value = document.getElementById("fx_4_tascam_Mid_SemiParam_gain_value");
const fx_4_tascam_Mid_SemiParam_gain_text = document.getElementById("fx_4_tascam_Mid_SemiParam_gain_text");
const fx_4_tascam_Mid_SemiParam_frequency = document.getElementById("fx_4_tascam_Mid_SemiParam_frequency");
const fx_4_tascam_Mid_SemiParam_frequency_value = document.getElementById("fx_4_tascam_Mid_SemiParam_frequency_value");
const fx_4_tascam_Mid_SemiParam_frequency_text = document.getElementById("fx_4_tascam_Mid_SemiParam_frequency_text");
fx_4_tascam_Mid_SemiParam_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_4_tascam_Mid_SemiParam_FilterNode.gain.value = e.currentTarget.value;
    fx_4_tascam_Mid_SemiParam_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_tascam_Mid_SemiParam_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_4_tascam_Mid_SemiParam_gain");
  }
});
fx_4_tascam_Mid_SemiParam_frequency.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 5000 && e.currentTarget.value >= 250) {
    fx_4_tascam_Mid_SemiParam_FilterNode.frequency.value = e.currentTarget.value;
    fx_4_tascam_Mid_SemiParam_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_tascam_Mid_SemiParam_frequency", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_4_tascam_Mid_SemiParam_frec");
  }
});


//HIGH SHELF
const fx_4_tascam_HighShelf_gain = document.getElementById("fx_4_tascam_HighShelf_gain");
const fx_4_tascam_HighShelf_gain_value = document.getElementById("fx_4_tascam_HighShelf_gain_value");
const fx_4_tascam_HighShelf_gain_text = document.getElementById("fx_4_tascam_HighShelf_gain_text");

const fx_4_tascam_HighShelf_FilterNode = new Tone.Filter();
fx_4_tascam_HighShelf_FilterNode.set({
  frequency: 10000,
  type: "highshelf",
  gain: 0,
  rolloff: -24,
});

fx_4_tascam_HighShelf_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= 100 && e.currentTarget.value >= -100) {
    fx_4_tascam_HighShelf_FilterNode.gain.value = e.currentTarget.value;
    fx_4_tascam_HighShelf_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_tascam_HighShelf_gain", e.currentTarget.value);
  }
  else {
    alert("ELSE fx_4_tascam_HighShelf_gain");
  }
});
//CAMBIAR ESTE SETEO
fx_4_tascam_LowShelf_FilterNode.connect(fx_4_tascam_out_Node);
fx_4_tascam_Mid_SemiParam_FilterNode.connect(fx_4_tascam_out_Node);
fx_4_tascam_HighShelf_FilterNode.connect(fx_4_tascam_out_Node);

fx_4_tascam_in_Node.fan(fx_4_tascam_LowShelf_FilterNode,
  fx_4_tascam_Mid_SemiParam_FilterNode, fx_4_tascam_HighShelf_FilterNode);

//*************************************************************************************
//*************************************************************************************
//*****************   CHANNEL 1 SETTINGS         *****************************************************************
//*************************************************************************************
//*************************************************************************************
const channel_1_filter_eq_bypass_Button = document.getElementById("channel_1_filter_eq_bypass_Button");
const channel_2_filter_eq_bypass_Button = document.getElementById("channel_2_filter_eq_bypass_Button");
const channel_3_filter_eq_bypass_Button = document.getElementById("channel_3_filter_eq_bypass_Button");
const channel_4_filter_eq_bypass_Button = document.getElementById("channel_4_filter_eq_bypass_Button");
const fx_1_filter_eq_bypass_Button = document.getElementById("fx_1_filter_eq_bypass_Button");
const fx_2_filter_eq_bypass_Button = document.getElementById("fx_2_filter_eq_bypass_Button");
const fx_3_filter_eq_bypass_Button = document.getElementById("fx_3_filter_eq_bypass_Button");
const fx_4_filter_eq_bypass_Button = document.getElementById("fx_4_filter_eq_bypass_Button");

//*********************************************************************************** */
//*********************************************************************************** */
//*******    GLOBAL VARs          **************************************************************************** */
//*********************************************************************************** */
//*********************************************************************************** */
var channel_1_filter_eq_type = "empty";
var channel_1_filter_eq_selection = "bypass";
var channel_1_compressor_On_Off_Button_State = "off";
var channel_1_gate_On_Off_Button_State = "off";
var channel_1_limiter_On_Off_Button_State = "off";
var channel_1_fxSend_1_state = "PostEQ";
var channel_1_fxSend_2_state = "PostEQ";
var channel_1_fxSend_3_state = "PostEQ";
var channel_1_fxSend_4_state = "PostEQ";
var loop_1_min = 0;
var loop_1_max = 0;
var is_channel_1_fxSend_1_On = true;
var is_channel_1_fxSend_2_On = true;
var is_channel_1_fxSend_3_On = true;
var is_channel_1_fxSend_4_On = true;
var player_1_scrambler = false;
//--------------------------------
var channel_2_filter_eq_type = "empty";
var channel_2_filter_eq_selection = "bypass";
var channel_2_compressor_On_Off_Button_State = "off";
var channel_2_gate_On_Off_Button_State = "off";
var channel_2_limiter_On_Off_Button_State = "off";
var channel_2_fxSend_1_state = "PostEQ";
var channel_2_fxSend_2_state = "PostEQ";
var channel_2_fxSend_3_state = "PostEQ";
var channel_2_fxSend_4_state = "PostEQ";
var loop_2_min = 0;
var loop_2_max = 0;
var is_channel_2_fxSend_1_On = true;
var is_channel_2_fxSend_2_On = true;
var is_channel_2_fxSend_3_On = true;
var is_channel_2_fxSend_4_On = true;
var player_2_scrambler = false;
//--------------------------------
var channel_3_filter_eq_type = "empty";
var channel_3_filter_eq_selection = "bypass";
var channel_3_compressor_On_Off_Button_State = "off";
var channel_3_gate_On_Off_Button_State = "off";
var channel_3_limiter_On_Off_Button_State = "off";
var channel_3_fxSend_1_state = "PostEQ";
var channel_3_fxSend_2_state = "PostEQ";
var channel_3_fxSend_3_state = "PostEQ";
var channel_3_fxSend_4_state = "PostEQ";
var loop_3_min = 0;
var loop_3_max = 0;
var is_channel_3_fxSend_1_On = true;
var is_channel_3_fxSend_2_On = true;
var is_channel_3_fxSend_3_On = true;
var is_channel_3_fxSend_4_On = true;
var player_3_scrambler = false;
//--------------------------------
var channel_4_filter_eq_type = "empty";
var channel_4_filter_eq_selection = "bypass";
var channel_4_compressor_On_Off_Button_State = "off";
var channel_4_gate_On_Off_Button_State = "off";
var channel_4_limiter_On_Off_Button_State = "off";
var channel_4_fxSend_1_state = "PostEQ";
var channel_4_fxSend_2_state = "PostEQ";
var channel_4_fxSend_3_state = "PostEQ";
var channel_4_fxSend_4_state = "PostEQ";
var loop_4_min = 0;
var loop_4_max = 0;
var is_channel_4_fxSend_1_On = true;
var is_channel_4_fxSend_2_On = true;
var is_channel_4_fxSend_3_On = true;
var is_channel_4_fxSend_4_On = true;
var player_4_scrambler = false;

//--------------------------------
var fx_1_filter_eq_type = "empty";
var fx_1_filter_eq_selection = "bypass";//CAMBIAR LUEGO A "bypass"
var fx_1_compressor_On_Off_Button_State = "off";
var fx_1_gate_On_Off_Button_State = "off";
var fx_1_limiter_On_Off_Button_State = "off";
var fx_1_fxSend_1_state = "PostEQ";
var fx_1_fxSend_2_state = "PostEQ";
var fx_1_fxSend_3_state = "PostEQ";
var fx_1_fxSend_4_state = "PostEQ";
var loop_4_min = 0;
var loop_4_max = 0;
var is_fx_1_fxSend_1_On = true;
var is_fx_1_fxSend_2_On = true;
var is_fx_1_fxSend_3_On = true;
var is_fx_1_fxSend_4_On = true;

//--------------------------------
var fx_2_filter_eq_type = "empty";
var fx_2_filter_eq_selection = "bypass";
var fx_2_compressor_On_Off_Button_State = "off";
var fx_2_gate_On_Off_Button_State = "off";
var fx_2_limiter_On_Off_Button_State = "off";
var fx_2_fxSend_1_state = "PostEQ";
var fx_2_fxSend_2_state = "PostEQ";
var fx_2_fxSend_3_state = "PostEQ";
var fx_2_fxSend_4_state = "PostEQ";
var loop_4_min = 0;
var loop_4_max = 0;
var is_fx_2_fxSend_1_On = true;
var is_fx_2_fxSend_2_On = true;
var is_fx_2_fxSend_3_On = true;
var is_fx_2_fxSend_4_On = true;

//--------------------------------
var fx_3_filter_eq_type = "empty";
var fx_3_filter_eq_selection = "bypass";
var fx_3_compressor_On_Off_Button_State = "off";
var fx_3_gate_On_Off_Button_State = "off";
var fx_3_limiter_On_Off_Button_State = "off";
var fx_3_fxSend_1_state = "PostEQ";
var fx_3_fxSend_2_state = "PostEQ";
var fx_3_fxSend_3_state = "PostEQ";
var fx_3_fxSend_4_state = "PostEQ";
var loop_4_min = 0;
var loop_4_max = 0;
var is_fx_3_fxSend_1_On = true;
var is_fx_3_fxSend_2_On = true;
var is_fx_3_fxSend_3_On = true;
var is_fx_3_fxSend_4_On = true;

//--------------------------------
var fx_4_filter_eq_type = "empty";
var fx_4_filter_eq_selection = "bypass";
var fx_4_compressor_On_Off_Button_State = "off";
var fx_4_gate_On_Off_Button_State = "off";
var fx_4_limiter_On_Off_Button_State = "off";
var fx_4_fxSend_1_state = "PostEQ";
var fx_4_fxSend_2_state = "PostEQ";
var fx_4_fxSend_3_state = "PostEQ";
var fx_4_fxSend_4_state = "PostEQ";
var loop_4_min = 0;
var loop_4_max = 0;
var is_fx_4_fxSend_1_On = true;
var is_fx_4_fxSend_2_On = true;
var is_fx_4_fxSend_3_On = true;
var is_fx_4_fxSend_4_On = true;

//*********************************************************************************** */
//*********************************************************************************** */
//*******    ALL SETTINGS FOR SCREEN BUTTONS, FADERS, NODES TO  START          **************************************************************************** */
//***************     CHANNEL 1       ******************************************************************** */
//*********************************************************************************** */
channel_1_filter_eq_bypass_Button.style.backgroundColor = "green";
channel_1_filter_eq_On_Button.style.backgroundColor = "white";

channel_1_compressor_On_Off_Button.style.backgroundColor = "white";
channel_1_compressor_On_Off_Button.innerText = "Off";

channel_1_gate_On_Off_Button.style.backgroundColor = "white";
channel_1_gate_On_Off_Button.innerText = "Off";

channel_1_limiter_On_Off_Button.style.backgroundColor = "white";
channel_1_limiter_On_Off_Button.innerText = "Off";

channel_1_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
channel_1_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
channel_1_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
channel_1_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

channel_2_filter_eq_bypass_Button.style.backgroundColor = "green";
channel_2_filter_eq_On_Button.style.backgroundColor = "white";

channel_2_compressor_On_Off_Button.style.backgroundColor = "white";
channel_2_compressor_On_Off_Button.innerText = "Off";

channel_2_gate_On_Off_Button.style.backgroundColor = "white";
channel_2_gate_On_Off_Button.innerText = "Off";

channel_2_limiter_On_Off_Button.style.backgroundColor = "white";
channel_2_limiter_On_Off_Button.innerText = "Off";

channel_2_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
channel_2_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
channel_2_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
channel_2_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

channel_3_filter_eq_bypass_Button.style.backgroundColor = "green";
channel_3_filter_eq_On_Button.style.backgroundColor = "white";

channel_3_compressor_On_Off_Button.style.backgroundColor = "white";
channel_3_compressor_On_Off_Button.innerText = "Off";

channel_3_gate_On_Off_Button.style.backgroundColor = "white";
channel_3_gate_On_Off_Button.innerText = "Off";

channel_3_limiter_On_Off_Button.style.backgroundColor = "white";
channel_3_limiter_On_Off_Button.innerText = "Off";

channel_3_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
channel_3_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
channel_3_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
channel_3_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

channel_4_filter_eq_bypass_Button.style.backgroundColor = "green";
channel_4_filter_eq_On_Button.style.backgroundColor = "white";

channel_4_compressor_On_Off_Button.style.backgroundColor = "white";
channel_4_compressor_On_Off_Button.innerText = "Off";

channel_4_gate_On_Off_Button.style.backgroundColor = "white";
channel_4_gate_On_Off_Button.innerText = "Off";

channel_4_limiter_On_Off_Button.style.backgroundColor = "white";
channel_4_limiter_On_Off_Button.innerText = "Off";

channel_4_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
channel_4_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
channel_4_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
channel_4_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

fx_1_filter_eq_bypass_Button.style.backgroundColor = "green";
fx_1_filter_eq_On_Button.style.backgroundColor = "white";

fx_1_compressor_On_Off_Button.style.backgroundColor = "white";
fx_1_compressor_On_Off_Button.innerText = "Off";

fx_1_gate_On_Off_Button.style.backgroundColor = "white";
fx_1_gate_On_Off_Button.innerText = "Off";


fx_1_limiter_On_Off_Button.style.backgroundColor = "white";
fx_1_limiter_On_Off_Button.innerText = "Off";

fx_1_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
fx_1_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
fx_1_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
fx_1_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

fx_2_filter_eq_bypass_Button.style.backgroundColor = "green";
fx_2_filter_eq_On_Button.style.backgroundColor = "white";

fx_2_compressor_On_Off_Button.style.backgroundColor = "white";
fx_2_compressor_On_Off_Button.innerText = "Off";

fx_2_gate_On_Off_Button.style.backgroundColor = "white";
fx_2_gate_On_Off_Button.innerText = "Off";

fx_2_limiter_On_Off_Button.style.backgroundColor = "white";
fx_2_limiter_On_Off_Button.innerText = "Off";

fx_2_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
fx_2_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
fx_2_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
fx_2_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

fx_3_filter_eq_bypass_Button.style.backgroundColor = "green";
fx_3_filter_eq_On_Button.style.backgroundColor = "white";

fx_3_compressor_On_Off_Button.style.backgroundColor = "white";
fx_3_compressor_On_Off_Button.innerText = "Off";

fx_3_gate_On_Off_Button.style.backgroundColor = "white";
fx_3_gate_On_Off_Button.innerText = "Off";

fx_3_limiter_On_Off_Button.style.backgroundColor = "white";
fx_3_limiter_On_Off_Button.innerText = "Off";

fx_3_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
fx_3_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
fx_3_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
fx_3_fxSend_4_post_EQ_Button.style.backgroundColor = "green";

fx_4_filter_eq_bypass_Button.style.backgroundColor = "green";
fx_4_filter_eq_On_Button.style.backgroundColor = "white";

fx_4_compressor_On_Off_Button.style.backgroundColor = "white";
fx_4_compressor_On_Off_Button.innerText = "Off";

fx_4_gate_On_Off_Button.style.backgroundColor = "white";
fx_4_gate_On_Off_Button.innerText = "Off";

fx_4_limiter_On_Off_Button.style.backgroundColor = "white";
fx_4_limiter_On_Off_Button.innerText = "Off";

fx_4_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
fx_4_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
fx_4_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
fx_4_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
//*************************************************************************************
//*************************************************************************************
//***********    Apaga visual todos los EQ     ****************************************
//*************************************************************************************
//*************************************************************************************
//channel 1
channel_1_allpass_controls_div.style.display = "none";
channel_1_shelf_controls_div.style.display = "none";
channel_1_peaking_controls_div.style.display = "none";
channel_1_tascam_424_controls_div.style.display = "none";
channel_1_eq3_controls_div.style.display = "none";
channel_1_empty_controls_div.style.display = "none";
channel_1_bypass_controls_div.style.display = "block";

//channel 2
channel_2_allpass_controls_div.style.display = "none";
channel_2_shelf_controls_div.style.display = "none";
channel_2_peaking_controls_div.style.display = "none";
channel_2_tascam_424_controls_div.style.display = "none";
channel_2_eq3_controls_div.style.display = "none";
channel_2_empty_controls_div.style.display = "none";
channel_2_bypass_controls_div.style.display = "block";

//channel 3
channel_3_allpass_controls_div.style.display = "none";
channel_3_shelf_controls_div.style.display = "none";
channel_3_peaking_controls_div.style.display = "none";
channel_3_tascam_424_controls_div.style.display = "none";
channel_3_eq3_controls_div.style.display = "none";
channel_3_empty_controls_div.style.display = "none";
channel_3_bypass_controls_div.style.display = "block";

//channel 4
channel_4_allpass_controls_div.style.display = "none";
channel_4_shelf_controls_div.style.display = "none";
channel_4_peaking_controls_div.style.display = "none";
channel_4_tascam_424_controls_div.style.display = "none";
channel_4_eq3_controls_div.style.display = "none";
channel_4_empty_controls_div.style.display = "none";
channel_4_bypass_controls_div.style.display = "block";

//*************************************************************************************
//*************************************************************************************
//********     NODE CONSTRUCTION    **************************************************************
//*************************************************************************************
//*************************************************************************************
//NODE CONSTRUCTION

const recorderNode = new Tone.Recorder();
recorderNode.debug = true;
//alert(recorderNode.supported); TRY CATCH

const master_volume = document.getElementById("master_volume");
const master_volume_value = document.getElementById("master_volume_value");
const masterVolumeNode = new Tone.Volume(0).toDestination();//ESTO VA
master_volume.value = 0;
master_volume_value.innerHTML = 0;
masterVolumeNode.fan(recorderNode);
master_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    masterVolumeNode.volume.value = -100;
    master_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "master_volume", -100);
  }
  else {
    masterVolumeNode.volume.value = e.currentTarget.value;
    master_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "master_volume", e.currentTarget.value);
  }
});

master_volume.ondblclick = function () {
  masterVolumeNode.volume.value = 0;
  master_volume_value.innerHTML = 0;
  master_volume.value = 0;
  mixEvent.logIntoListaAction(Tone.now(), "master_volume", 0);
};
//ESTO SIRVE O NO????
/*
const audio = document.querySelector('audio_tag_test_load_user_files');
const actx = Tone.context;
const dest = actx.createMediaStreamDestination();
const recorder = new MediaRecorder(dest.stream);
*/
//---------------------------------------------------------------------
//---------------------------------------------------------------------
//NOISE (SOURCE)

const noise_1_Node = new Tone.Noise()
noise_1_Node.volume.value = -100;

const noise_1_rms_value = document.getElementById("noise_1_rms_value");

const noise_1_playButton = document.getElementById("noise_1_playButton");
const noise_1_stopButton = document.getElementById("noise_1_stopButton");
const noise_1_muteButton = document.getElementById("noise_1_muteButton");
const noise_1_soloButton = document.getElementById("noise_1_soloButton");
noise_1_muteButton.mute = false;

const noise_1_volume = document.getElementById("noise_1_volume");
const noise_1_volume_value = document.getElementById("noise_1_volume_value");
const noise_1_volume_rampTo_gain = document.getElementById("noise_1_volume_rampTo_gain");
const noise_1_volume_rampTo_gain_value = document.getElementById("noise_1_volume_rampTo_gain_value");
const noise_1_volume_rampTo_time = document.getElementById("noise_1_volume_rampTo_time");
const noise_1_volume_rampTo_time_value = document.getElementById("noise_1_volume_rampTo_time_value");
const noise_1_volume_rampTo_send_Button = document.getElementById("noise_1_volume_rampTo_send_Button");
const noise_1_playback_rate = document.getElementById("noise_1_playback_rate");
const noise_1_playback_rate_value = document.getElementById("noise_1_playback_rate_value");

const noise_1_fadeIn = document.getElementById("noise_1_fadeIn");
const noise_1_fadeOut = document.getElementById("noise_1_fadeOut");

const noise_1_select_type = document.getElementById("noise_1_select_type");

noise_1_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noise_1_Node.volume.value = -100;
    noise_1_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_volume", -100);
  }
  else {
    noise_1_Node.volume.value = e.currentTarget.value;
    noise_1_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_volume", e.currentTarget.value);
  }
});

noise_1_playback_rate.addEventListener("change", function (e) {
  noise_1_Node.playbackRate = e.currentTarget.value;
  noise_1_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "noise_1_playback_rate", e.currentTarget.value);
});

noise_1_select_type.addEventListener("change", function (e) {
  noise_1_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "noise_1_select_type", e.currentTarget.value);
});

noise_1_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_1_Node.fadeIn = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "noise_1_fadeIn", e.currentTarget.value);
  }
  else {
    alert("Else noise_1_Node.fadeIn_1");
  }
});

noise_1_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_1_Node.fadeOut = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "noise_1_fadeOut", e.currentTarget.value);
  }
  else {
    alert("Else noise_1_Node.fadeOut");
  }
});

const noise_1_div = document.getElementById("noise_1_div");
noise_1_div.style.display = "none";
/**/

//*************************************************************************************
//*************************************************************************************
//********     PLAYER 1 SONG DATA   **************************************************************
//*************************************************************************************
//*************************************************************************************
//player_1
const player_1_songName = document.getElementById("player_1_songName");
const player_1_duration_value = document.getElementById("player_1_duration_value");
const player_1_duration_text = document.getElementById("player_1_duration_text");

//player_2
const player_2_songName = document.getElementById("player_2_songName");
const player_2_duration_value = document.getElementById("player_2_duration_value");
const player_2_duration_text = document.getElementById("player_2_duration_text");

//player_3
const player_3_songName = document.getElementById("player_3_songName");
const player_3_duration_value = document.getElementById("player_3_duration_value");
const player_3_duration_text = document.getElementById("player_3_duration_text");

//player_4
const player_4_songName = document.getElementById("player_4_songName");
const player_4_duration_value = document.getElementById("player_4_duration_value");
const player_4_duration_text = document.getElementById("player_4_duration_text");

//*************************************************************************************
//*************************************************************************************
//********     CHANNEL 1-4 SONG DATA   **************************************************************
//*************************************************************************************
//*************************************************************************************

//channel_1
const channel_1_songName = document.getElementById("channel_1_songName");
const channel_1_duration_text = document.getElementById("channel_1_duration_text");

//channel_2
const channel_2_songName = document.getElementById("channel_2_songName");
const channel_2_duration_value = document.getElementById("channel_2_duration_value");
const channel_2_duration_text = document.getElementById("channel_2_duration_text");

//channel_3
const channel_3_songName = document.getElementById("channel_3_songName");
const channel_3_duration_value = document.getElementById("channel_3_duration_value");
const channel_3_duration_text = document.getElementById("channel_3_duration_text");

//channel_4
const channel_4_songName = document.getElementById("channel_4_songName");
const channel_4_duration_value = document.getElementById("channel_4_duration_value");
const channel_4_duration_text = document.getElementById("channel_4_duration_text");

//*************************************************************************************
//*************************************************************************************
//********     PLAYER 1 PLAYER CONTROLS   **************************************************************
//*************************************************************************************
//*************************************************************************************
//PLAYER 1

const player_1_rms_meter_inner = document.getElementById("player_1_rms_meter_inner");

const player_1_loadButton = document.getElementById("player_1_loadButton");
const player_1_load_text = document.getElementById("player_1_load_text");

const player_1_scramblerButton = document.getElementById("player_1_scramblerButton");
const player_1_scrambler_checkbox = document.getElementById("player_1_scrambler_checkbox");
player_1_scrambler_checkbox.addEventListener("change", function () {
  if (player_1_scrambler_checkbox.checked) {
    player_1_scrambler = true;
  }
  else {
    player_1_scrambler = false;
  }
  mixEvent.logIntoListaAction(Tone.now(), "player_1_scrambler_checkbox", player_1_scrambler);
});

const player_1_playButton = document.getElementById("player_1_playButton");
const player_1_muteButton = document.getElementById("player_1_muteButton");
const player_1_soloButton = document.getElementById("player_1_soloButton");
const player_1_stopButton = document.getElementById("player_1_stopButton");

const player_1_volume = document.getElementById("player_1_volume");
const player_1_volume_value = document.getElementById("player_1_volume_value");
player_1_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    player_1_Node.volume.value = -100;
    player_1_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "player_1_volume", -100);
  }
  else {
    player_1_Node.volume.value = e.currentTarget.value;
    player_1_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "player_1_volume", e.currentTarget.value);
  }
});

player_1_volume.ondblclick = function () {
  player_1_Node.volume.value = 0;
  player_1_volume_value.innerHTML = 0;
  player_1_volume.value = 0;
  mixEvent.logIntoListaNewValue(Tone.now(), "player_1_volume", 0);
};

const player_1_playback_rate = document.getElementById("player_1_playback_rate");
const player_1_playback_rate_value = document.getElementById("player_1_playback_rate_value");
player_1_playback_rate.addEventListener("change", function (e) {
  player_1_Node.playbackRate = `${e.currentTarget.value}`;
  player_1_playback_rate_value.innerHTML = Math.round(`${e.currentTarget.value}` * 100);
  mixEvent.logIntoListaNewValue(Tone.now(), "player_1_playback_rate", e.currentTarget.value);
});

const player_1_loop_checkbox = document.getElementById("player_1_loop_checkbox");
player_1_loop_checkbox.addEventListener("change", function () {
  if (player_1_loop_checkbox.checked) {
    player_1_Node.loop = true;
  }
  else {
    player_1_Node.loop = false;
  }
  mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", player_1_Node.loop);
});

const player_1_autoplay_checkbox = document.getElementById("player_1_autoplay_checkbox");
player_1_autoplay_checkbox.addEventListener("change", function () {
  if (player_1_autoplay_checkbox.checked) {
    player_1_Node.autoplay = true;
  }
  else {
    player_1_Node.autoplay = false;
  }
  mixEvent.logIntoListaAction(Tone.now(), "player_1_autoplay_checkbox", player_1_Node.autoplay);
});

const player_1_reverse_checkbox = document.getElementById("player_1_reverse_checkbox");
player_1_reverse_checkbox.addEventListener("change", function () {
  if (player_1_reverse_checkbox.checked) {
    player_1_Node.reverse = true;
  }
  else {
    player_1_Node.reverse = false;
  }
  mixEvent.logIntoListaAction(Tone.now(), "player_1_reverse_checkbox", player_1_Node.reverse);
});

const player_1_loop_start = document.getElementById("player_1_loop_start");
player_1_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300) {
    player_1_Node.loopStart = e.currentTarget.value;
    mixEvent.logIntoListaNewValue(Tone.now(), "player_1_loop_start", e.currentTarget.value);
  }
  else {
    alert("Else player_1_Node.loopStart");
  }
});

const player_1_loop_end = document.getElementById("player_1_loop_end");
player_1_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300 && e.currentTarget.value > player_1_Node.loopStart) {
    player_1_Node.loopEnd = e.currentTarget.value;
    mixEvent.logIntoListaNewValue(Tone.now(), "player_1_loop_end", e.currentTarget.value);
  }
  else {
    alert("Else player_1_Node.loopEnd");
  }
});

const player_1_fadeIn = document.getElementById("player_1_fadeIn");
player_1_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_1_Node.fadeIn = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_fadeIn", e.currentTarget.value);
  }
  else {
    alert("Else player_1_Node.fadeIn_1");
  }
});

const player_1_fadeOut = document.getElementById("player_1_fadeOut");
player_1_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_1_Node.fadeOut = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_fadeOut", e.currentTarget.value);
  }
  else {
    alert("Else player_1_Node.fadeOut");
  }
});

const player_1_loop_options_div = document.getElementById("player_1_loop_options_div");
player_1_loop_options_div.style.display = "block";

//IF LOOP=TRUE; LOOP_OPTIONS_DIV = BLOCK -- FADE_DIV = NONE
//ELSE LOOP=FALSE; LOOP_OPTIONS_DIV = NONE -- FADE_DIV = BLOCK 
const player_1_fade_options_div = document.getElementById("player_1_fade_options_div");
player_1_fade_options_div.style.display = "none";

const player_1_div = document.getElementById("player_1_div");
player_1_div.style.display = "none";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
//GRAIN PLAYER 1
const grainPlayer_1_Node = new Tone.GrainPlayer();
const grainPlayer_1_rmsNode = new Tone.Meter(0);
grainPlayer_1_Node.fan(grainPlayer_1_rmsNode);
grainPlayer_1_Node.autoplay = false;//POR AHORA ACA
grainPlayer_1_Node.loop = true;//POR AHORA ACA

const grainPlayer_1_rms_value = document.getElementById("grainPlayer_1_rms_value");
const grainPlayer_1_songName = document.getElementById("grainPlayer_1_songName");
const grainPlayer_1_duration_text = document.getElementById("grainPlayer_1_duration_text");
const grainPlayer_1_duration_value = document.getElementById("grainPlayer_1_duration_value");

const grainPlayer_1_playButton = document.getElementById("grainPlayer_1_playButton");
const grainPlayer_1_stopButton = document.getElementById("grainPlayer_1_stopButton");
const grainPlayer_1_muteButton = document.getElementById("grainPlayer_1_muteButton");
const grainPlayer_1_soloButton = document.getElementById("grainPlayer_1_soloButton");

const grainPlayer_1_volume = document.getElementById("grainPlayer_1_volume");
const grainPlayer_1_volume_value = document.getElementById("grainPlayer_1_volume_value");
const grainrampTo_newValue = document.getElementById("grainrampTo_newValue");
const grainrampTo_newValue_value = document.getElementById("grainrampTo_newValue_value");
const grainPlayer_1_volume_rampTo_time = document.getElementById("grainPlayer_1_volume_rampTo_time");
const grainPlayer_1_volume_rampTo_time_value = document.getElementById("grainPlayer_1_volume_rampTo_time_value");

const grainPlayer_1_pan = document.getElementById("grainPlayer_1_pan");
const grainPlayer_1_pan_value = document.getElementById("grainPlayer_1_pan_value");

const grainPlayer_1_grainSize = document.getElementById("grainPlayer_1_grainSize");
const grainPlayer_1_grainSize_value = document.getElementById("grainPlayer_1_grainSize_value");

const grainPlayer_1_overlap = document.getElementById("grainPlayer_1_overlap");
const grainPlayer_1_overlap_value = document.getElementById("grainPlayer_1_overlap_value");

const grainPlayer_1_playback_rate = document.getElementById("grainPlayer_1_playback_rate");
const grainPlayer_1_playback_rate_value = document.getElementById("grainPlayer_1_playback_rate_value");

const grainPlayer_1_detune = document.getElementById("grainPlayer_1_detune");
const grainPlayer_1_detune_value = document.getElementById("grainPlayer_1_detune_value");

const grainPlayer_1_loop_checkbox = document.getElementById("grainPlayer_1_loop_checkbox");
grainPlayer_1_loop_checkbox.checked = true;//POR AHORA ACA
const grainPlayer_1_autoplay_checkbox = document.getElementById("grainPlayer_1_autoplay_checkbox");
const grainPlayer_1_reverse_checkbox = document.getElementById("grainPlayer_1_reverse_checkbox");
const grainPlayer_1_loop_start = document.getElementById("grainPlayer_1_loop_start");
const grainPlayer_1_loop_end = document.getElementById("grainPlayer_1_loop_end");

grainPlayer_1_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    grainPlayer_1_Node.volume.value = -100;
    grainPlayer_1_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_1_volume", -100);
  }
  else {
    grainPlayer_1_Node.volume.value = e.currentTarget.value;
    grainPlayer_1_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_1_volume", e.currentTarget.value);
  }
});

grainPlayer_1_grainSize.addEventListener("change", function (e) {
  grainPlayer_1_Node.grainSize = e.currentTarget.value;
  grainPlayer_1_grainSize_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_grainSize", e.currentTarget.value);
});

grainPlayer_1_overlap.addEventListener("change", function (e) {
  grainPlayer_1_Node.overlap = e.currentTarget.value;
  grainPlayer_1_overlap_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_overlap", e.currentTarget.value);

});

grainPlayer_1_playback_rate.addEventListener("change", function (e) {
  grainPlayer_1_Node.playbackRate = e.currentTarget.value;
  grainPlayer_1_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_playback_rate", e.currentTarget.value);
});

grainPlayer_1_detune.addEventListener("change", function (e) {
  grainPlayer_1_Node.detune = e.currentTarget.value;
  grainPlayer_1_detune_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_detune", e.currentTarget.value);
});

grainPlayer_1_loop_checkbox.addEventListener("change", function () {
  if (grainPlayer_1_loop_checkbox.checked) {
    grainPlayer_1_Node.loop = true;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", true);
  }
  else {
    grainPlayer_1_Node.loop = false;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", false);
  }
});
/**/
grainPlayer_1_reverse_checkbox.addEventListener("change", function () {
  if (grainPlayer_1_reverse_checkbox.checked) {
    grainPlayer_1_Node.reverse = true;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_reverse_checkbox", true);
  }
  else {
    grainPlayer_1_Node.reverse = false;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_reverse_checkbox", false);
  }
});

grainPlayer_1_autoplay_checkbox.addEventListener("change", function () {
  if (grainPlayer_1_autoplay_checkbox.checked) {
    grainPlayer_1_Node.autoplay = true;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_autoplay_checkbox", true);
  }
  else {
    grainPlayer_1_Node.autoplay = false;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_autoplay_checkbox", false);
  }
});
/**/

grainPlayer_1_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_1_Node.loopStart = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_loop_start", e.currentTarget.value);
  }
  else {
    alert("Else grainPlayer_1_Node.loopStart");
  }
});

grainPlayer_1_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_1_Node.loopEnd = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_loop_end", e.currentTarget.value);
  }
  else {
    alert("else grainPlayer_1_Node.loopStart");
  }
});

const grainPlayer_1_div = document.getElementById("grainPlayer_1_div");
grainPlayer_1_div.style.display = "none";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
//GRAIN PLAYER
const grainPlayer_2_Node = new Tone.GrainPlayer()
const grainPlayer_2_rmsNode = new Tone.Meter(0);
grainPlayer_2_Node.fan(grainPlayer_2_rmsNode);
grainPlayer_2_Node.autoplay = false;
grainPlayer_2_Node.loop = true;

const grainPlayer_2_rms_value = document.getElementById("grainPlayer_2_rms_value");
const grainPlayer_2_songName = document.getElementById("grainPlayer_2_songName");
const grainPlayer_2_duration_text = document.getElementById("grainPlayer_2_duration_text");
const grainPlayer_2_duration_value = document.getElementById("grainPlayer_2_duration_value");

const grainPlayer_2_playButton = document.getElementById("grainPlayer_2_playButton");
const grainPlayer_2_stopButton = document.getElementById("grainPlayer_2_stopButton");
const grainPlayer_2_muteButton = document.getElementById("grainPlayer_2_muteButton");
const grainPlayer_2_soloButton = document.getElementById("grainPlayer_2_soloButton");

const grainPlayer_2_volume = document.getElementById("grainPlayer_2_volume");
const grainPlayer_2_volume_value = document.getElementById("grainPlayer_2_volume_value");
const grainPlayer_2_volume_rampTo_gain = document.getElementById("grainPlayer_2_volume_rampTo_gain");
const grainPlayer_2_volume_rampTo_gain_value = document.getElementById("grainPlayer_2_volume_rampTo_gain_value");
const grainPlayer_2_volume_rampTo_time = document.getElementById("grainPlayer_2_volume_rampTo_time");
const grainPlayer_2_volume_rampTo_time_value = document.getElementById("grainPlayer_2_volume_rampTo_time_value");

const grainPlayer_2_pan = document.getElementById("grainPlayer_2_pan");
const grainPlayer_2_pan_value = document.getElementById("grainPlayer_2_pan_value");

const grainPlayer_2_grainSize = document.getElementById("grainPlayer_2_grainSize");
const grainPlayer_2_grainSize_value = document.getElementById("grainPlayer_2_grainSize_value");

const grainPlayer_2_overlap = document.getElementById("grainPlayer_2_overlap");
const grainPlayer_2_overlap_value = document.getElementById("grainPlayer_2_overlap_value");

const grainPlayer_2_playback_rate = document.getElementById("grainPlayer_2_playback_rate");
const grainPlayer_2_playback_rate_value = document.getElementById("grainPlayer_2_playback_rate_value");

const grainPlayer_2_detune = document.getElementById("grainPlayer_2_detune");
const grainPlayer_2_detune_value = document.getElementById("grainPlayer_2_detune_value");

const grainPlayer_2_loop_checkbox = document.getElementById("grainPlayer_2_loop_checkbox");
grainPlayer_2_loop_checkbox.checked = true;//POR AHORA ACA
const grainPlayer_2_autoplay_checkbox = document.getElementById("grainPlayer_2_autoplay_checkbox");
const grainPlayer_2_reverse_checkbox = document.getElementById("grainPlayer_2_reverse_checkbox");
const grainPlayer_2_loop_start = document.getElementById("grainPlayer_2_loop_start");
const grainPlayer_2_loop_end = document.getElementById("grainPlayer_2_loop_end");

grainPlayer_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    grainPlayer_2_Node.volume.value = -100;
    grainPlayer_2_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_2_volume", -100);
  }
  else {
    grainPlayer_2_Node.volume.value = e.currentTarget.value;
    grainPlayer_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_2_volume", e.currentTarget.value);
  }
});

grainPlayer_2_grainSize.addEventListener("change", function (e) {
  grainPlayer_2_Node.grainSize = e.currentTarget.value;
  grainPlayer_2_grainSize_value.innerHTML = `${e.currentTarget.value}`;
});

grainPlayer_2_overlap.addEventListener("change", function (e) {

  grainPlayer_2_Node.overlap = e.currentTarget.value;
  grainPlayer_2_overlap_value.innerHTML = `${e.currentTarget.value}`;
});

grainPlayer_2_playback_rate.addEventListener("change", function (e) {

  grainPlayer_2_Node.playbackRate = e.currentTarget.value;
  grainPlayer_2_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
});

grainPlayer_2_detune.addEventListener("change", function (e) {

  grainPlayer_2_Node.detune = e.currentTarget.value;
  grainPlayer_2_detune_value.innerHTML = `${e.currentTarget.value}`;
});

grainPlayer_2_loop_checkbox.addEventListener("change", function () {
  if (grainPlayer_2_loop_checkbox.checked) { grainPlayer_2_Node.loop = true; }
  else { grainPlayer_2_Node.loop = false; }
});
/**/
grainPlayer_2_reverse_checkbox.addEventListener("change", function () {
  if (grainPlayer_2_reverse_checkbox.checked) { grainPlayer_2_Node.reverse = true; }
  else { grainPlayer_2_Node.reverse = false; }
});

grainPlayer_2_autoplay_checkbox.addEventListener("change", function () {
  if (grainPlayer_2_autoplay_checkbox.checked) { grainPlayer_2_Node.autoplay = true; }
  else { grainPlayer_2_Node.autoplay = false; }
});
/**/

grainPlayer_2_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_2_Node.loopStart = e.currentTarget.value;
  }
  else {
    alert("errororororor grainPlayer_2_Node.loopStart");
  }
});

grainPlayer_2_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_2_Node.loopEnd = e.currentTarget.value;
  }
  else {
    alert("errororororor grainPlayer_2_Node.loopStart");
  }
});

const grainPlayer_2_div = document.getElementById("grainPlayer_2_div");
grainPlayer_2_div.style.display = "none";
//************************************************************************
//************************************************************************
//GRAIN PLAYER 3
const grainPlayer_3_Node = new Tone.GrainPlayer();
const grainPlayer_3_rmsNode = new Tone.Meter(0);
grainPlayer_3_Node.fan(grainPlayer_3_rmsNode);
grainPlayer_3_Node.autoplay = false;
grainPlayer_3_Node.loop = true;

const grainPlayer_3_rms_value = document.getElementById("grainPlayer_3_rms_value");
const grainPlayer_3_songName = document.getElementById("grainPlayer_3_songName");
const grainPlayer_3_duration_text = document.getElementById("grainPlayer_3_duration_text");
const grainPlayer_3_duration_value = document.getElementById("grainPlayer_3_duration_value");

const grainPlayer_3_playButton = document.getElementById("grainPlayer_3_playButton");
const grainPlayer_3_stopButton = document.getElementById("grainPlayer_3_stopButton");
const grainPlayer_3_muteButton = document.getElementById("grainPlayer_3_muteButton");
const grainPlayer_3_soloButton = document.getElementById("grainPlayer_3_soloButton");

const grainPlayer_3_volume = document.getElementById("grainPlayer_3_volume");
const grainPlayer_3_volume_value = document.getElementById("grainPlayer_3_volume_value");
const grainPlayer_3_volume_rampTo_gain = document.getElementById("grainPlayer_3_volume_rampTo_gain");
const grainPlayer_3_volume_rampTo_gain_value = document.getElementById("grainPlayer_3_volume_rampTo_gain_value");
const grainPlayer_3_volume_rampTo_time = document.getElementById("grainPlayer_3_volume_rampTo_time");
const grainPlayer_3_volume_rampTo_time_value = document.getElementById("grainPlayer_3_volume_rampTo_time_value");

const grainPlayer_3_pan = document.getElementById("grainPlayer_3_pan");
const grainPlayer_3_pan_value = document.getElementById("grainPlayer_3_pan_value");

const grainPlayer_3_grainSize = document.getElementById("grainPlayer_3_grainSize");
const grainPlayer_3_grainSize_value = document.getElementById("grainPlayer_3_grainSize_value");

const grainPlayer_3_overlap = document.getElementById("grainPlayer_3_overlap");
const grainPlayer_3_overlap_value = document.getElementById("grainPlayer_3_overlap_value");

const grainPlayer_3_playback_rate = document.getElementById("grainPlayer_3_playback_rate");
const grainPlayer_3_playback_rate_value = document.getElementById("grainPlayer_3_playback_rate_value");

const grainPlayer_3_detune = document.getElementById("grainPlayer_3_detune");
const grainPlayer_3_detune_value = document.getElementById("grainPlayer_3_detune_value");

const grainPlayer_3_loop_checkbox = document.getElementById("grainPlayer_3_loop_checkbox");
grainPlayer_3_loop_checkbox.checked = true;//POR AHORA ACA
const grainPlayer_3_autoplay_checkbox = document.getElementById("grainPlayer_3_autoplay_checkbox");
const grainPlayer_3_reverse_checkbox = document.getElementById("grainPlayer_3_reverse_checkbox");
const grainPlayer_3_loop_start = document.getElementById("grainPlayer_3_loop_start");
const grainPlayer_3_loop_end = document.getElementById("grainPlayer_3_loop_end");

grainPlayer_3_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    grainPlayer_3_Node.volume.value = -100;
    grainPlayer_3_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_3_volume", -100);
  }
  else {
    grainPlayer_3_Node.volume.value = e.currentTarget.value;
    grainPlayer_3_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_3_volume", e.currentTarget.value);
  }
});

grainPlayer_3_grainSize.addEventListener("change", function (e) {
  grainPlayer_3_Node.grainSize = e.currentTarget.value;
  grainPlayer_3_grainSize_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_grainSize", e.currentTarget.value);
});

grainPlayer_3_overlap.addEventListener("change", function (e) {
  grainPlayer_3_Node.overlap = e.currentTarget.value;
  grainPlayer_3_overlap_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_overlap", e.currentTarget.value);

});

grainPlayer_3_playback_rate.addEventListener("change", function (e) {
  grainPlayer_3_Node.playbackRate = e.currentTarget.value;
  grainPlayer_3_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_playback_rate", e.currentTarget.value);
});

grainPlayer_3_detune.addEventListener("change", function (e) {
  grainPlayer_3_Node.detune = e.currentTarget.value;
  grainPlayer_3_detune_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_detune", e.currentTarget.value);
});

grainPlayer_3_loop_checkbox.addEventListener("change", function () {
  if (grainPlayer_3_loop_checkbox.checked) {
    grainPlayer_3_Node.loop = true;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", true);
  }
  else {
    grainPlayer_3_Node.loop = false;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", false);
  }
});
/**/
grainPlayer_3_reverse_checkbox.addEventListener("change", function () {
  if (grainPlayer_3_reverse_checkbox.checked) {
    grainPlayer_3_Node.reverse = true;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_reverse_checkbox", true);
  }
  else {
    grainPlayer_3_Node.reverse = false;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_reverse_checkbox", false);
  }
});

grainPlayer_3_autoplay_checkbox.addEventListener("change", function () {
  if (grainPlayer_3_autoplay_checkbox.checked) {
    grainPlayer_3_Node.autoplay = true;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_autoplay_checkbox", true);
  }
  else {
    grainPlayer_3_Node.autoplay = false;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_autoplay_checkbox", false);
  }
});
/**/
grainPlayer_3_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_3_Node.loopStart = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_loop_start", e.currentTarget.value);
  }
  else {
    alert("Else grainPlayer_3_Node.loopStart");
  }
});

grainPlayer_3_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_3_Node.loopEnd = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_loop_end", e.currentTarget.value);
  }
  else {
    alert("else grainPlayer_3_Node.loopStart");
  }
});

const grainPlayer_3_div = document.getElementById("grainPlayer_3_div");
grainPlayer_3_div.style.display = "none";
//************************************************************************
//************************************************************************
//---------------------------------------------------------------------
//---------------------------------------------------------------------
//GRAIN PLAYER 4
const grainPlayer_4_Node = new Tone.GrainPlayer();
const grainPlayer_4_rmsNode = new Tone.Meter(0);
grainPlayer_4_Node.fan(grainPlayer_4_rmsNode);
grainPlayer_4_Node.autoplay = false;
grainPlayer_4_Node.loop = true;

const grainPlayer_4_rms_value = document.getElementById("grainPlayer_4_rms_value");
const grainPlayer_4_songName = document.getElementById("grainPlayer_4_songName");
const grainPlayer_4_duration_text = document.getElementById("grainPlayer_4_duration_text");
const grainPlayer_4_duration_value = document.getElementById("grainPlayer_4_duration_value");

const grainPlayer_4_playButton = document.getElementById("grainPlayer_4_playButton");
const grainPlayer_4_stopButton = document.getElementById("grainPlayer_4_stopButton");
const grainPlayer_4_muteButton = document.getElementById("grainPlayer_4_muteButton");
const grainPlayer_4_soloButton = document.getElementById("grainPlayer_4_soloButton");

const grainPlayer_4_volume = document.getElementById("grainPlayer_4_volume");
const grainPlayer_4_volume_value = document.getElementById("grainPlayer_4_volume_value");
const grainPlayer_4_volume_rampTo_gain = document.getElementById("grainPlayer_4_volume_rampTo_gain");
const grainPlayer_4_volume_rampTo_gain_value = document.getElementById("grainPlayer_4_volume_rampTo_gain_value");
const grainPlayer_4_volume_rampTo_time = document.getElementById("grainPlayer_4_volume_rampTo_time");
const grainPlayer_4_volume_rampTo_time_value = document.getElementById("grainPlayer_4_volume_rampTo_time_value");

const grainPlayer_4_pan = document.getElementById("grainPlayer_4_pan");
const grainPlayer_4_pan_value = document.getElementById("grainPlayer_4_pan_value");

const grainPlayer_4_grainSize = document.getElementById("grainPlayer_4_grainSize");
const grainPlayer_4_grainSize_value = document.getElementById("grainPlayer_4_grainSize_value");

const grainPlayer_4_overlap = document.getElementById("grainPlayer_4_overlap");
const grainPlayer_4_overlap_value = document.getElementById("grainPlayer_4_overlap_value");

const grainPlayer_4_playback_rate = document.getElementById("grainPlayer_4_playback_rate");
const grainPlayer_4_playback_rate_value = document.getElementById("grainPlayer_4_playback_rate_value");

const grainPlayer_4_detune = document.getElementById("grainPlayer_4_detune");
const grainPlayer_4_detune_value = document.getElementById("grainPlayer_4_detune_value");

const grainPlayer_4_loop_checkbox = document.getElementById("grainPlayer_4_loop_checkbox");
grainPlayer_4_loop_checkbox.checked = true;
const grainPlayer_4_autoplay_checkbox = document.getElementById("grainPlayer_4_autoplay_checkbox");
const grainPlayer_4_reverse_checkbox = document.getElementById("grainPlayer_4_reverse_checkbox");
const grainPlayer_4_loop_start = document.getElementById("grainPlayer_4_loop_start");
const grainPlayer_4_loop_end = document.getElementById("grainPlayer_4_loop_end");

grainPlayer_4_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    grainPlayer_4_Node.volume.value = -100;
    grainPlayer_4_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_4_volume", -100);
  }
  else {
    grainPlayer_4_Node.volume.value = e.currentTarget.value;
    grainPlayer_4_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "grainPlayer_4_volume", e.currentTarget.value);
  }
});

grainPlayer_4_grainSize.addEventListener("change", function (e) {
  grainPlayer_4_Node.grainSize = e.currentTarget.value;
  grainPlayer_4_grainSize_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_grainSize", e.currentTarget.value);
});

grainPlayer_4_overlap.addEventListener("change", function (e) {
  grainPlayer_4_Node.overlap = e.currentTarget.value;
  grainPlayer_4_overlap_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_overlap", e.currentTarget.value);

});

grainPlayer_4_playback_rate.addEventListener("change", function (e) {
  grainPlayer_4_Node.playbackRate = e.currentTarget.value;
  grainPlayer_4_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_playback_rate", e.currentTarget.value);
});

grainPlayer_4_detune.addEventListener("change", function (e) {
  grainPlayer_4_Node.detune = e.currentTarget.value;
  grainPlayer_4_detune_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_detune", e.currentTarget.value);
});

grainPlayer_4_loop_checkbox.addEventListener("change", function () {
  if (grainPlayer_4_loop_checkbox.checked) {
    grainPlayer_4_Node.loop = true;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", true);
  }
  else {
    grainPlayer_4_Node.loop = false;
    mixEvent.logIntoListaAction(Tone.now(), "player_1_loop_checkbox", false);
  }
});
/**/
grainPlayer_4_reverse_checkbox.addEventListener("change", function () {
  if (grainPlayer_4_reverse_checkbox.checked) {
    grainPlayer_4_Node.reverse = true;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_reverse_checkbox", true);
  }
  else {
    grainPlayer_4_Node.reverse = false;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_reverse_checkbox", false);
  }
});

grainPlayer_4_autoplay_checkbox.addEventListener("change", function () {
  if (grainPlayer_4_autoplay_checkbox.checked) {
    grainPlayer_4_Node.autoplay = true;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_autoplay_checkbox", true);
  }
  else {
    grainPlayer_4_Node.autoplay = false;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_autoplay_checkbox", false);
  }
});
/**/

grainPlayer_4_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_4_Node.loopStart = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_loop_start", e.currentTarget.value);
  }
  else {
    alert("Else grainPlayer_4_Node.loopStart");
  }
});

grainPlayer_4_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    grainPlayer_4_Node.loopEnd = e.currentTarget.value;
    mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_loop_end", e.currentTarget.value);
  }
  else {
    alert("else grainPlayer_4_Node.loopStart");
  }
});

const grainPlayer_4_div = document.getElementById("grainPlayer_4_div");
grainPlayer_4_div.style.display = "none";

//*************************************************************************
//*************************************************************************
//*********************      OSCILLATORS       ****************************
//*************************************************************************
//*************************************************************************
//NoiseSynth
const noiseSynth_1 = new Tone.NoiseSynth(
  {
    noise: {
      type: "white"
    },
    envelope: {
      attack: 0.005,
      decay: 1,
      sustain: 1
    }
  });
const noiseSynth_1_select_type = document.getElementById("noiseSynth_1_select_type");
noiseSynth_1_select_type.addEventListener("change", function (e) {
  noiseSynth_1.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "noiseSynth_1_select_type", e.currentTarget.value);
});

const noiseSynth_1_volume = document.getElementById("noiseSynth_1_volume");
const noiseSynth_1_volume_value = document.getElementById("noiseSynth_1_volume_value");
noiseSynth_1_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noiseSynth_1.volume.value = -100;
    noiseSynth_1_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "noiseSynth_1_volume", -100);

  }
  else {
    noiseSynth_1.volume.value = e.currentTarget.value;
    noiseSynth_1_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "noiseSynth_1_volume", e.currentTarget.value);
  }
});

const noiseSynth_1_envelope_attack_text = document.getElementById("noiseSynth_1_envelope_attack_text");
const noiseSynth_1_envelope_attack = document.getElementById("noiseSynth_1_envelope_attack");
const noiseSynth_1_envelope_attack_value = document.getElementById("noiseSynth_1_envelope_attack_value");
noiseSynth_1_envelope_attack.addEventListener("change", function (e) {
  noiseSynth_1.envelope.attack = e.currentTarget.value;
  noiseSynth_1_envelope_attack_value.innerHTML = (`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "noiseSynth_1_envelope_attack", e.currentTarget.value);
});

const noiseSynth_1_envelope_decay_text = document.getElementById("noiseSynth_1_envelope_decay_text");
const noiseSynth_1_envelope_decay = document.getElementById("noiseSynth_1_envelope_decay");
const noiseSynth_1_envelope_decay_value = document.getElementById("noiseSynth_1_envelope_decay_value");
noiseSynth_1_envelope_decay.addEventListener("change", function (e) {
  noiseSynth_1.envelope.decay = e.currentTarget.value;
  noiseSynth_1_envelope_decay_value.innerHTML = (`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "noiseSynth_1_envelope_decay", e.currentTarget.value);
});

const noiseSynth_1_envelope_sustain_text = document.getElementById("noiseSynth_1_envelope_sustain_text");
const noiseSynth_1_envelope_sustain = document.getElementById("noiseSynth_1_envelope_sustain");
const noiseSynth_1_envelope_sustain_value = document.getElementById("noiseSynth_1_envelope_sustain_value");
noiseSynth_1_envelope_sustain.addEventListener("change", function (e) {
  noiseSynth_1.envelope.sustain = e.currentTarget.value;
  noiseSynth_1_envelope_sustain_value.innerHTML = (`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "noiseSynth_1_envelope_sustain", e.currentTarget.value);
});

const noiseSynth_1_div = document.getElementById("noiseSynth_1_div");
noiseSynth_1_div.style.display = "none";

//****************************************************************************************************************************
//****************************************************************************************************************************
//****************************************************************************************************************************
//******************         PLAYER 2 TODO         ***************************************************************************
//****************************************************************************************************************************
//****************************************************************************************************************************
//PLAYER 2

const player_2_loadButton = document.getElementById("player_2_loadButton");
const player_2_load_text = document.getElementById("player_2_load_text");

const player_2_playButton = document.getElementById("player_2_playButton");
const player_2_muteButton = document.getElementById("player_2_muteButton");
const player_2_soloButton = document.getElementById("player_2_soloButton");
const player_2_stopButton = document.getElementById("player_2_stopButton");

const player_2_volume = document.getElementById("player_2_volume");
const player_2_volume_value = document.getElementById("player_2_volume_value");

player_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    player_2_Node.volume.value = -100;
    player_2_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "player_2_volume", -100);
  }
  else {
    player_2_Node.volume.value = e.currentTarget.value;
    player_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "player_2_volume", e.currentTarget.value);
  }
});

player_2_volume.ondblclick = function () {
  player_2_Node.volume.value = 0;
  player_2_volume_value.innerHTML = 0;
  player_2_volume.value = 0;
  mixEvent.logIntoListaAction(Tone.now(), "player_2_volume", 0);

};

const player_2_playback_rate = document.getElementById("player_2_playback_rate");
const player_2_playback_rate_value = document.getElementById("player_2_playback_rate_value");
player_2_playback_rate.addEventListener("change", function (e) {
  player_2_Node.playbackRate = `${e.currentTarget.value}`;
  player_2_playback_rate_value.innerHTML = Math.round(`${e.currentTarget.value}` * 100);
});

const player_2_loop_checkbox = document.getElementById("player_2_loop_checkbox");
player_2_loop_checkbox.addEventListener("change", function () {
  if (player_2_loop_checkbox.checked) { player_2_Node.loop = true; }
  else { player_2_Node.loop = false; }
});

const player_2_autoplay_checkbox = document.getElementById("player_2_autoplay_checkbox");
player_2_autoplay_checkbox.addEventListener("change", function () {
  if (player_2_autoplay_checkbox.checked) { player_2_Node.autoplay = true; }
  else { player_2_Node.autoplay = false; }
});

const player_2_reverse_checkbox = document.getElementById("player_2_reverse_checkbox");
player_2_reverse_checkbox.addEventListener("change", function () {
  if (player_2_reverse_checkbox.checked) { player_2_Node.reverse = true; }
  else { player_2_Node.reverse = false; }
});

const player_2_loop_start = document.getElementById("player_2_loop_start");
player_2_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300) {
    player_2_Node.loopStart = e.currentTarget.value;
  }
  else {
    alert("errororororor player_2_Node.loopStart");
  }
});

const player_2_loop_end = document.getElementById("player_2_loop_end");
player_2_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300 && e.currentTarget.value > player_2_Node.loopStart) {
    player_2_Node.loopEnd = e.currentTarget.value;
  }
  else {
    alert("errororororor player_2_Node.loopEnd");
  }
});

const player_2_fadeIn = document.getElementById("player_2_fadeIn");
player_2_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_2_Node.fadeIn = e.currentTarget.value;
  }
  else {
    alert("errororororor player_2_Node.fadeIn_1");
  }
});

const player_2_fadeOut = document.getElementById("player_2_fadeOut");
player_2_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_2_Node.fadeOut = e.currentTarget.value;
  }
  else {
    //alert("errororororor player_2_Node.fadeOut");
  }
});

const player_2_loop_options_div = document.getElementById("player_2_loop_options_div");
player_2_loop_options_div.style.display = "block";

//IF LOOP=TRUE; LOOP_OPTIONS_DIV = BLOCK -- FADE_DIV = NONE
//ELSE LOOP=FALSE; LOOP_OPTIONS_DIV = NONE -- FADE_DIV = BLOCK 
const player_2_fade_options_div = document.getElementById("player_2_fade_options_div");
player_2_fade_options_div.style.display = "none";

const player_2_div = document.getElementById("player_2_div");
player_2_div.style.display = "none";

//************************************************************************** */
//************************************************************************** */
//***********************    PLAYER 2 RMS METERS    ******************* */
//************************************************************************** */
//************************************************************************** */
const player_2_rms_meter = new Tone.Meter(0);
const player_2_rms_meter_after_volume = new Tone.Meter(0);
const player_2_rms_meter_player_2_filter_Bypass = new Tone.Meter(0);
const player_2_rms_meter_player_2_filter = new Tone.Meter(0);
const player_2_rms_meter_inner = document.getElementById("player_2_rms_meter_inner");
const player_2_filter_Bypass_VALUE = document.getElementById("player_2_filter_Bypass_VALUE");
const player_2_rms_after_volume_value = document.getElementById("player_2_rms_after_volume_value");
const player_2_filter_VALUE = document.getElementById("player_2_filter_VALUE");
const player_2_rms_comp_Bypass_value = document.getElementById("player_2_rms_comp_Bypass_value");
const player_2_rms_comp_value = document.getElementById("player_2_rms_comp_value");
const player_2_rms_gate_Bypass_value = document.getElementById("player_2_rms_gate_Bypass_value");
const player_2_rms_gate_value = document.getElementById("player_2_rms_gate_value");
const player_2_rms_limiter_Bypass_value = document.getElementById("player_2_rms_limiter_Bypass_value");
const player_2_rms_limiter_value = document.getElementById("player_2_rms_limiter_value");

const player_2_rms_meter_player_2_rms_comp_Bypass = new Tone.Meter(0);
const player_2_rms_meter_player_2_rms_comp = new Tone.Meter(0);
const player_2_rms_meter_player_2_rms_gate_Bypass = new Tone.Meter(0);
const player_2_rms_meter_player_2_rms_gate = new Tone.Meter(0);
const player_2_rms_meter_player_2_rms_limiter_Bypass = new Tone.Meter(0);
const player_2_rms_meter_player_2_rms_limiter = new Tone.Meter(0);

//--------------------------------
const player_3_rms_meter_inner = document.getElementById("player_3_rms_meter_inner");
const player_3_loadButton = document.getElementById("player_3_loadButton");
const player_3_load_text = document.getElementById("player_3_load_text");

const player_3_playButton = document.getElementById("player_3_playButton");
const player_3_muteButton = document.getElementById("player_3_muteButton");
const player_3_soloButton = document.getElementById("player_3_soloButton");
const player_3_stopButton = document.getElementById("player_3_stopButton");

const player_3_volume = document.getElementById("player_3_volume");
const player_3_volume_value = document.getElementById("player_3_volume_value");
player_3_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    player_3_Node.volume.value = -100;
    player_3_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "player_3_volume", -100);
  }
  else {
    player_3_Node.volume.value = e.currentTarget.value;
    player_3_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "player_3_volume", e.currentTarget.value);
  }
});

player_3_volume.ondblclick = function () {
  player_3_Node.volume.value = 0;
  player_3_volume_value.innerHTML = 0;
  player_3_volume.value = 0;
};

const player_3_playback_rate = document.getElementById("player_3_playback_rate");
const player_3_playback_rate_value = document.getElementById("player_3_playback_rate_value");
player_3_playback_rate.addEventListener("change", function (e) {
  player_3_Node.playbackRate = `${e.currentTarget.value}`;
  player_3_playback_rate_value.innerHTML = Math.round(`${e.currentTarget.value}` * 100);
});

const player_3_loop_checkbox = document.getElementById("player_3_loop_checkbox");
player_3_loop_checkbox.addEventListener("change", function () {
  if (player_3_loop_checkbox.checked) { player_3_Node.loop = true; }
  else { player_3_Node.loop = false; }
});

const player_3_autoplay_checkbox = document.getElementById("player_3_autoplay_checkbox");
player_3_autoplay_checkbox.addEventListener("change", function () {
  if (player_3_autoplay_checkbox.checked) { player_3_Node.autoplay = true; }
  else { player_3_Node.autoplay = false; }
});

const player_3_reverse_checkbox = document.getElementById("player_3_reverse_checkbox");
player_3_reverse_checkbox.addEventListener("change", function () {
  if (player_3_reverse_checkbox.checked) { player_3_Node.reverse = true; }
  else { player_3_Node.reverse = false; }
});

const player_3_loop_start = document.getElementById("player_3_loop_start");
player_3_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300) {
    player_3_Node.loopStart = e.currentTarget.value;
  }
  else {
    alert("errororororor player_3_Node.loopStart");
  }
});

const player_3_loop_end = document.getElementById("player_3_loop_end");
player_3_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300 && e.currentTarget.value > player_3_Node.loopStart) {
    player_3_Node.loopEnd = e.currentTarget.value;
  }
  else {
    alert("errororororor player_3_Node.loopEnd");
  }
});

const player_3_fadeIn = document.getElementById("player_3_fadeIn");
player_3_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_3_Node.fadeIn = e.currentTarget.value;
  }
  else {
    alert("errororororor player_3_Node.fadeIn_1");
  }
});

const player_3_fadeOut = document.getElementById("player_3_fadeOut");
player_3_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_3_Node.fadeOut = e.currentTarget.value;
  }
  else {
    //alert("errororororor player_3_Node.fadeOut");
  }
});

const player_3_loop_options_div = document.getElementById("player_3_loop_options_div");
player_3_loop_options_div.style.display = "block";

//IF LOOP=TRUE; LOOP_OPTIONS_DIV = BLOCK -- FADE_DIV = NONE
//ELSE LOOP=FALSE; LOOP_OPTIONS_DIV = NONE -- FADE_DIV = BLOCK 
const player_3_fade_options_div = document.getElementById("player_3_fade_options_div");
player_3_fade_options_div.style.display = "none";

const player_3_div = document.getElementById("player_3_div");
player_3_div.style.display = "none";

//---------------------------------
const player_4_rms_meter_inner = document.getElementById("player_4_rms_meter_inner");
const player_4_loadButton = document.getElementById("player_4_loadButton");
const player_4_load_text = document.getElementById("player_4_load_text");

const player_4_playButton = document.getElementById("player_4_playButton");
const player_4_muteButton = document.getElementById("player_4_muteButton");
const player_4_soloButton = document.getElementById("player_4_soloButton");
const player_4_stopButton = document.getElementById("player_4_stopButton");

const player_4_volume = document.getElementById("player_4_volume");
const player_4_volume_value = document.getElementById("player_4_volume_value");
player_4_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    player_4_Node.volume.value = -100;
    player_4_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "player_4_volume", -100);
  }
  else {
    player_4_Node.volume.value = e.currentTarget.value;
    player_4_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "player_4_volume", e.currentTarget.value);
  }
});

player_4_volume.ondblclick = function () {
  player_4_Node.volume.value = 0;
  player_4_volume_value.innerHTML = 0;
  player_4_volume.value = 0;
  mixEvent.logIntoListaAction(Tone.now(), "player_4_volume", 0);
};

const player_4_playback_rate = document.getElementById("player_4_playback_rate");
const player_4_playback_rate_value = document.getElementById("player_4_playback_rate_value");
player_4_playback_rate.addEventListener("change", function (e) {
  player_4_Node.playbackRate = `${e.currentTarget.value}`;
  player_4_playback_rate_value.innerHTML = Math.round(`${e.currentTarget.value}` * 100);
});

const player_4_loop_checkbox = document.getElementById("player_4_loop_checkbox");
player_4_loop_checkbox.addEventListener("change", function () {
  if (player_4_loop_checkbox.checked) { player_4_Node.loop = true; }
  else { player_4_Node.loop = false; }
});

const player_4_autoplay_checkbox = document.getElementById("player_4_autoplay_checkbox");
player_4_autoplay_checkbox.addEventListener("change", function () {
  if (player_4_autoplay_checkbox.checked) { player_4_Node.autoplay = true; }
  else { player_4_Node.autoplay = false; }
});

const player_4_reverse_checkbox = document.getElementById("player_4_reverse_checkbox");
player_4_reverse_checkbox.addEventListener("change", function () {
  if (player_4_reverse_checkbox.checked) { player_4_Node.reverse = true; }
  else { player_4_Node.reverse = false; }
});

const player_4_loop_start = document.getElementById("player_4_loop_start");
player_4_loop_start.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300) {
    player_4_Node.loopStart = e.currentTarget.value;
  }
  else {
    alert("errororororor player_4_Node.loopStart");
  }
});

const player_4_loop_end = document.getElementById("player_4_loop_end");
player_4_loop_end.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 300 && e.currentTarget.value > player_4_Node.loopStart) {
    player_4_Node.loopEnd = e.currentTarget.value;
  }
  else {
    alert("errororororor player_4_Node.loopEnd");
  }
});

const player_4_fadeIn = document.getElementById("player_4_fadeIn");
player_4_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_4_Node.fadeIn = e.currentTarget.value;
  }
  else {
    alert("errororororor player_4_Node.fadeIn_1");
  }
});

const player_4_fadeOut = document.getElementById("player_4_fadeOut");
player_4_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    player_4_Node.fadeOut = e.currentTarget.value;
  }
  else {
    //alert("errororororor player_4_Node.fadeOut");
  }
});

const player_4_loop_options_div = document.getElementById("player_4_loop_options_div");
player_4_loop_options_div.style.display = "block";

//IF LOOP=TRUE; LOOP_OPTIONS_DIV = BLOCK -- FADE_DIV = NONE
//ELSE LOOP=FALSE; LOOP_OPTIONS_DIV = NONE -- FADE_DIV = BLOCK 
const player_4_fade_options_div = document.getElementById("player_4_fade_options_div");
player_4_fade_options_div.style.display = "none";

const player_4_div = document.getElementById("player_4_div");
player_4_div.style.display = "none";

//***************************************************************************************
//***************************************************************************************
//NOISE (SOURCE)

const noise_2_Node = new Tone.Noise()
noise_2_Node.volume.value = -100;

const noise_2_rms_value = document.getElementById("noise_2_rms_value");

const noise_2_playButton = document.getElementById("noise_2_playButton");
const noise_2_stopButton = document.getElementById("noise_2_stopButton");
const noise_2_muteButton = document.getElementById("noise_2_muteButton");
const noise_2_soloButton = document.getElementById("noise_2_soloButton");
noise_2_muteButton.mute = false;

const noise_2_volume = document.getElementById("noise_2_volume");
const noise_2_volume_value = document.getElementById("noise_2_volume_value");
const noise_2_volume_rampTo_gain = document.getElementById("noise_2_volume_rampTo_gain");
const noise_2_volume_rampTo_gain_value = document.getElementById("noise_2_volume_rampTo_gain_value");
const noise_2_volume_rampTo_time = document.getElementById("noise_2_volume_rampTo_time");
const noise_2_volume_rampTo_time_value = document.getElementById("noise_2_volume_rampTo_time_value");
const noise_2_volume_rampTo_send_Button = document.getElementById("noise_2_volume_rampTo_send_Button");
const noise_2_playback_rate = document.getElementById("noise_2_playback_rate");
const noise_2_playback_rate_value = document.getElementById("noise_2_playback_rate_value");

const noise_2_fadeIn = document.getElementById("noise_2_fadeIn");
const noise_2_fadeOut = document.getElementById("noise_2_fadeOut");

const noise_2_select_type = document.getElementById("noise_2_select_type");

noise_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noise_2_Node.volume.value = -100;
    noise_2_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "noise_2_volume", -100);
  }
  else {
    noise_2_Node.volume.value = e.currentTarget.value;
    noise_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "noise_2_volume", e.currentTarget.value);
  }
});

noise_2_playback_rate.addEventListener("change", function (e) {

  noise_2_Node.playbackRate = e.currentTarget.value;
  noise_2_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
});

noise_2_select_type.addEventListener("change", function (e) {
  noise_2_Node.type = e.currentTarget.value;
});

noise_2_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_2_Node.fadeIn = e.currentTarget.value;
  }
  else {
    alert("errororororor noise_2_Node.fadeIn_1");
  }
});

noise_2_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_2_Node.fadeOut = e.currentTarget.value;
  }
  else {
    alert("errororororor noise_2_Node.fadeOut");
  }
});

const noise_2_div = document.getElementById("noise_2_div");
noise_2_div.style.display = "none";
/**/

//*********************************************************************
//*********************************************************************
//NOISE (SOURCE)

const noise_3_Node = new Tone.Noise()
noise_3_Node.volume.value = -100;

const noise_3_rms_value = document.getElementById("noise_3_rms_value");

const noise_3_playButton = document.getElementById("noise_3_playButton");
const noise_3_stopButton = document.getElementById("noise_3_stopButton");
const noise_3_muteButton = document.getElementById("noise_3_muteButton");
const noise_3_soloButton = document.getElementById("noise_3_soloButton");
noise_3_muteButton.mute = false;

const noise_3_volume = document.getElementById("noise_3_volume");
const noise_3_volume_value = document.getElementById("noise_3_volume_value");
const noise_3_volume_rampTo_gain = document.getElementById("noise_3_volume_rampTo_gain");
const noise_3_volume_rampTo_gain_value = document.getElementById("noise_3_volume_rampTo_gain_value");
const noise_3_volume_rampTo_time = document.getElementById("noise_3_volume_rampTo_time");
const noise_3_volume_rampTo_time_value = document.getElementById("noise_3_volume_rampTo_time_value");
const noise_3_volume_rampTo_send_Button = document.getElementById("noise_3_volume_rampTo_send_Button");
const noise_3_playback_rate = document.getElementById("noise_3_playback_rate");
const noise_3_playback_rate_value = document.getElementById("noise_3_playback_rate_value");

const noise_3_fadeIn = document.getElementById("noise_3_fadeIn");
const noise_3_fadeOut = document.getElementById("noise_3_fadeOut");

const noise_3_select_type = document.getElementById("noise_3_select_type");

noise_3_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noise_3_Node.volume.value = -100;
    noise_3_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "noise_3_volume", -100);
  }
  else {
    noise_3_Node.volume.value = e.currentTarget.value;
    noise_3_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "noise_3_volume", e.currentTarget.value);
  }
});

noise_3_playback_rate.addEventListener("change", function (e) {

  noise_3_Node.playbackRate = e.currentTarget.value;
  noise_3_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
});

noise_3_select_type.addEventListener("change", function (e) {
  noise_3_Node.type = e.currentTarget.value;
});

noise_3_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_3_Node.fadeIn = e.currentTarget.value;
  }
  else {
    alert("errororororor noise_3_Node.fadeIn_1");
  }
});

noise_3_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_3_Node.fadeOut = e.currentTarget.value;
  }
  else {
    alert("errororororor noise_3_Node.fadeOut");
  }
});

const noise_3_div = document.getElementById("noise_3_div");
noise_3_div.style.display = "none";
/**/

//*********************************************************************
//*********************************************************************
//NOISE (SOURCE)

const noise_4_Node = new Tone.Noise()
noise_4_Node.volume.value = -100;

const noise_4_rms_value = document.getElementById("noise_4_rms_value");

const noise_4_playButton = document.getElementById("noise_4_playButton");
const noise_4_stopButton = document.getElementById("noise_4_stopButton");
const noise_4_muteButton = document.getElementById("noise_4_muteButton");
const noise_4_soloButton = document.getElementById("noise_4_soloButton");
noise_4_muteButton.mute = false;

const noise_4_volume = document.getElementById("noise_4_volume");
const noise_4_volume_value = document.getElementById("noise_4_volume_value");
const noise_4_volume_rampTo_gain = document.getElementById("noise_4_volume_rampTo_gain");
const noise_4_volume_rampTo_gain_value = document.getElementById("noise_4_volume_rampTo_gain_value");
const noise_4_volume_rampTo_time = document.getElementById("noise_4_volume_rampTo_time");
const noise_4_volume_rampTo_time_value = document.getElementById("noise_4_volume_rampTo_time_value");
const noise_4_volume_rampTo_send_Button = document.getElementById("noise_4_volume_rampTo_send_Button");
const noise_4_playback_rate = document.getElementById("noise_4_playback_rate");
const noise_4_playback_rate_value = document.getElementById("noise_4_playback_rate_value");

const noise_4_fadeIn = document.getElementById("noise_4_fadeIn");
const noise_4_fadeOut = document.getElementById("noise_4_fadeOut");

const noise_4_select_type = document.getElementById("noise_4_select_type");

noise_4_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noise_4_Node.volume.value = -100;
    noise_4_volume_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "noise_4_volume", -100);
  }
  else {
    noise_4_Node.volume.value = e.currentTarget.value;
    noise_4_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "noise_4_volume", e.currentTarget.value);
  }
});

noise_4_playback_rate.addEventListener("change", function (e) {

  noise_4_Node.playbackRate = e.currentTarget.value;
  noise_4_playback_rate_value.innerHTML = `${e.currentTarget.value}`;
});

noise_4_select_type.addEventListener("change", function (e) {
  noise_4_Node.type = e.currentTarget.value;
});

noise_4_fadeIn.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_4_Node.fadeIn = e.currentTarget.value;
  }
  else {
    alert("errororororor noise_4_Node.fadeIn_1");
  }
});

noise_4_fadeOut.addEventListener("change", function (e) {
  if (e.currentTarget.value >= 0 && e.currentTarget.value <= 1234) {
    noise_4_Node.fadeOut = e.currentTarget.value;
  }
  else {
    alert("errororororor noise_4_Node.fadeOut");
  }
});

const noise_4_div = document.getElementById("noise_4_div");
noise_4_div.style.display = "none";
/**/

//*************************************************************************
//*************************************************************************
//*********************      OSCILLATORS       ****************************
//*************************************************************************
//*************************************************************************
//Oscillator
/*
const oscillator_2 = new Tone.Oscillator(
  {
    type: "sine",
    frequency: 440,
    detune: 0,
    phase: 0,
    partials: [],
    partialCount: 0
  });

const oscillator_2_Sync_checkbox = document.getElementById("oscillator_2_Sync_checkbox");
oscillator_2_Sync_checkbox.addEventListener("change", function () {
  if (oscillator_2_Sync_checkbox.checked) { oscillator_2.sync = true; }
  else { oscillator_2.sync = false; }
});

const oscillator_2_select_type = document.getElementById("oscillator_2_select_type");
oscillator_2_select_type.addEventListener("change", function (e) {
  oscillator_2.type = e.currentTarget.value;
});

const oscillator_2_volume = document.getElementById("oscillator_2_volume");
const oscillator_2_volume_value = document.getElementById("oscillator_2_volume_value");
oscillator_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    oscillator_2.volume.value = -100;
    oscillator_2_volume_value.innerHTML = -100;
  }
  else {
    oscillator_2.volume.value = e.currentTarget.value;
    oscillator_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  }
});

const oscillator_2_freq = document.getElementById("oscillator_2_freq");
const oscillator_2_freq_value = document.getElementById("oscillator_2_freq_value");
oscillator_2_freq.addEventListener("change", function (e) {
  oscillator_2.frequency.value = e.currentTarget.value;
  oscillator_2_freq_value.innerHTML = Math.round(`${e.currentTarget.value}`);
}
);

const oscillator_2_detune_text = document.getElementById("oscillator_2_detune_text");
const oscillator_2_detune = document.getElementById("oscillator_2_detune");
const oscillator_2_detune_value = document.getElementById("oscillator_2_detune_value");
oscillator_2_detune.addEventListener("change", function (e) {
  oscillator_2.detune.value = e.currentTarget.value;
  oscillator_2_detune_value.innerHTML = Math.round(`${e.currentTarget.value}`);
});

const oscillator_2_phase_text = document.getElementById("oscillator_2_phase_text");
const oscillator_2_phase = document.getElementById("oscillator_2_phase");
const oscillator_2_phase_value = document.getElementById("oscillator_2_phase_value");
oscillator_2_phase.addEventListener("change", function (e) {
  oscillator_2.phase.value = e.currentTarget.value;
  oscillator_2_phase_value.innerHTML = Math.round(`${e.currentTarget.value}`);
});

const oscillator_2_div = document.getElementById("oscillator_2_div");
oscillator_2_div.style.display = "none";
/**/

//*************************************************************************
//*************************************************************************
//*********************      INSTRUMENTS       ****************************
//*************************************************************************
//*************************************************************************
//NoiseSynth

const noiseSynth_2 = new Tone.NoiseSynth(
  {
    noise: {
      type: "white"
    },
    envelope: {
      attack: 0.005,
      decay: 1,
      sustain: 1
    }
  });

const noiseSynth_2_select_type = document.getElementById("noiseSynth_2_select_type");
noiseSynth_2_select_type.addEventListener("change", function (e) {
  noiseSynth_2.type = e.currentTarget.value;
});

const noiseSynth_2_volume = document.getElementById("noiseSynth_2_volume");
const noiseSynth_2_volume_value = document.getElementById("noiseSynth_2_volume_value");
noiseSynth_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noiseSynth_2.volume.value = -100;
    noiseSynth_2_volume_value.innerHTML = -100;
  }
  else {
    noiseSynth_2.volume.value = e.currentTarget.value;
    noiseSynth_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  }
});

const noiseSynth_2_envelope_attack_text = document.getElementById("noiseSynth_2_envelope_attack_text");
const noiseSynth_2_envelope_attack = document.getElementById("noiseSynth_2_envelope_attack");
const noiseSynth_2_envelope_attack_value = document.getElementById("noiseSynth_2_envelope_attack_value");
noiseSynth_2_envelope_attack.addEventListener("change", function (e) {
  noiseSynth_2.envelope.attack = e.currentTarget.value;
  noiseSynth_2_envelope_attack_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_2_envelope_decay_text = document.getElementById("noiseSynth_2_envelope_decay_text");
const noiseSynth_2_envelope_decay = document.getElementById("noiseSynth_2_envelope_decay");
const noiseSynth_2_envelope_decay_value = document.getElementById("noiseSynth_2_envelope_decay_value");
noiseSynth_2_envelope_decay.addEventListener("change", function (e) {
  noiseSynth_2.envelope.decay = e.currentTarget.value;
  noiseSynth_2_envelope_decay_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_2_envelope_sustain_text = document.getElementById("noiseSynth_2_envelope_sustain_text");
const noiseSynth_2_envelope_sustain = document.getElementById("noiseSynth_2_envelope_sustain");
const noiseSynth_2_envelope_sustain_value = document.getElementById("noiseSynth_2_envelope_sustain_value");
noiseSynth_2_envelope_sustain.addEventListener("change", function (e) {
  noiseSynth_2.envelope.sustain = e.currentTarget.value;
  noiseSynth_2_envelope_sustain_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_2_div = document.getElementById("noiseSynth_2_div");
noiseSynth_2_div.style.display = "none";
/**/

const noiseSynth_3 = new Tone.NoiseSynth(
  {
    noise: {
      type: "white"
    },
    envelope: {
      attack: 0.005,
      decay: 1,
      sustain: 1
    }
  });

const noiseSynth_3_select_type = document.getElementById("noiseSynth_3_select_type");
noiseSynth_3_select_type.addEventListener("change", function (e) {
  noiseSynth_3.type = e.currentTarget.value;
});

const noiseSynth_3_volume = document.getElementById("noiseSynth_3_volume");
const noiseSynth_3_volume_value = document.getElementById("noiseSynth_3_volume_value");
noiseSynth_3_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noiseSynth_3.volume.value = -100;
    noiseSynth_3_volume_value.innerHTML = -100;
  }
  else {
    noiseSynth_3.volume.value = e.currentTarget.value;
    noiseSynth_3_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  }
});

const noiseSynth_3_envelope_attack_text = document.getElementById("noiseSynth_3_envelope_attack_text");
const noiseSynth_3_envelope_attack = document.getElementById("noiseSynth_3_envelope_attack");
const noiseSynth_3_envelope_attack_value = document.getElementById("noiseSynth_3_envelope_attack_value");
noiseSynth_3_envelope_attack.addEventListener("change", function (e) {
  noiseSynth_3.envelope.attack = e.currentTarget.value;
  noiseSynth_3_envelope_attack_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_3_envelope_decay_text = document.getElementById("noiseSynth_3_envelope_decay_text");
const noiseSynth_3_envelope_decay = document.getElementById("noiseSynth_3_envelope_decay");
const noiseSynth_3_envelope_decay_value = document.getElementById("noiseSynth_3_envelope_decay_value");
noiseSynth_3_envelope_decay.addEventListener("change", function (e) {
  noiseSynth_3.envelope.decay = e.currentTarget.value;
  noiseSynth_3_envelope_decay_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_3_envelope_sustain_text = document.getElementById("noiseSynth_3_envelope_sustain_text");
const noiseSynth_3_envelope_sustain = document.getElementById("noiseSynth_3_envelope_sustain");
const noiseSynth_3_envelope_sustain_value = document.getElementById("noiseSynth_3_envelope_sustain_value");
noiseSynth_3_envelope_sustain.addEventListener("change", function (e) {
  noiseSynth_3.envelope.sustain = e.currentTarget.value;
  noiseSynth_3_envelope_sustain_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_3_div = document.getElementById("noiseSynth_3_div");
noiseSynth_3_div.style.display = "none";
/**/

const noiseSynth_4 = new Tone.NoiseSynth(
  {
    noise: {
      type: "white"
    },
    envelope: {
      attack: 0.005,
      decay: 1,
      sustain: 1
    }
  });

const noiseSynth_4_select_type = document.getElementById("noiseSynth_4_select_type");
noiseSynth_4_select_type.addEventListener("change", function (e) {
  noiseSynth_4.type = e.currentTarget.value;
});

const noiseSynth_4_volume = document.getElementById("noiseSynth_4_volume");
const noiseSynth_4_volume_value = document.getElementById("noiseSynth_4_volume_value");
noiseSynth_4_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    noiseSynth_4.volume.value = -100;
    noiseSynth_4_volume_value.innerHTML = -100;
  }
  else {
    noiseSynth_4.volume.value = e.currentTarget.value;
    noiseSynth_4_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  }
});

const noiseSynth_4_envelope_attack_text = document.getElementById("noiseSynth_4_envelope_attack_text");
const noiseSynth_4_envelope_attack = document.getElementById("noiseSynth_4_envelope_attack");
const noiseSynth_4_envelope_attack_value = document.getElementById("noiseSynth_4_envelope_attack_value");
noiseSynth_4_envelope_attack.addEventListener("change", function (e) {
  noiseSynth_4.envelope.attack = e.currentTarget.value;
  noiseSynth_4_envelope_attack_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_4_envelope_decay_text = document.getElementById("noiseSynth_4_envelope_decay_text");
const noiseSynth_4_envelope_decay = document.getElementById("noiseSynth_4_envelope_decay");
const noiseSynth_4_envelope_decay_value = document.getElementById("noiseSynth_4_envelope_decay_value");
noiseSynth_4_envelope_decay.addEventListener("change", function (e) {
  noiseSynth_4.envelope.decay = e.currentTarget.value;
  noiseSynth_4_envelope_decay_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_4_envelope_sustain_text = document.getElementById("noiseSynth_4_envelope_sustain_text");
const noiseSynth_4_envelope_sustain = document.getElementById("noiseSynth_4_envelope_sustain");
const noiseSynth_4_envelope_sustain_value = document.getElementById("noiseSynth_4_envelope_sustain_value");
noiseSynth_4_envelope_sustain.addEventListener("change", function (e) {
  noiseSynth_4.envelope.sustain = e.currentTarget.value;
  noiseSynth_4_envelope_sustain_value.innerHTML = (`${e.currentTarget.value}`);
});

const noiseSynth_4_div = document.getElementById("noiseSynth_4_div");
noiseSynth_4_div.style.display = "none";
/**/

//****************************************************************************************************************************
//************************************************************************
//************************************************************************
//-----------------------------------------------------
//-------------        TO TEST        ---------------------------
//-----------------------------------------------------
//Tone.Convolver: Tone.Convolver is a wrapper around 
// the Native Web Audio ConvolverNode. 
// Convolution is useful for reverb and filter emulation. 
// Read more about convolution reverb on Wikipedia.
//https://en.wikipedia.org/wiki/Convolution_reverb


//Tone.Follower is a crude envelope follower 
// which will follow the amplitude of an incoming signal.
// Read more about envelope followers 
// (also known as envelope detectors) on Wikipedia.

//Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, 
// but instead of min and max it’s got a baseFrequency 
// and octaves parameter.

//Tone.Lowpass is a lowpass feedback comb filter.
//  It is similar to Tone.FeedbackCombFilter,
//  but includes a lowpass filter.

//Tone.FeedbackCombFilter Comb filters are basic building blocks
//  for physical modeling. 
// Read more about comb filters on CCRMA’s website.
//https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html

// Tone.MidSideCompressor applies two different compressors
//  to the mid and side signal components. 
// See Tone.MidSideSplit.

//Tone.MidSideSplit: Mid/Side processing separates the ‘mid’ signal 
// (which comes out of both the left and the right channel) 
// and the ‘side’ (which only comes out of the the side channels).
//Mid = (Left+Right)/sqrt(2); // obtain mid-signal from left and right
//Side = (Left-Right)/sqrt(2); // obtain side-signal from left and righ
//Tone.MidSideMerge
//http://www.kvraudio.com/forum/viewtopic.php?t=212587

//Tone.MultibandCompressor: A compressor with seperate controls
//  over low/mid/high dynamics

//Tone.MultibandSplit: Split the incoming signal into
//three bands (low, mid, high) with two crossover frequency
//controls.

//Tone.ScaledEnvelope is an envelope which can be scaled
//to any range. It’s useful for applying an envelope to
//a frequency or any other non-NormalRange signal parameter.

//Tone.Solo lets you isolate a specific audio stream. 
// When an instance is set to solo=true,
// it will mute all other instances.

//Tone.Split splits an incoming signal into left 
// and right channels.

//Tone.Waveform: Get the current waveform data 
// of the connected audio source.

//Tone.TickSource: Uses Tone.TickSignal to track elapsed ticks
//  with complex automation curves.


//Tone.TickSignal: extends Tone.Signal,
//but adds the capability to calculate the number 
//of elapsed ticks. exponential and target curves 
//are approximated with multiple linear ramps. 
// WAC paper describing integrating timing functions for tempo calculations.
//https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf


//***************************************************************
//***************************************************************
//***************************************************************
//***************************************************************
//Tone.Panner3D
//Tone.Listener: Both Tone.Panner3D and Tone.Listener 
// have a position in 3D space using a right-handed cartesian 
// coordinate system. The units used in the coordinate system 
// are not defined; these coordinates are independent/invariant 
// of any particular units such as meters or feet. 
// Tone.Panner3D objects have an forward vector 
// representing the direction the sound is projecting.
//  Additionally, they have a sound cone representing 
// how directional the sound is. 
// For example, the sound could be omnidirectional, 
// in which case it would be heard anywhere regardless 
// of its forward, or it can be more directional and heard 
// only if it is facing the listener. 
// Tone.Listener objects (representing a person’s ears) 
// have an forward and up vector representing 
// in which direction the person is facing. 
// Because both the source stream and the listener can be moving,
//  they both have a velocity vector representing both 
// the speed and direction of movement. 
// Taken together, these two velocities can be used 
// to generate a doppler shift effect which changes the pitch.
//
//Note: the position of the Listener will have no effect 
// on nodes not connected to a Tone.Panner3D.
/*
{
positionX : 0 ,
positionY : 0 ,
positionZ : 0 ,
orientationX : 0 ,
orientationY : 0 ,
orientationZ : 0 ,
panningModel : equalpower ,
maxDistance : 10000 ,
distanceModel : inverse ,
coneOuterGain : 0 ,
coneOuterAngle : 360 ,
coneInnerAngle : 360 ,
refDistance : 1 ,
rolloffFactor : 1
}
*/

//***************************************************************
//***************************************************************
//***************************************************************
//***************************************************************
//Tone.Timeline: A Timeline class for scheduling and 
// maintaining state along a timeline. 
// All events must have a “time” property. 
// Internally, events are stored in time order 
// for fast retrieval.

//Tone.Transport: Transport for timing musical events.
//Supports tempo curves and time changes. 
// Unlike browser-based timing 
// (setInterval, requestAnimationFrame) 
// Tone.Transport timing events pass in the exact time 
// of the scheduled event in the argument of the callback function.
// Pass that time value to the object you’re scheduling.

//A single transport is created for you when the library 
// is initialized.

//The transport emits the events: “start”, “stop”, “pause”, and
//“loop” which are called with the time of that event 
// as the argument.

//Tone.TransportTime: is a the time along the Transport’s timeline.
// It is similar to Tone.Time, but instead of evaluating against
//  the AudioContext’s clock, it is evaluated against 
// the Transport’s position.
//https://github.com/Tonejs/Tone.js/wiki/TransportTime

//Tone.Event abstracts away Tone.Transport.schedule and provides
// a schedulable callback for a single or repeatable events
// along the timeline.
//IMPÓRTANTE!!!!!!!!!!!!

//--------------------------------------------------------------------
//Tone.StereoXFeedbackEffect: Just like a stereo feedback effect,
// but the feedback is routed from left to right and right 
// to left instead of on the same channel.


//***************************************************************
//***************************************************************
//Tone.UserMedia
//PARA ABRIR EL MICROFONO
/*
var placa_Audio = new Tone.UserMedia();
placa_Audio.open().then(function(){
//alert("dESEA ABRIR PLACA DE AUDIO");
console.log("supported: " + Tone.UserMedia.supported);
console.log("state: " + placa_Audio.state);
console.log("groupId: " + placa_Audio.groupId);
console.log("deviceId: " + Tone.UserMedia.deviceId);

Tone.UserMedia.enumerateDevices().then(function(devices){
console.log(devices);
});
});
/**/

//***************************************************************
//***************************************************************
//Tone.Normalize
/* NO FUNCA
//BORRAR LUEGO
var testNormalize = new Tone.Normalize(2,4);
player_1_Node.connect(testNormalize);

//var norm = new Tone.Normalize(2, 4);
//var sig = new Tone.Signal(3).connect(norm);
//output of norm is 0.5.
*/

//***************************************************************
//***************************************************************
//MIX EVENT OBJECT
const mixEvent = {
  atTime: 0,
  element: "player_1",
  action: "play",
  newValue: 100,
  rampTime: 0,
  filename: "No File Loaded",
  logging: function () {
    return this.atTime + " " + this.element + " " + this.action +
      " " + this.newValue + " " + this.rampTime
  },
  alerting: function () {
    alert(this.logging());
  },
  logIntoLista: function (event) {
    lista.push(event);
  },
  logIntoListaAction: function (atTime, element, action) {
    const event = Object();
    event.atTime = atTime;
    event.element = element;
    event.action = action;
    lista.push(event);
    this.console_log(event);
  },

  logIntoListaNewValue: function (atTime, element, newValue) {
    const event = Object();
    event.atTime = atTime;
    event.element = element;
    event.newValue = newValue;
    lista.push(event);
    this.console_log(event);
  },
  logIntoListaRampValue: function (atTime, element, newValue, rampTime) {
    const event = Object();
    event.atTime = atTime;
    event.element = element;
    event.newValue = newValue;
    event.rampTime = rampTime;
    lista.push(event);
    this.console_log(event);
    /**/
  },
  console_log: function (event) {
    if (event.rampTime != undefined) {
      console.log("Now: " + event.atTime + "\n" + "element: " + event.element + "\n" +
        "newValue: " + event.newValue + "\n" + "rampTime: " + event.rampTime);
    }
    else if (event.newValue != undefined) {
      console.log("Now: " + event.atTime + "\n" + "element: " + event.element + "\n" +
        "newValue: " + event.newValue);
    }
    else {
      console.log("Now: " + event.atTime + "\n" + "element: " + event.element + "\n" +
        "action: " + event.action);
    }
  }
};

function muestraLista() {
  console.table(lista);
}

const channel_1_RMS_all = document.getElementById("channel_1_RMS_all");
channel_1_RMS_all.style.display = "none";
const channel_2_RMS_all = document.getElementById("channel_2_RMS_all");
channel_2_RMS_all.style.display = "none";
const channel_3_RMS_all = document.getElementById("channel_3_RMS_all");
channel_3_RMS_all.style.display = "none";
const channel_4_RMS_all = document.getElementById("channel_4_RMS_all");
channel_4_RMS_all.style.display = "none";

const fx_1_RMS_all = document.getElementById("fx_1_RMS_all");
fx_1_RMS_all.style.display = "none";

//*****************************************************************************************
//*****************************************************************************************
//********  INNER HTML player 1            ************************************************
//*****************************************************************************************
//INNER HTML channel 1
//player_1_Node.volume.value = -6;
player_1_volume.value = -6;
player_1_volume_value.innerHTML = "-6";
player_1_playback_rate_value.innerHTML = 100;
channel_1_songName.innerHTML = `No Song Loaded`;
channel_1_filter_frequency_value_allpass.innerHTML = "20";
channel_1_filter_frequency_value_shelf.innerHTML = "20";
channel_1_filter_frequency_value_peaking.innerHTML = "20";
channel_1_filter_Q_value_allpass.innerHTML = "0";
channel_1_filter_Q_value_peaking.innerHTML = "0";
channel_1_filter_detune_value_allpass.innerHTML = "0";
channel_1_filter_detune_value_shelf.innerHTML = "0";
channel_1_filter_detune_value_peaking.innerHTML = "0";
channel_1_filter_gain_value_shelf.innerHTML = "0";
channel_1_filter_gain_value_peaking.innerHTML = "0";
channel_1_fxSend_1_value.innerHTML = "0";
channel_1_fxSend_2_value.innerHTML = "0";
channel_1_fxSend_3_value.innerHTML = "0";
channel_1_fxSend_4_value.innerHTML = "0";
channel_1_dynamics_ratio.innerHTML = 0;
channel_1_dynamics_threshold.innerHTML = 0;
channel_1_dynamics_release.innerHTML = 0;
channel_1_dynamics_attack.innerHTML = 0;
channel_1_dynamics_knee.innerHTML = 0;
channel_1_dynamics_ratio_value.innerHTML = 0;
channel_1_dynamics_threshold_value.innerHTML = 0;
channel_1_dynamics_release_value.innerHTML = 0;
channel_1_dynamics_attack_value.innerHTML = 0;
channel_1_dynamics_knee_value.innerHTML = 0;

//-----------------------------------------------
//INNER HTML channel 2
player_2_volume_value.innerHTML = "-40";
player_2_playback_rate_value.innerHTML = 100;
channel_2_songName.innerHTML = `No Song Loaded`;
channel_2_filter_frequency_value_allpass.innerHTML = "20";
channel_2_filter_frequency_value_shelf.innerHTML = "20";
channel_2_filter_frequency_value_peaking.innerHTML = "20";
channel_2_filter_Q_value_allpass.innerHTML = "0";
channel_2_filter_Q_value_peaking.innerHTML = "0";
channel_2_filter_detune_value_allpass.innerHTML = "0";
channel_2_filter_detune_value_shelf.innerHTML = "0";
channel_2_filter_detune_value_peaking.innerHTML = "0";
channel_2_filter_gain_value_shelf.innerHTML = "0";
channel_2_filter_gain_value_peaking.innerHTML = "0";
channel_2_fxSend_1_value.innerHTML = "0";
channel_2_fxSend_2_value.innerHTML = "0";
channel_2_fxSend_3_value.innerHTML = "0";
channel_2_fxSend_4_value.innerHTML = "0";
channel_2_dynamics_ratio.innerHTML = 0;
channel_2_dynamics_threshold.innerHTML = 0;
channel_2_dynamics_release.innerHTML = 0;
channel_2_dynamics_attack.innerHTML = 0;
channel_2_dynamics_knee.innerHTML = 0;
channel_2_dynamics_ratio_value.innerHTML = 0;
channel_2_dynamics_threshold_value.innerHTML = 0;
channel_2_dynamics_release_value.innerHTML = 0;
channel_2_dynamics_attack_value.innerHTML = 0;
channel_2_dynamics_knee_value.innerHTML = 0;

//-----------------------------------------------
//INNER HTML player 3
player_3_volume_value.innerHTML = "-40";
player_3_playback_rate_value.innerHTML = 100;
channel_3_songName.innerHTML = `No Song Loaded`;
channel_3_filter_frequency_value_allpass.innerHTML = "20";
channel_3_filter_frequency_value_shelf.innerHTML = "20";
channel_3_filter_frequency_value_peaking.innerHTML = "20";
channel_3_filter_Q_value_allpass.innerHTML = "0";
channel_3_filter_Q_value_peaking.innerHTML = "0";
channel_3_filter_detune_value_allpass.innerHTML = "0";
channel_3_filter_detune_value_shelf.innerHTML = "0";
channel_3_filter_detune_value_peaking.innerHTML = "0";
channel_3_filter_gain_value_shelf.innerHTML = "0";
channel_3_filter_gain_value_peaking.innerHTML = "0";
channel_3_fxSend_1_value.innerHTML = "0";
channel_3_fxSend_2_value.innerHTML = "0";
channel_3_fxSend_3_value.innerHTML = "0";
channel_3_fxSend_4_value.innerHTML = "0";
channel_3_dynamics_ratio.innerHTML = 0;
channel_3_dynamics_threshold.innerHTML = 0;
channel_3_dynamics_release.innerHTML = 0;
channel_3_dynamics_attack.innerHTML = 0;
channel_3_dynamics_knee.innerHTML = 0;
channel_3_dynamics_ratio_value.innerHTML = 0;
channel_3_dynamics_threshold_value.innerHTML = 0;
channel_3_dynamics_release_value.innerHTML = 0;
channel_3_dynamics_attack_value.innerHTML = 0;
channel_3_dynamics_knee_value.innerHTML = 0;
//-----------------------------------------------
//INNER HTML player 4
player_4_volume_value.innerHTML = "-40";
player_4_playback_rate_value.innerHTML = 100;
channel_4_songName.innerHTML = `No Song Loaded`;
channel_4_filter_frequency_value_allpass.innerHTML = "20";
channel_4_filter_frequency_value_shelf.innerHTML = "20";
channel_4_filter_frequency_value_peaking.innerHTML = "20";
channel_4_filter_Q_value_allpass.innerHTML = "0";
channel_4_filter_Q_value_peaking.innerHTML = "0";
channel_4_filter_detune_value_allpass.innerHTML = "0";
channel_4_filter_detune_value_shelf.innerHTML = "0";
channel_4_filter_detune_value_peaking.innerHTML = "0";
channel_4_filter_gain_value_shelf.innerHTML = "0";
channel_4_filter_gain_value_peaking.innerHTML = "0";
channel_4_fxSend_1_value.innerHTML = "0";
channel_4_fxSend_2_value.innerHTML = "0";
channel_4_fxSend_3_value.innerHTML = "0";
channel_4_fxSend_4_value.innerHTML = "0";
channel_4_dynamics_ratio.innerHTML = 0;
channel_4_dynamics_threshold.innerHTML = 0;
channel_4_dynamics_release.innerHTML = 0;
channel_4_dynamics_attack.innerHTML = 0;
channel_4_dynamics_knee.innerHTML = 0;
channel_4_dynamics_ratio_value.innerHTML = 0;
channel_4_dynamics_threshold_value.innerHTML = 0;
channel_4_dynamics_release_value.innerHTML = 0;
channel_4_dynamics_attack_value.innerHTML = 0;
channel_4_dynamics_knee_value.innerHTML = 0;

//************************************************************************** */
//************************************************************************** */
//***********************  FX 1  AUTO FILTER    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_1_AutoFilter_Node = new Tone.AutoFilter(
  {
    frequency: 1,
    type: "sine",
    depth: 1,
    baseFrequency: 200,
    octaves: 2.6,
    filter: {
      type: "lowpass",
      rolloff: -12,
      Q: 1,
      wet: 1
    }
  });

const fx_1_autofilter_div = document.getElementById("fx_1_autofilter_div");
fx_1_autofilter_div.style.display = "none";

const fx_1_autofilter_baseFrequency = document.getElementById("fx_1_autofilter_baseFrequency");
const fx_1_autofilter_baseFrequency_value = document.getElementById("fx_1_autofilter_baseFrequency_value");
fx_1_autofilter_baseFrequency.addEventListener("change", function (e) {
  fx_1_AutoFilter_Node.baseFrequency = e.currentTarget.value;
  fx_1_autofilter_baseFrequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autofilter_baseFrequency", e.currentTarget.value);
});

const fx_1_autofilter_depth = document.getElementById("fx_1_autofilter_depth");
const fx_1_autofilter_depth_value = document.getElementById("fx_1_autofilter_depth_value");
fx_1_autofilter_depth.addEventListener("change", function (e) {
  fx_1_AutoFilter_Node.depth.value = e.currentTarget.value;
  fx_1_autofilter_depth_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autofilter_depth", e.currentTarget.value);
});

const fx_1_autofilter_frequency = document.getElementById("fx_1_autofilter_frequency");
const fx_1_autofilter_frequency_value = document.getElementById("fx_1_autofilter_frequency_value");
fx_1_autofilter_frequency.addEventListener("change", function (e) {
  fx_1_AutoFilter_Node.frequency.value = e.currentTarget.value;
  fx_1_autofilter_frequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autofilter_frequency", e.currentTarget.value);
});

const fx_1_autofilter_octaves = document.getElementById("fx_1_autofilter_octaves");
const fx_1_autofilter_octaves_value = document.getElementById("fx_1_autofilter_octaves_value");
fx_1_autofilter_octaves.addEventListener("change", function (e) {
  fx_1_AutoFilter_Node.octaves = e.currentTarget.value;
  fx_1_autofilter_octaves_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autofilter_octaves", e.currentTarget.value);
});

const fx_1_autofilter_select_type = document.getElementById("fx_1_autofilter_select_type");
fx_1_autofilter_select_type.addEventListener("change", function (e) {
  fx_1_AutoFilter_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autofilter_select_type", e.currentTarget.value);
});

/*
QUE SE PUEDE HAER CON EL FILTRO???, HAY CONTROL TOTAL???
interface AutoFilterOptions {
    filter: Omit<FilterOptions, "gain" | "frequency" | "detune" | (keyof SourceOptions)>;
 type: ToneOscillatorType;
}
*/

//************************************************************************** */
//************************************************************************** */
//***********************  FX 1  AUTO PANNER    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_1_AutoPanner_Node = new Tone.AutoPanner({
  frequency: 1,
  type: "sine",
  depth: 1,
  wet: 1
});
const fx_1_autopanner_div = document.getElementById("fx_1_autopanner_div");
fx_1_autopanner_div.style.display = "none";

const fx_1_autoPanner_frequency = document.getElementById("fx_1_autoPanner_frequency");
const fx_1_autoPanner_frequency_value = document.getElementById("fx_1_autoPanner_frequency_value");
fx_1_autoPanner_frequency.addEventListener("change", function (e) {
  fx_1_AutoPanner_Node.frequency.value = e.currentTarget.value;
  fx_1_autoPanner_frequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoPanner_frequency", e.currentTarget.value);
});

const fx_1_autoPanner_depth = document.getElementById("fx_1_autoPanner_depth");
const fx_1_autoPanner_depth_value = document.getElementById("fx_1_autoPanner_depth_value");
fx_1_autoPanner_depth.addEventListener("change", function (e) {
  fx_1_AutoPanner_Node.depth.value = e.currentTarget.value;
  fx_1_autoPanner_depth_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoPanner_depth", e.currentTarget.value);
});

const fx_1_autoPanner_select_type = document.getElementById("fx_1_autoPanner_select_type");
const fx_1_autoPanner_select_type_value = document.getElementById("fx_1_autoPanner_select_type_value");
fx_1_autoPanner_select_type.addEventListener("change", function (e) {
  fx_1_AutoPanner_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoPanner_select_type", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 1  AUTO WAH    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_1_AutoWah_Node = new Tone.AutoWah({
  wet: 1,
  baseFrequency: 100,
  octaves: 6,
  sensitivity: 0,
  Q: 2,
  gain: 2,
  follower: {
    attack: 0.3,
    release: 0.5,
  }
});
const fx_1_autowah_div = document.getElementById("fx_1_autowah_div");
fx_1_autowah_div.style.display = "none";

const fx_1_autoWah_octaves = document.getElementById("fx_1_autoWah_octaves");
const fx_1_autoWah_octaves_value = document.getElementById("fx_1_autoWah_octaves_value");
fx_1_autoWah_octaves.addEventListener("change", function (e) {
  fx_1_AutoWah_Node.octaves = e.currentTarget.value;
  fx_1_autoWah_octaves_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoWah_octaves", e.currentTarget.value);
});

const fx_1_autoWah_sensitivity = document.getElementById("fx_1_autoWah_sensitivity");
const fx_1_autoWah_sensitivity_value = document.getElementById("fx_1_autoWah_sensitivity_value");
fx_1_autoWah_sensitivity.addEventListener("change", function (e) {
  fx_1_AutoWah_Node.sensitivity = e.currentTarget.value;
  fx_1_autoWah_sensitivity_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoWah_sensitivity", e.currentTarget.value);
});

const fx_1_autoWah_Q = document.getElementById("fx_1_autoWah_Q");
const fx_1_autoWah_Q_value = document.getElementById("fx_1_autoWah_Q_value");
fx_1_autoWah_Q.addEventListener("change", function (e) {
  fx_1_AutoWah_Node.Q.value = e.currentTarget.value;
  fx_1_autoWah_Q_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoWah_Q", e.currentTarget.value);
});

const fx_1_autoWah_gain = document.getElementById("fx_1_autoWah_gain");
const fx_1_autoWah_gain_value = document.getElementById("fx_1_autoWah_gain_value");
fx_1_autoWah_gain.addEventListener("change", function (e) {
  fx_1_AutoWah_Node.gain.value = e.currentTarget.value;
  fx_1_autoWah_gain_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoWah_gain", e.currentTarget.value);
});

const fx_1_autoWah_follower = document.getElementById("fx_1_autoWah_follower");
const fx_1_autoWah_follower_value = document.getElementById("fx_1_autoWah_follower_value");
fx_1_autoWah_follower.addEventListener("change", function (e) {
  fx_1_AutoWah_Node.follower = e.currentTarget.value;
  fx_1_autoWah_follower_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoWah_follower", e.currentTarget.value);
});

const fx_1_autoWah_baseFrequency = document.getElementById("fx_1_autoWah_baseFrequency");
const fx_1_autoWah_baseFrequency_value = document.getElementById("fx_1_autoWah_baseFrequency_value");
fx_1_autoWah_baseFrequency.addEventListener("change", function (e) {
  fx_1_AutoWah_Node.baseFrequency = e.currentTarget.value;
  fx_1_autoWah_baseFrequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_autoWah_baseFrequency", e.currentTarget.value);
});
/**/
//************************************************************************** */
//************************************************************************** */
//***********************  FX 1  BIT CRUSHER    ******************* */
//************************************************************************** */
//************************************************************************** */

//const fx_1_bitCrusher_Node = new Tone.BitCrusher();
//fx_1_bitCrusher_Node.wet = 1;
/*
const fx_1_bitCrusher_text = document.getElementById("fx_1_bitCrusher_text");
const fx_1_bitCrusher = document.getElementById("fx_1_bitCrusher");
const fx_1_bitCrusher_value = document.getElementById("fx_1_bitCrusher_value");

const fx_1_bitCrusher_div = document.getElementById("fx_1_bitCrusher_div");
fx_1_bitCrusher_div.style.display = "none";
/**/
//************************************************************************** */
//************************************************************************** */
//*********************** FX 1   CHEBYSHEV    ******************* */
//************************************************************************** */
//************************************************************************** */
/*
const fx_1_Chebyshev_Node = new Tone.Chebyshev({
  //order : 1 ,
  //oversample : "none",
  wet: 1
});


const fx_1_Chebyshev_div = document.getElementById("fx_1_Chebyshev_div");
fx_1_Chebyshev_div.style.display = "none";

const fx_1_Chebyshev_order = document.getElementById("fx_1_Chebyshev_order");
const fx_1_Chebyshev_order_value = document.getElementById("fx_1_Chebyshev_order_value");
fx_1_Chebyshev_order.addEventListener("change", function (e) {
  fx_1_Chebyshev_Node.order = Math.round(`${e.currentTarget.value}`);
  fx_1_Chebyshev_order_value.innerHTML = `${e.currentTarget.value}`;
});

const fx_1_Chebyshev_select_type = document.getElementById("fx_1_Chebyshev_select_type");
const fx_1_Chebyshev_select_type_value = document.getElementById("fx_1_Chebyshev_select_type_value");
fx_1_Chebyshev_select_type.addEventListener("change", function (e) {
  fx_1_Chebyshev_Node.type = e.currentTarget.value;
});
/**/
//************************************************************************** */
//************************************************************************** */
//*********************** FX 1   CHORUS    ******************* */
//************************************************************************** */
//************************************************************************** */
/*
const fx_1_chorus_Node = new Tone.Chorus({
  wet: 1
});

const fx_1_chorus_div = document.getElementById("fx_1_chorus_div");
fx_1_chorus_div.style.display = "none";

const fx_1_chorus_delayTime = document.getElementById("fx_1_chorus_delayTime");
const fx_1_chorus_delayTime_value = document.getElementById("fx_1_chorus_delayTime_value");
fx_1_chorus_delayTime.addEventListener("change", function (e) {
  fx_1_chorus_Node.delayTime = e.currentTarget.value;
  fx_1_chorus_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_chorus_delayTime", e.currentTarget.value);
});

const fx_1_chorus_freq = document.getElementById("fx_1_chorus_freq");
const fx_1_chorus_freq_value = document.getElementById("fx_1_chorus_freq_value");
fx_1_chorus_freq.addEventListener("change", function (e) {
  fx_1_chorus_Node.frequency.value = e.currentTarget.value;
  fx_1_chorus_freq_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_chorus_freq", e.currentTarget.value);
});

const fx_1_chorus_depth = document.getElementById("fx_1_chorus_depth");
const fx_1_chorus_depth_value = document.getElementById("fx_1_chorus_depth_value");
fx_1_chorus_depth.addEventListener("change", function (e) {
  fx_1_chorus_Node.depth = e.currentTarget.value;
  fx_1_chorus_depth_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_chorus_depth", e.currentTarget.value);
});

const fx_1_chorus_spread = document.getElementById("fx_1_chorus_spread");
const fx_1_chorus_spread_value = document.getElementById("fx_1_chorus_spread_value");
fx_1_chorus_spread.addEventListener("change", function (e) {
  fx_1_chorus_Node.spread = e.currentTarget.value;
  fx_1_chorus_spread_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_chorus_spread", e.currentTarget.value);
});

const fx_1_chorus_feedback = document.getElementById("fx_1_chorus_feedback");
const fx_1_chorus_feedback_value = document.getElementById("fx_1_chorus_feedback_value");
fx_1_chorus_feedback.addEventListener("change", function (e) {
  fx_1_chorus_Node.feedback.value = e.currentTarget.value;
  fx_1_chorus_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_chorus_feedback", e.currentTarget.value);
});

const fx_1_chorus_select_type = document.getElementById("fx_1_chorus_select_type");
fx_1_chorus_select_type.addEventListener("change", function (e) {
  fx_1_chorus_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_chorus_select_type", e.currentTarget.value);
});
/**/
//************************************************************************** */
//************************************************************************** */
//*********************** FX 1   DISTORTION       ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_1_distortion_Node = new Tone.Distortion({
  wet: 1
});

const fx_1_distortion_div = document.getElementById("fx_1_distortion_div");
fx_1_distortion_div.style.display = "none";

const fx_1_distortion = document.getElementById("fx_1_distortion");
const fx_1_distortion_value = document.getElementById("fx_1_distortion_value");
fx_1_distortion.addEventListener("change", function (e) {
  fx_1_distortion_Node.distortion = e.currentTarget.value;
  fx_1_distortion_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_distortion", e.currentTarget.value);
});

const fx_1_distortion_select_type = document.getElementById("fx_1_distortion_select_type");
fx_1_distortion_select_type.addEventListener("change", function (e) {
  fx_1_distortion_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_distortion_select_type", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 1   FeedbackDelay       ******************* */
//************************************************************************** */
//************************************************************************** */
/*
const fx_1_feedback_Node = new Tone.FeedbackDelay({
  wet: 1
});

const fx_1_feedback_div = document.getElementById("fx_1_feedback_div");
fx_1_feedback_div.style.display = "none";

const fx_1_feedback = document.getElementById("fx_1_feedback");
const fx_1_feedback_value = document.getElementById("fx_1_feedback_value");
fx_1_feedback.addEventListener("change", function (e) {
  fx_1_feedback_Node.feedback.value = e.currentTarget.value;
  fx_1_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_feedback", e.currentTarget.value);
});

const fx_1_feedback_delayTime = document.getElementById("fx_1_feedback_delayTime");
const fx_1_feedback_delayTime_value = document.getElementById("fx_1_feedback_delayTime_value");
fx_1_feedback_delayTime.addEventListener("change", function (e) {
  fx_1_feedback_Node.delayTime.value = e.currentTarget.value;
  fx_1_feedback_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_feedback_delayTime", e.currentTarget.value);
});

const fx_1_feedback_maxDelay = document.getElementById("fx_1_feedback_maxDelay");
const fx_1_feedback_maxDelay_value = document.getElementById("fx_1_feedback_maxDelay_value");
fx_1_feedback_maxDelay.addEventListener("change", function (e) {
  fx_1_feedback_Node.maxDelay = e.currentTarget.value;
  fx_1_feedback_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_feedback_maxDelay", e.currentTarget.value);
});
/**/

//************************************************************************** */
//************************************************************************** */
//***********************  FX 1  PING PONG    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_1_pingpong_Node = new Tone.PingPongDelay({
  wet: 1
});

const fx_1_pingpong_div = document.getElementById("fx_1_pingpong_div");
fx_1_pingpong_div.style.display = "none";

const fx_1_pingpong_feedback = document.getElementById("fx_1_pingpong_feedback");
const fx_1_pingpong_feedback_value = document.getElementById("fx_1_pingpong_feedback_value");
fx_1_pingpong_feedback.addEventListener("change", function (e) {
  fx_1_pingpong_Node.feedback.value = e.currentTarget.value;
  fx_1_pingpong_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_pingpong_feedback", e.currentTarget.value);
});

const fx_1_pingpong_delayTime = document.getElementById("fx_1_pingpong_delayTime");
const fx_1_pingpong_delayTime_value = document.getElementById("fx_1_pingpong_delayTime_value");
fx_1_pingpong_delayTime.addEventListener("change", function (e) {
  fx_1_pingpong_Node.delayTime.value = e.currentTarget.value;
  fx_1_pingpong_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_pingpong_delayTime", e.currentTarget.value);
});

const fx_1_pingpong_maxDelay = document.getElementById("fx_1_pingpong_maxDelay");
const fx_1_pingpong_maxDelay_value = document.getElementById("fx_1_pingpong_maxDelay_value");
fx_1_pingpong_maxDelay.addEventListener("change", function (e) {
  fx_1_pingpong_Node.maxDelay = e.currentTarget.value;
  fx_1_pingpong_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_pingpong_maxDelay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 1  VIBRATO    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_1_vibrato_Node = new Tone.Vibrato({
  wet: 1
});
const fx_1_vibrato_div = document.getElementById("fx_1_vibrato_div");
fx_1_vibrato_div.style.display = "none";

const fx_1_vibrato_frequency = document.getElementById("fx_1_vibrato_frequency");
const fx_1_vibrato_frequency_value = document.getElementById("fx_1_vibrato_frequency_value");
fx_1_vibrato_frequency.addEventListener("change", function (e) {
  fx_1_vibrato_Node.frequency.value = e.currentTarget.value;
  fx_1_vibrato_frequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_vibrato_frequency", e.currentTarget.value);
});

const fx_1_vibrato_depth = document.getElementById("fx_1_vibrato_depth");
const fx_1_vibrato_depth_value = document.getElementById("fx_1_vibrato_depth_value");
fx_1_vibrato_depth.addEventListener("change", function (e) {
  fx_1_vibrato_Node.depth.value = e.currentTarget.value;
  fx_1_vibrato_depth_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_vibrato_depth", e.currentTarget.value);
});

const fx_1_vibrato_maxDelay = document.getElementById("fx_1_vibrato_maxDelay");
const fx_1_vibrato_maxDelay_value = document.getElementById("fx_1_vibrato_maxDelay_value");
fx_1_vibrato_maxDelay.addEventListener("change", function (e) {
  fx_1_vibrato_Node.maxDelay = e.currentTarget.value;
  fx_1_vibrato_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_vibrato_maxDelay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 2   DISTORTION       ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_2_distortion_Node = new Tone.Distortion({
  wet: 1
});

const fx_2_distortion_div = document.getElementById("fx_2_distortion_div");
fx_2_distortion_div.style.display = "none";

const fx_2_distortion = document.getElementById("fx_2_distortion");
const fx_2_distortion_value = document.getElementById("fx_2_distortion_value");
fx_2_distortion.addEventListener("change", function (e) {
  fx_2_distortion_Node.distortion = e.currentTarget.value;
  fx_2_distortion_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_distortion", e.currentTarget.value);
});

const fx_2_distortion_select_type = document.getElementById("fx_2_distortion_select_type");
fx_2_distortion_select_type.addEventListener("change", function (e) {
  fx_2_distortion_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_distortion_select_type", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 2   FeedbackDelay       ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_2_feedback_Node = new Tone.FeedbackDelay({
  wet: 1
});

const fx_2_feedback_div = document.getElementById("fx_2_feedback_div");
fx_2_feedback_div.style.display = "none";

const fx_2_feedback = document.getElementById("fx_2_feedback");
const fx_2_feedback_value = document.getElementById("fx_2_feedback_value");
fx_2_feedback.addEventListener("change", function (e) {
  fx_2_feedback_Node.feedback.value = e.currentTarget.value;
  fx_2_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_feedback", e.currentTarget.value);
});

const fx_2_feedback_delayTime = document.getElementById("fx_2_feedback_delayTime");
const fx_2_feedback_delayTime_value = document.getElementById("fx_2_feedback_delayTime_value");
fx_2_feedback_delayTime.addEventListener("change", function (e) {
  fx_2_feedback_Node.delayTime.value = e.currentTarget.value;
  fx_2_feedback_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_feedback_delayTime", e.currentTarget.value);
});

const fx_2_feedback_maxDelay = document.getElementById("fx_2_feedback_maxDelay");
const fx_2_feedback_maxDelay_value = document.getElementById("fx_2_feedback_maxDelay_value");
fx_2_feedback_maxDelay.addEventListener("change", function (e) {
  fx_2_feedback_Node.maxDelay = e.currentTarget.value;
  fx_2_feedback_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_feedback_maxDelay", e.currentTarget.value);
});


//************************************************************************** */
//************************************************************************** */
//***********************  FX 2  PHASER    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_2_phaser_Node = new Tone.Phaser({
  wet: 1
});
const fx_2_phaser_div = document.getElementById("fx_2_phaser_div");
fx_2_phaser_div.style.display = "none";

const fx_2_phaser_frequency = document.getElementById("fx_2_phaser_frequency");
const fx_2_phaser_frequency_value = document.getElementById("fx_2_phaser_frequency_value");
fx_2_phaser_frequency.addEventListener("change", function (e) {
  fx_2_phaser_Node.frequency.value = e.currentTarget.value;
  fx_2_phaser_frequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_phaser_frequency", e.currentTarget.value);
});

const fx_2_phaser_octaves = document.getElementById("fx_2_phaser_octaves");
const fx_2_phaser_octaves_value = document.getElementById("fx_2_phaser_octaves_value");
fx_2_phaser_octaves.addEventListener("change", function (e) {
  fx_2_phaser_Node.octaves = e.currentTarget.value;
  fx_2_phaser_octaves_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_phaser_octaves", e.currentTarget.value);
});

const fx_2_phaser_Q = document.getElementById("fx_2_phaser_Q");
const fx_2_phaser_Q_value = document.getElementById("fx_2_phaser_Q_value");
fx_2_phaser_Q.addEventListener("change", function (e) {
  fx_2_phaser_Node.Q.value = e.currentTarget.value;
  fx_2_phaser_Q_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_phaser_Q", e.currentTarget.value);
});

const fx_2_phaser_baseFrequency = document.getElementById("fx_2_phaser_baseFrequency");
const fx_2_phaser_baseFrequency_value = document.getElementById("fx_2_phaser_baseFrequency_value");
fx_2_phaser_baseFrequency.addEventListener("change", function (e) {
  fx_2_phaser_Node.baseFrequency = e.currentTarget.value;
  fx_2_phaser_baseFrequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_phaser_baseFrequency", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 2  PING PONG    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_2_pingpong_Node = new Tone.PingPongDelay({
  wet: 1
});

const fx_2_pingpong_div = document.getElementById("fx_2_pingpong_div");
fx_2_pingpong_div.style.display = "none";

const fx_2_pingpong_feedback = document.getElementById("fx_2_pingpong_feedback");
const fx_2_pingpong_feedback_value = document.getElementById("fx_2_pingpong_feedback_value");
fx_2_pingpong_feedback.addEventListener("change", function (e) {
  fx_2_pingpong_Node.feedback.value = e.currentTarget.value;
  fx_2_pingpong_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pingpong_feedback", e.currentTarget.value);
});

const fx_2_pingpong_delayTime = document.getElementById("fx_2_pingpong_delayTime");
const fx_2_pingpong_delayTime_value = document.getElementById("fx_2_pingpong_delayTime_value");
fx_2_pingpong_delayTime.addEventListener("change", function (e) {
  fx_2_pingpong_Node.delayTime.value = e.currentTarget.value;
  fx_2_pingpong_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pingpong_delayTime", e.currentTarget.value);
});

const fx_2_pingpong_maxDelay = document.getElementById("fx_2_pingpong_maxDelay");
const fx_2_pingpong_maxDelay_value = document.getElementById("fx_2_pingpong_maxDelay_value");
fx_2_pingpong_maxDelay.addEventListener("change", function (e) {
  fx_2_pingpong_Node.maxDelay = e.currentTarget.value;
  fx_2_pingpong_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pingpong_maxDelay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 2   Pitchshift    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_2_pitchshift_Node = new Tone.PitchShift({
  wet: 1
});
const fx_2_pitchshift_div = document.getElementById("fx_2_pitchshift_div");
fx_2_pitchshift_div.style.display = "none";

const fx_2_pitchshift_feedback = document.getElementById("fx_2_pitchshift_feedback");
const fx_2_pitchshift_feedback_value = document.getElementById("fx_2_pitchshift_feedback_value");
fx_2_pitchshift_feedback.addEventListener("change", function (e) {
  fx_2_pitchshift_Node.feedback.value = e.currentTarget.value;
  fx_2_pitchshift_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pitchshift_feedback", e.currentTarget.value);
});

const fx_2_pitchshift_delayTime = document.getElementById("fx_2_pitchshift_delayTime");
const fx_2_pitchshift_delayTime_value = document.getElementById("fx_2_pitchshift_delayTime_value");
fx_2_pitchshift_delayTime.addEventListener("change", function (e) {
  fx_2_pitchshift_Node.delayTime.value = e.currentTarget.value;
  fx_2_pitchshift_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pitchshift_delayTime", e.currentTarget.value);
});

const fx_2_pitchshift_pitch = document.getElementById("fx_2_pitchshift_pitch");
const fx_2_pitchshift_pitch_value = document.getElementById("fx_2_pitchshift_pitch_value");
fx_2_pitchshift_pitch.addEventListener("change", function (e) {
  fx_2_pitchshift_Node.pitch = e.currentTarget.value;
  fx_2_pitchshift_pitch_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pitchshift_pitch", e.currentTarget.value);
});

const fx_2_pitchshift_windowSize = document.getElementById("fx_2_pitchshift_windowSize");
const fx_2_pitchshift_windowSize_value = document.getElementById("fx_2_pitchshift_windowSize_value");
fx_2_pitchshift_windowSize.addEventListener("change", function (e) {
  fx_2_pitchshift_Node.windowSize = e.currentTarget.value;
  fx_2_pitchshift_windowSize_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pitchshift_windowSize", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 2  REVERB    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_2_reverb_Node = new Tone.Reverb({
  wet: 1
});
fx_2_reverb_Node.generate();
fx_2_reverb_Node.normalize = true;

const fx_2_reverb_div = document.getElementById("fx_2_reverb_div");
fx_2_reverb_div.style.display = "none";

const fx_2_reverb_preDelay = document.getElementById("fx_2_reverb_preDelay");
const fx_2_reverb_preDelay_value = document.getElementById("fx_2_reverb_preDelay_value");
fx_2_reverb_preDelay.addEventListener("change", function (e) {
  fx_2_reverb_Node.preDelay = e.currentTarget.value;
  fx_2_reverb_preDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_reverb_preDelay", e.currentTarget.value);
});

const fx_2_reverb_decay = document.getElementById("fx_2_reverb_decay");
const fx_2_reverb_decay_value = document.getElementById("fx_2_reverb_decay_value");
fx_2_reverb_decay.addEventListener("change", function (e) {
  fx_2_reverb_Node.decay = e.currentTarget.value;
  fx_2_reverb_decay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_reverb_decay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//************************************************************************** */
//*********************** FX 3   CHORUS    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_3_chorus_Node = new Tone.Chorus({
  wet: 1
});

const fx_3_chorus_div = document.getElementById("fx_3_chorus_div");
fx_3_chorus_div.style.display = "none";

const fx_3_chorus_delayTime = document.getElementById("fx_3_chorus_delayTime");
const fx_3_chorus_delayTime_value = document.getElementById("fx_3_chorus_delayTime_value");
fx_3_chorus_delayTime.addEventListener("change", function (e) {
  fx_3_chorus_Node.delayTime = e.currentTarget.value;
  fx_3_chorus_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_chorus_delayTime", e.currentTarget.value);
});

const fx_3_chorus_freq = document.getElementById("fx_3_chorus_freq");
const fx_3_chorus_freq_value = document.getElementById("fx_3_chorus_freq_value");
fx_3_chorus_freq.addEventListener("change", function (e) {
  fx_3_chorus_Node.frequency.value = e.currentTarget.value;
  fx_3_chorus_freq_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_chorus_freq", e.currentTarget.value);
});

const fx_3_chorus_depth = document.getElementById("fx_3_chorus_depth");
const fx_3_chorus_depth_value = document.getElementById("fx_3_chorus_depth_value");
fx_3_chorus_depth.addEventListener("change", function (e) {
  fx_3_chorus_Node.depth = e.currentTarget.value;
  fx_3_chorus_depth_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_chorus_depth", e.currentTarget.value);
});

const fx_3_chorus_spread = document.getElementById("fx_3_chorus_spread");
const fx_3_chorus_spread_value = document.getElementById("fx_3_chorus_spread_value");
fx_3_chorus_spread.addEventListener("change", function (e) {
  fx_3_chorus_Node.spread = e.currentTarget.value;
  fx_3_chorus_spread_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_chorus_spread", e.currentTarget.value);
});

const fx_3_chorus_feedback = document.getElementById("fx_3_chorus_feedback");
const fx_3_chorus_feedback_value = document.getElementById("fx_3_chorus_feedback_value");
fx_3_chorus_feedback.addEventListener("change", function (e) {
  fx_3_chorus_Node.feedback.value = e.currentTarget.value;
  fx_3_chorus_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_chorus_feedback", e.currentTarget.value);
});

const fx_3_chorus_select_type = document.getElementById("fx_3_chorus_select_type");
fx_3_chorus_select_type.addEventListener("change", function (e) {
  fx_3_chorus_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_chorus_select_type", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 3   FeedbackDelay       ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_3_feedback_Node = new Tone.FeedbackDelay({
  wet: 1
});

const fx_3_feedback_div = document.getElementById("fx_3_feedback_div");
fx_3_feedback_div.style.display = "none";

const fx_3_feedback = document.getElementById("fx_3_feedback");
const fx_3_feedback_value = document.getElementById("fx_3_feedback_value");
fx_3_feedback.addEventListener("change", function (e) {
  fx_3_feedback_Node.feedback.value = e.currentTarget.value;
  fx_3_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_feedback", e.currentTarget.value);
});

const fx_3_feedback_delayTime = document.getElementById("fx_3_feedback_delayTime");
const fx_3_feedback_delayTime_value = document.getElementById("fx_3_feedback_delayTime_value");
fx_3_feedback_delayTime.addEventListener("change", function (e) {
  fx_3_feedback_Node.delayTime.value = e.currentTarget.value;
  fx_3_feedback_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_feedback_delayTime", e.currentTarget.value);
});

const fx_3_feedback_maxDelay = document.getElementById("fx_3_feedback_maxDelay");
const fx_3_feedback_maxDelay_value = document.getElementById("fx_3_feedback_maxDelay_value");
fx_3_feedback_maxDelay.addEventListener("change", function (e) {
  fx_3_feedback_Node.maxDelay = e.currentTarget.value;
  fx_3_feedback_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_feedback_maxDelay", e.currentTarget.value);
});

//*****************************************************************************************************
//*****************************************************************************************************
//******************************  FX 3 FrequencyShifter     ****************************************
//*****************************************************************************************************
//*****************************************************************************************************
const fx_3_FrequencyShifter_Node = new Tone.FrequencyShifter({
  wet: 1
});
const fx_3_frequencyShifter_div = document.getElementById("fx_3_frequencyShifter_div");
fx_3_frequencyShifter_div.style.display = "none";

const fx_3_frequencyShifter = document.getElementById("fx_3_frequencyShifter");
const fx_3_frequencyShifter_value = document.getElementById("fx_3_frequencyShifter_value");
fx_3_frequencyShifter.addEventListener("change", function (e) {
  fx_3_FrequencyShifter_Node.frequency.value = e.currentTarget.value;
  fx_3_frequencyShifter_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_frequencyShifter", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 3  PING PONG    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_3_pingpong_Node = new Tone.PingPongDelay({
  wet: 1
});

const fx_3_pingpong_div = document.getElementById("fx_3_pingpong_div");
fx_3_pingpong_div.style.display = "none";

const fx_3_pingpong_feedback = document.getElementById("fx_3_pingpong_feedback");
const fx_3_pingpong_feedback_value = document.getElementById("fx_3_pingpong_feedback_value");
fx_3_pingpong_feedback.addEventListener("change", function (e) {
  fx_3_pingpong_Node.feedback.value = e.currentTarget.value;
  fx_3_pingpong_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pingpong_feedback", e.currentTarget.value);
});

const fx_3_pingpong_delayTime = document.getElementById("fx_3_pingpong_delayTime");
const fx_3_pingpong_delayTime_value = document.getElementById("fx_3_pingpong_delayTime_value");
fx_3_pingpong_delayTime.addEventListener("change", function (e) {
  fx_3_pingpong_Node.delayTime.value = e.currentTarget.value;
  fx_3_pingpong_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pingpong_delayTime", e.currentTarget.value);
});

const fx_3_pingpong_maxDelay = document.getElementById("fx_3_pingpong_maxDelay");
const fx_3_pingpong_maxDelay_value = document.getElementById("fx_3_pingpong_maxDelay_value");
fx_3_pingpong_maxDelay.addEventListener("change", function (e) {
  fx_3_pingpong_Node.maxDelay = e.currentTarget.value;
  fx_3_pingpong_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pingpong_maxDelay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 3   Pitchshift    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_3_pitchshift_Node = new Tone.PitchShift({
  wet: 1
});
const fx_3_pitchshift_div = document.getElementById("fx_3_pitchshift_div");
fx_3_pitchshift_div.style.display = "none";

const fx_3_pitchshift_feedback = document.getElementById("fx_3_pitchshift_feedback");
const fx_3_pitchshift_feedback_value = document.getElementById("fx_3_pitchshift_feedback_value");
fx_3_pitchshift_feedback.addEventListener("change", function (e) {
  fx_3_pitchshift_Node.feedback.value = e.currentTarget.value;
  fx_3_pitchshift_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pitchshift_feedback", e.currentTarget.value);
});

const fx_3_pitchshift_delayTime = document.getElementById("fx_3_pitchshift_delayTime");
const fx_3_pitchshift_delayTime_value = document.getElementById("fx_3_pitchshift_delayTime_value");
fx_3_pitchshift_delayTime.addEventListener("change", function (e) {
  fx_3_pitchshift_Node.delayTime.value = e.currentTarget.value;
  fx_3_pitchshift_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pitchshift_delayTime", e.currentTarget.value);
});

const fx_3_pitchshift_pitch = document.getElementById("fx_3_pitchshift_pitch");
const fx_3_pitchshift_pitch_value = document.getElementById("fx_3_pitchshift_pitch_value");
fx_3_pitchshift_pitch.addEventListener("change", function (e) {
  fx_3_pitchshift_Node.pitch = e.currentTarget.value;
  fx_3_pitchshift_pitch_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pitchshift_pitch", e.currentTarget.value);
});

const fx_3_pitchshift_windowSize = document.getElementById("fx_3_pitchshift_windowSize");
const fx_3_pitchshift_windowSize_value = document.getElementById("fx_3_pitchshift_windowSize_value");
fx_3_pitchshift_windowSize.addEventListener("change", function (e) {
  fx_3_pitchshift_Node.windowSize = e.currentTarget.value;
  fx_3_pitchshift_windowSize_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_pitchshift_windowSize", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 3  REVERB    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_3_reverb_Node = new Tone.Reverb({
  wet: 1
});
fx_3_reverb_Node.generate();
fx_3_reverb_Node.normalize = true;

const fx_3_reverb_div = document.getElementById("fx_3_reverb_div");
fx_3_reverb_div.style.display = "none";

const fx_3_reverb_preDelay = document.getElementById("fx_3_reverb_preDelay");
const fx_3_reverb_preDelay_value = document.getElementById("fx_3_reverb_preDelay_value");
fx_3_reverb_preDelay.addEventListener("change", function (e) {
  fx_3_reverb_Node.preDelay = e.currentTarget.value;
  fx_3_reverb_preDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_reverb_preDelay", e.currentTarget.value);
});

const fx_3_reverb_decay = document.getElementById("fx_3_reverb_decay");
const fx_3_reverb_decay_value = document.getElementById("fx_3_reverb_decay_value");
fx_3_reverb_decay.addEventListener("change", function (e) {
  fx_3_reverb_Node.decay = e.currentTarget.value;
  fx_3_reverb_decay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_3_reverb_decay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//*********************** FX 4   CHORUS    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_4_chorus_Node = new Tone.Chorus({
  wet: 1
});

const fx_4_chorus_div = document.getElementById("fx_4_chorus_div");
fx_4_chorus_div.style.display = "none";

const fx_4_chorus_delayTime = document.getElementById("fx_4_chorus_delayTime");
const fx_4_chorus_delayTime_value = document.getElementById("fx_4_chorus_delayTime_value");
fx_4_chorus_delayTime.addEventListener("change", function (e) {
  fx_4_chorus_Node.delayTime = e.currentTarget.value;
  fx_4_chorus_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_chorus_delayTime", e.currentTarget.value);
});

const fx_4_chorus_freq = document.getElementById("fx_4_chorus_freq");
const fx_4_chorus_freq_value = document.getElementById("fx_4_chorus_freq_value");
fx_4_chorus_freq.addEventListener("change", function (e) {
  fx_4_chorus_Node.frequency.value = e.currentTarget.value;
  fx_4_chorus_freq_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_chorus_freq", e.currentTarget.value);
});

const fx_4_chorus_depth = document.getElementById("fx_4_chorus_depth");
const fx_4_chorus_depth_value = document.getElementById("fx_4_chorus_depth_value");
fx_4_chorus_depth.addEventListener("change", function (e) {
  fx_4_chorus_Node.depth = e.currentTarget.value;
  fx_4_chorus_depth_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_chorus_depth", e.currentTarget.value);
});

const fx_4_chorus_spread = document.getElementById("fx_4_chorus_spread");
const fx_4_chorus_spread_value = document.getElementById("fx_4_chorus_spread_value");
fx_4_chorus_spread.addEventListener("change", function (e) {
  fx_4_chorus_Node.spread = e.currentTarget.value;
  fx_4_chorus_spread_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_chorus_spread", e.currentTarget.value);
});

const fx_4_chorus_feedback = document.getElementById("fx_4_chorus_feedback");
const fx_4_chorus_feedback_value = document.getElementById("fx_4_chorus_feedback_value");
fx_4_chorus_feedback.addEventListener("change", function (e) {
  fx_4_chorus_Node.feedback.value = e.currentTarget.value;
  fx_4_chorus_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_chorus_feedback", e.currentTarget.value);
});

const fx_4_chorus_select_type = document.getElementById("fx_4_chorus_select_type");
fx_4_chorus_select_type.addEventListener("change", function (e) {
  fx_4_chorus_Node.type = e.currentTarget.value;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_chorus_select_type", e.currentTarget.value);
});

//************************************************************************** */
//*********************** FX 4   FeedbackDelay       ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_4_feedback_Node = new Tone.FeedbackDelay({
  wet: 1
});

const fx_4_feedback_div = document.getElementById("fx_4_feedback_div");
fx_4_feedback_div.style.display = "none";

const fx_4_feedback = document.getElementById("fx_4_feedback");
const fx_4_feedback_value = document.getElementById("fx_4_feedback_value");
fx_4_feedback.addEventListener("change", function (e) {
  fx_4_feedback_Node.feedback.value = e.currentTarget.value;
  fx_4_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_feedback", e.currentTarget.value);
});

const fx_4_feedback_delayTime = document.getElementById("fx_4_feedback_delayTime");
const fx_4_feedback_delayTime_value = document.getElementById("fx_4_feedback_delayTime_value");
fx_4_feedback_delayTime.addEventListener("change", function (e) {
  fx_4_feedback_Node.delayTime.value = e.currentTarget.value;
  fx_4_feedback_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_feedback_delayTime", e.currentTarget.value);
});

const fx_4_feedback_maxDelay = document.getElementById("fx_4_feedback_maxDelay");
const fx_4_feedback_maxDelay_value = document.getElementById("fx_4_feedback_maxDelay_value");
fx_4_feedback_maxDelay.addEventListener("change", function (e) {
  fx_4_feedback_Node.maxDelay = e.currentTarget.value;
  fx_4_feedback_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_feedback_maxDelay", e.currentTarget.value);
});

//*****************************************************************************************************
//*****************************************************************************************************
//******************************  FX 4 FrequencyShifter     ****************************************
//*****************************************************************************************************
//*****************************************************************************************************
const fx_4_FrequencyShifter_Node = new Tone.FrequencyShifter({
  wet: 1
});
const fx_4_frequencyShifter_div = document.getElementById("fx_4_frequencyShifter_div");
fx_4_frequencyShifter_div.style.display = "none";

const fx_4_frequencyShifter = document.getElementById("fx_4_frequencyShifter");
const fx_4_frequencyShifter_value = document.getElementById("fx_4_frequencyShifter_value");
fx_4_frequencyShifter.addEventListener("change", function (e) {
  fx_4_FrequencyShifter_Node.frequency.value = e.currentTarget.value;
  fx_4_frequencyShifter_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_frequencyShifter", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 4  PHASER    ******************* */
//************************************************************************** */
//************************************************************************** */
const fx_4_phaser_Node = new Tone.Phaser({
  wet: 1
});
const fx_4_phaser_div = document.getElementById("fx_4_phaser_div");
fx_4_phaser_div.style.display = "none";

const fx_4_phaser_frequency = document.getElementById("fx_4_phaser_frequency");
const fx_4_phaser_frequency_value = document.getElementById("fx_4_phaser_frequency_value");
fx_4_phaser_frequency.addEventListener("change", function (e) {
  fx_4_phaser_Node.frequency.value = e.currentTarget.value;
  fx_4_phaser_frequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_phaser_frequency", e.currentTarget.value);
});

const fx_4_phaser_octaves = document.getElementById("fx_4_phaser_octaves");
const fx_4_phaser_octaves_value = document.getElementById("fx_4_phaser_octaves_value");
fx_4_phaser_octaves.addEventListener("change", function (e) {
  fx_4_phaser_Node.octaves = e.currentTarget.value;
  fx_4_phaser_octaves_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_phaser_octaves", e.currentTarget.value);
});

const fx_4_phaser_Q = document.getElementById("fx_4_phaser_Q");
const fx_4_phaser_Q_value = document.getElementById("fx_4_phaser_Q_value");
fx_4_phaser_Q.addEventListener("change", function (e) {
  fx_4_phaser_Node.Q.value = e.currentTarget.value;
  fx_4_phaser_Q_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_phaser_Q", e.currentTarget.value);
});

const fx_4_phaser_baseFrequency = document.getElementById("fx_4_phaser_baseFrequency");
const fx_4_phaser_baseFrequency_value = document.getElementById("fx_4_phaser_baseFrequency_value");
fx_4_phaser_baseFrequency.addEventListener("change", function (e) {
  fx_4_phaser_Node.baseFrequency = e.currentTarget.value;
  fx_4_phaser_baseFrequency_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_phaser_baseFrequency", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 4  PING PONG    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_4_pingpong_Node = new Tone.PingPongDelay({
  wet: 1
});

const fx_4_pingpong_div = document.getElementById("fx_4_pingpong_div");
fx_4_pingpong_div.style.display = "none";

const fx_4_pingpong_feedback = document.getElementById("fx_4_pingpong_feedback");
const fx_4_pingpong_feedback_value = document.getElementById("fx_4_pingpong_feedback_value");
fx_4_pingpong_feedback.addEventListener("change", function (e) {
  fx_4_pingpong_Node.feedback.value = e.currentTarget.value;
  fx_4_pingpong_feedback_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_pingpong_feedback", e.currentTarget.value);
});

const fx_4_pingpong_delayTime = document.getElementById("fx_4_pingpong_delayTime");
const fx_4_pingpong_delayTime_value = document.getElementById("fx_4_pingpong_delayTime_value");
fx_4_pingpong_delayTime.addEventListener("change", function (e) {
  fx_4_pingpong_Node.delayTime.value = e.currentTarget.value;
  fx_4_pingpong_delayTime_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_pingpong_delayTime", e.currentTarget.value);
});

const fx_4_pingpong_maxDelay = document.getElementById("fx_4_pingpong_maxDelay");
const fx_4_pingpong_maxDelay_value = document.getElementById("fx_4_pingpong_maxDelay_value");
fx_4_pingpong_maxDelay.addEventListener("change", function (e) {
  fx_4_pingpong_Node.maxDelay = e.currentTarget.value;
  fx_4_pingpong_maxDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_pingpong_maxDelay", e.currentTarget.value);
});

//************************************************************************** */
//************************************************************************** */
//***********************  FX 4  REVERB    ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_4_reverb_Node = new Tone.Reverb({
  wet: 1
});
fx_4_reverb_Node.generate();
fx_4_reverb_Node.normalize = true;

const fx_4_reverb_div = document.getElementById("fx_4_reverb_div");
fx_4_reverb_div.style.display = "none";

const fx_4_reverb_preDelay = document.getElementById("fx_4_reverb_preDelay");
const fx_4_reverb_preDelay_value = document.getElementById("fx_4_reverb_preDelay_value");
fx_4_reverb_preDelay.addEventListener("change", function (e) {
  fx_4_reverb_Node.preDelay = e.currentTarget.value;
  fx_4_reverb_preDelay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_reverb_preDelay", e.currentTarget.value);
});

const fx_4_reverb_decay = document.getElementById("fx_4_reverb_decay");
const fx_4_reverb_decay_value = document.getElementById("fx_4_reverb_decay_value");
fx_4_reverb_decay.addEventListener("change", function (e) {
  fx_4_reverb_Node.decay = e.currentTarget.value;
  fx_4_reverb_decay_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "fx_4_reverb_decay", e.currentTarget.value);
});
/**/

//************************************************************************** */
//************************************************************************** */
//***********************    NODE CONSTRUCTION CHANNEL 1    ******************* */
//************************************************************************** */
//************************************************************************** */

const channel_1_volNode = new Tone.Volume(-100).connect(masterVolumeNode);
const channel_1_rms_meter = new Tone.Meter(0);
channel_1_volNode.fan(channel_1_rms_meter);

const channel_1_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(channel_1_volNode);
const channel_1_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(channel_1_dynamics_limiterNode_Bypass);
const channel_1_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(channel_1_dynamics_gateNode_Bypass);
const channel_1_filter_Bypass = new Tone.Volume(0).connect(channel_1_dynamics_compressorNode_Bypass);

const channel_1_filter = new Tone.Filter();
//channel_1_filter.debug = true;
channel_1_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const channel_1_panNode = new Tone.Panner(0).connect(channel_1_filter_Bypass);

const channel_1_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_1_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_1_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_1_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_1_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_1_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_1_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_1_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_1_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_1_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_1_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_1_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_1_dynamics_limiterNode = new Tone.Limiter();
const channel_1_dynamics_gateNode = new Tone.Gate();
const channel_1_dynamics_compressorNode = new Tone.Compressor();

const player_1_Node = new Tone.Player("https://juliavra.github.io/Producer_E87_webSite/audio/110_Base_tranqui_reggae.mp3").connect(channel_1_panNode);
//player_1_Node.debug = true;

player_1_Node.onstop = () => {
  console.log("player_1_Node has stopped normally.");
  player_1_playButton.style.backgroundColor = "white";
  // Add any desired actions here, like updating UI or triggering another event.
};

channel_1_panNode.fan(channel_1_fxSend_1_preEq_volNode, channel_1_fxSend_2_preEq_volNode, channel_1_fxSend_3_preEq_volNode, channel_1_fxSend_4_preEq_volNode);
channel_1_filter.fan(channel_1_fxSend_1_postEq_volNode, channel_1_fxSend_2_postEq_volNode, channel_1_fxSend_3_postEq_volNode, channel_1_fxSend_4_postEq_volNode);

channel_1_volNode.fan(channel_1_fxSend_1_postFdr_volNode, channel_1_fxSend_2_postFdr_volNode, channel_1_fxSend_3_postFdr_volNode, channel_1_fxSend_4_postFdr_volNode);

//para tascam
channel_1_tascam_out_Node.fan(channel_1_fxSend_1_postEq_volNode, channel_1_fxSend_2_postEq_volNode, channel_1_fxSend_3_postEq_volNode, channel_1_fxSend_4_postEq_volNode);

//----------------------------------
const channel_2_volNode = new Tone.Volume(-100).connect(masterVolumeNode);

const channel_2_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(channel_2_volNode);
const channel_2_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(channel_2_dynamics_limiterNode_Bypass);
const channel_2_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(channel_2_dynamics_gateNode_Bypass);
const channel_2_filter_Bypass = new Tone.Volume(0).connect(channel_2_dynamics_compressorNode_Bypass);

const channel_2_filter = new Tone.Filter();
//channel_2_filter.debug = true;
channel_2_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const channel_2_panNode = new Tone.Panner(0).connect(channel_2_filter_Bypass);

const player_2_Node = new Tone.Player("https://juliavra.github.io/Producer_E87_webSite/audio/110_Base_tranqui_reggae.mp3").connect(channel_2_panNode);
//player_2_Node.debug = true;
player_2_Node.fan(player_2_rms_meter);

player_2_Node.onstop = () => {
  console.log("player_2_Node has stopped normally.");
  player_2_playButton.style.backgroundColor = "white";
  // Add any desired actions here, like updating UI or triggering another event.
};

const channel_2_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_2_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_2_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_2_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_2_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_2_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_2_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_2_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_2_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_2_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_2_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_2_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_2_dynamics_limiterNode = new Tone.Limiter();
const channel_2_dynamics_gateNode = new Tone.Gate();
const channel_2_dynamics_compressorNode = new Tone.Compressor();

channel_2_panNode.fan(channel_2_fxSend_1_preEq_volNode, channel_2_fxSend_2_preEq_volNode, channel_2_fxSend_3_preEq_volNode, channel_2_fxSend_4_preEq_volNode);
channel_2_filter.fan(channel_2_fxSend_1_postEq_volNode, channel_2_fxSend_2_postEq_volNode, channel_2_fxSend_3_postEq_volNode, channel_2_fxSend_4_postEq_volNode);

channel_2_volNode.fan(channel_2_fxSend_1_postFdr_volNode, channel_2_fxSend_2_postFdr_volNode, channel_2_fxSend_3_postFdr_volNode, channel_2_fxSend_4_postFdr_volNode);

//para tascam
channel_2_tascam_out_Node.fan(channel_2_fxSend_1_postEq_volNode, channel_2_fxSend_2_postEq_volNode, channel_2_fxSend_3_postEq_volNode, channel_2_fxSend_4_postEq_volNode);
channel_2_tascam_out_Node.fan(channel_2_fxSend_1_postFdr_volNode, channel_2_fxSend_2_postFdr_volNode, channel_2_fxSend_3_postFdr_volNode, channel_2_fxSend_4_postFdr_volNode);

const channel_3_volNode = new Tone.Volume(-100).connect(masterVolumeNode);

const channel_3_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(channel_3_volNode);
const channel_3_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(channel_3_dynamics_limiterNode_Bypass);
const channel_3_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(channel_3_dynamics_gateNode_Bypass);
const channel_3_filter_Bypass = new Tone.Volume(0).connect(channel_3_dynamics_compressorNode_Bypass);

const channel_3_filter = new Tone.Filter();
//channel_3_filter.debug = true;
channel_3_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const channel_3_panNode = new Tone.Panner(0).connect(channel_3_filter_Bypass);

const channel_3_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_3_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_3_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_3_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_3_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_3_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_3_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_3_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_3_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_3_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_3_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_3_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_3_dynamics_limiterNode = new Tone.Limiter();
const channel_3_dynamics_gateNode = new Tone.Gate();
const channel_3_dynamics_compressorNode = new Tone.Compressor();

const player_3_Node = new Tone.Player("https://juliavra.github.io/Producer_E87_webSite/audio/110_Base_tranqui_reggae.mp3").connect(channel_3_panNode);
//player_3_Node.debug = true;

player_3_Node.onstop = () => {
  console.log("player_3_Node has stopped normally.");
  player_3_playButton.style.backgroundColor = "white";
  // Add any desired actions here, like updating UI or triggering another event.
};

channel_3_panNode.fan(channel_3_fxSend_1_preEq_volNode, channel_3_fxSend_2_preEq_volNode, channel_3_fxSend_3_preEq_volNode, channel_3_fxSend_4_preEq_volNode);
channel_3_filter.fan(channel_3_fxSend_1_postEq_volNode, channel_3_fxSend_2_postEq_volNode, channel_3_fxSend_3_postEq_volNode, channel_3_fxSend_4_postEq_volNode);

channel_3_volNode.fan(channel_3_fxSend_1_postFdr_volNode, channel_3_fxSend_2_postFdr_volNode, channel_3_fxSend_3_postFdr_volNode, channel_3_fxSend_4_postFdr_volNode);

//para tascam
channel_3_tascam_out_Node.fan(channel_3_fxSend_1_postEq_volNode, channel_3_fxSend_2_postEq_volNode, channel_3_fxSend_3_postEq_volNode, channel_3_fxSend_4_postEq_volNode);
channel_3_tascam_out_Node.fan(channel_3_fxSend_1_postFdr_volNode, channel_3_fxSend_2_postFdr_volNode, channel_3_fxSend_3_postFdr_volNode, channel_3_fxSend_4_postFdr_volNode);

//----------------------------------
const channel_4_volNode = new Tone.Volume(-100).connect(masterVolumeNode);

const channel_4_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(channel_4_volNode);
const channel_4_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(channel_4_dynamics_limiterNode_Bypass);
const channel_4_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(channel_4_dynamics_gateNode_Bypass);
const channel_4_filter_Bypass = new Tone.Volume(0).connect(channel_4_dynamics_compressorNode_Bypass);

const channel_4_filter = new Tone.Filter();
//channel_4_filter.debug = true;
channel_4_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const channel_4_panNode = new Tone.Panner(0).connect(channel_4_filter_Bypass);

const channel_4_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_4_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_4_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_4_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_4_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_4_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_4_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_4_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_4_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const channel_4_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const channel_4_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const channel_4_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const channel_4_dynamics_limiterNode = new Tone.Limiter();
const channel_4_dynamics_gateNode = new Tone.Gate();
const channel_4_dynamics_compressorNode = new Tone.Compressor();

const player_4_Node = new Tone.Player("https://juliavra.github.io/Producer_E87_webSite/audio/110_Base_tranqui_reggae.mp3").connect(channel_4_panNode);
//player_1_Node.debug = true;

player_4_Node.onstop = () => {
  console.log("player_4_Node has stopped normally.");
  player_4_playButton.style.backgroundColor = "white";
  // Add any desired actions here, like updating UI or triggering another event.
};

channel_4_panNode.fan(channel_4_fxSend_1_preEq_volNode, channel_4_fxSend_2_preEq_volNode, channel_4_fxSend_3_preEq_volNode, channel_4_fxSend_4_preEq_volNode);
channel_4_filter.fan(channel_4_fxSend_1_postEq_volNode, channel_4_fxSend_2_postEq_volNode, channel_4_fxSend_3_postEq_volNode, channel_4_fxSend_4_postEq_volNode);

channel_4_volNode.fan(channel_4_fxSend_1_postFdr_volNode, channel_4_fxSend_2_postFdr_volNode, channel_4_fxSend_3_postFdr_volNode, channel_4_fxSend_4_postFdr_volNode);

//para tascam
channel_4_tascam_out_Node.fan(channel_4_fxSend_1_postEq_volNode, channel_4_fxSend_2_postEq_volNode, channel_4_fxSend_3_postEq_volNode, channel_4_fxSend_4_postEq_volNode);
channel_4_tascam_out_Node.fan(channel_4_fxSend_1_postFdr_volNode, channel_4_fxSend_2_postFdr_volNode, channel_4_fxSend_3_postFdr_volNode, channel_4_fxSend_4_postFdr_volNode);

//*****************************************************************************************
//*****************************************************************************************

const fx_2_pan = new Tone.Panner(0).toDestination();
const fx_3_pan = new Tone.Panner(0).toDestination();
const fx_4_pan = new Tone.Panner(0).toDestination();

const fx_1_volNode = new Tone.Volume(0).connect(masterVolumeNode);

const fx_1_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(fx_1_volNode);
const fx_1_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(fx_1_dynamics_limiterNode_Bypass);
const fx_1_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(fx_1_dynamics_gateNode_Bypass);
const fx_1_filter_Bypass = new Tone.Volume(0).connect(fx_1_dynamics_compressorNode_Bypass);
fx_1_filter_Bypass.fan(fx_1_filter_bypass_meter);

const fx_1_filter = new Tone.Filter();
//fx_1_filter.debug = true;
fx_1_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const fx_1_panNode = new Tone.Panner(0).connect(fx_1_filter_Bypass);

const fx_1_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_1_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_1_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_1_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_1_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_1_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_1_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_1_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_1_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_1_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_1_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_1_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_1_dynamics_limiterNode = new Tone.Limiter();
const fx_1_dynamics_gateNode = new Tone.Gate();
const fx_1_dynamics_compressorNode = new Tone.Compressor();

fx_1_filter.fan(fx_1_fxSend_1_postEq_volNode, fx_1_fxSend_2_postEq_volNode, fx_1_fxSend_3_postEq_volNode, fx_1_fxSend_4_postEq_volNode);

//para tascam
fx_1_tascam_out_Node.fan(fx_1_fxSend_1_postEq_volNode, fx_1_fxSend_2_postEq_volNode, fx_1_fxSend_3_postEq_volNode, fx_1_fxSend_4_postEq_volNode);
fx_1_tascam_out_Node.fan(fx_1_fxSend_1_postFdr_volNode, fx_1_fxSend_2_postFdr_volNode, fx_1_fxSend_3_postFdr_volNode, fx_1_fxSend_4_postFdr_volNode);

//----------------------------------
const fx_2_volNode = new Tone.Volume(-100).connect(masterVolumeNode);
fx_2_volNode.volume.value = -6;

const fx_2_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(fx_2_volNode);
const fx_2_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(fx_2_dynamics_limiterNode_Bypass);
const fx_2_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(fx_2_dynamics_gateNode_Bypass);
const fx_2_filter_Bypass = new Tone.Volume(0).connect(fx_2_dynamics_compressorNode_Bypass);

const fx_2_filter = new Tone.Filter();
//fx_2_filter.debug = true;
fx_2_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const fx_2_panNode = new Tone.Panner(0).connect(fx_2_filter_Bypass);

const fx_2_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_2_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_2_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_2_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_2_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_2_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_2_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_2_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_2_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_2_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_2_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_2_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_2_dynamics_limiterNode = new Tone.Limiter();
const fx_2_dynamics_gateNode = new Tone.Gate();
const fx_2_dynamics_compressorNode = new Tone.Compressor();

fx_2_panNode.fan(fx_2_fxSend_1_preEq_volNode, fx_2_fxSend_2_preEq_volNode, fx_2_fxSend_3_preEq_volNode, fx_2_fxSend_4_preEq_volNode);
fx_2_filter.fan(fx_2_fxSend_1_postEq_volNode, fx_2_fxSend_2_postEq_volNode, fx_2_fxSend_3_postEq_volNode, fx_2_fxSend_4_postEq_volNode);

fx_2_volNode.fan(fx_2_fxSend_1_postFdr_volNode, fx_2_fxSend_2_postFdr_volNode, fx_2_fxSend_3_postFdr_volNode, fx_2_fxSend_4_postFdr_volNode);

//para tascam
fx_2_tascam_out_Node.fan(fx_2_fxSend_1_postEq_volNode, fx_2_fxSend_2_postEq_volNode, fx_2_fxSend_3_postEq_volNode, fx_2_fxSend_4_postEq_volNode);
fx_2_tascam_out_Node.fan(fx_2_fxSend_1_postFdr_volNode, fx_2_fxSend_2_postFdr_volNode, fx_2_fxSend_3_postFdr_volNode, fx_2_fxSend_4_postFdr_volNode);

//----------------------------------
const fx_3_volNode = new Tone.Volume(-100).connect(masterVolumeNode);

const fx_3_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(fx_3_volNode);
const fx_3_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(fx_3_dynamics_limiterNode_Bypass);
const fx_3_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(fx_3_dynamics_gateNode_Bypass);
const fx_3_filter_Bypass = new Tone.Volume(0).connect(fx_3_dynamics_compressorNode_Bypass);

const fx_3_filter = new Tone.Filter();
//fx_3_filter.debug = true;
fx_3_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const fx_3_panNode = new Tone.Panner(0).connect(fx_3_filter_Bypass);

const fx_3_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_3_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_3_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_3_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_3_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_3_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_3_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_3_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_3_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_3_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_3_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_3_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_3_dynamics_limiterNode = new Tone.Limiter();
const fx_3_dynamics_gateNode = new Tone.Gate();
const fx_3_dynamics_compressorNode = new Tone.Compressor();

fx_3_panNode.fan(fx_3_fxSend_1_preEq_volNode, fx_3_fxSend_2_preEq_volNode, fx_3_fxSend_3_preEq_volNode, fx_3_fxSend_4_preEq_volNode);
fx_3_filter.fan(fx_3_fxSend_1_postEq_volNode, fx_3_fxSend_2_postEq_volNode, fx_3_fxSend_3_postEq_volNode, fx_3_fxSend_4_postEq_volNode);

fx_3_volNode.fan(fx_3_fxSend_1_postFdr_volNode, fx_3_fxSend_2_postFdr_volNode, fx_3_fxSend_3_postFdr_volNode, fx_3_fxSend_4_postFdr_volNode);

//para tascam
fx_3_tascam_out_Node.fan(fx_3_fxSend_1_postEq_volNode, fx_3_fxSend_2_postEq_volNode, fx_3_fxSend_3_postEq_volNode, fx_3_fxSend_4_postEq_volNode);
fx_3_tascam_out_Node.fan(fx_3_fxSend_1_postFdr_volNode, fx_3_fxSend_2_postFdr_volNode, fx_3_fxSend_3_postFdr_volNode, fx_3_fxSend_4_postFdr_volNode);

//----------------------------------
const fx_4_volNode = new Tone.Volume(-100).connect(masterVolumeNode);

const fx_4_dynamics_limiterNode_Bypass = new Tone.Volume(0).connect(fx_4_volNode);
const fx_4_dynamics_gateNode_Bypass = new Tone.Volume(0).connect(fx_4_dynamics_limiterNode_Bypass);
const fx_4_dynamics_compressorNode_Bypass = new Tone.Volume(0).connect(fx_4_dynamics_gateNode_Bypass);
const fx_4_filter_Bypass = new Tone.Volume(0).connect(fx_4_dynamics_compressorNode_Bypass);

const fx_4_filter = new Tone.Filter();
//fx_4_filter.debug = true;
fx_4_filter.set({
  frequency: 20000,
  type: "lowpass",
  Q: 0,
  gain: 0,
  rolloff: -96,
});

const fx_4_panNode = new Tone.Panner(0).connect(fx_4_filter_Bypass);

const fx_4_fxSend_1_preEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_4_fxSend_2_preEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_4_fxSend_3_preEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_4_fxSend_4_preEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_4_fxSend_1_postEq_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_4_fxSend_2_postEq_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_4_fxSend_3_postEq_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_4_fxSend_4_postEq_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_4_fxSend_1_postFdr_volNode = new Tone.Volume(-100).connect(fx_1_pingpong_Node);
const fx_4_fxSend_2_postFdr_volNode = new Tone.Volume(-100).connect(fx_2_pingpong_Node);
const fx_4_fxSend_3_postFdr_volNode = new Tone.Volume(-100).connect(fx_3_pingpong_Node);
const fx_4_fxSend_4_postFdr_volNode = new Tone.Volume(-100).connect(fx_4_pingpong_Node);

const fx_4_dynamics_limiterNode = new Tone.Limiter();
const fx_4_dynamics_gateNode = new Tone.Gate();
const fx_4_dynamics_compressorNode = new Tone.Compressor();

fx_4_panNode.fan(fx_4_fxSend_1_preEq_volNode, fx_4_fxSend_2_preEq_volNode, fx_4_fxSend_3_preEq_volNode, fx_4_fxSend_4_preEq_volNode);
fx_4_filter.fan(fx_4_fxSend_1_postEq_volNode, fx_4_fxSend_2_postEq_volNode, fx_4_fxSend_3_postEq_volNode, fx_4_fxSend_4_postEq_volNode);

fx_4_volNode.fan(fx_4_fxSend_1_postFdr_volNode, fx_4_fxSend_2_postFdr_volNode, fx_4_fxSend_3_postFdr_volNode, fx_4_fxSend_4_postFdr_volNode);

//para tascam
fx_4_tascam_out_Node.fan(fx_4_fxSend_1_postEq_volNode, fx_4_fxSend_2_postEq_volNode, fx_4_fxSend_3_postEq_volNode, fx_4_fxSend_4_postEq_volNode);
fx_4_tascam_out_Node.fan(fx_4_fxSend_1_postFdr_volNode, fx_4_fxSend_2_postFdr_volNode, fx_4_fxSend_3_postFdr_volNode, fx_4_fxSend_4_postFdr_volNode);

//************************************************************************** */
//************************************************************************** */
//***********************    CHANNEL 1 EQ3    ******************* */
//************************************************************************** */
//************************************************************************** */
const channel_1_filter_eq3 = new Tone.EQ3();

channel_1_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const channel_1_EQ3_low_fader_gain = document.getElementById("channel_1_EQ3_low_fader_gain");
const channel_1_EQ3_low_fader_gain_value = document.getElementById("channel_1_EQ3_low_fader_gain_value");
channel_1_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_filter_eq3.low.value = -100;
    channel_1_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_low_fader_gain", -100);
  }
  else {
    channel_1_filter_eq3.low.value = e.currentTarget.value;
    channel_1_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const channel_1_EQ3_low_frequency_fader = document.getElementById("channel_1_EQ3_low_frequency_fader");
const channel_1_EQ3_low_frequency_fader_value = document.getElementById("channel_1_EQ3_low_frequency_fader_value");
channel_1_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_filter_eq3.lowFrequency.value = -100;
    channel_1_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_low_frequency_fader", -100);
  }
  else {
    channel_1_filter_eq3.lowFrequency.value = e.currentTarget.value;
    channel_1_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const channel_1_EQ3_mid_fader_gain = document.getElementById("channel_1_EQ3_mid_fader_gain");
const channel_1_EQ3_mid_fader_gain_value = document.getElementById("channel_1_EQ3_mid_fader_gain_value");
channel_1_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_filter_eq3.mid.value = -100;
    channel_1_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_mid_fader_gain", -100);
  }
  else {
    channel_1_filter_eq3.mid.value = e.currentTarget.value;
    channel_1_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const channel_1_EQ3_hi_fader_gain = document.getElementById("channel_1_EQ3_hi_fader_gain");
const channel_1_EQ3_hi_fader_gain_value = document.getElementById("channel_1_EQ3_hi_fader_gain_value");
channel_1_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_filter_eq3.mid.value = -100;
    channel_1_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_hi_fader_gain", -100);
  }
  else {
    channel_1_filter_eq3.high.value = e.currentTarget.value;
    channel_1_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const channel_1_EQ3_high_frequency_fader = document.getElementById("channel_1_EQ3_high_frequency_fader");
const channel_1_EQ3_high_frequency_value = document.getElementById("channel_1_EQ3_high_frequency_value");
channel_1_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_1_filter_eq3.highFrequency.value = -100;
    channel_1_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_high_frequency_fader", -100);
  }
  else {
    channel_1_filter_eq3.highFrequency.value = e.currentTarget.value;
    channel_1_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const channel_1_EQ3_Q_fader = document.getElementById("channel_1_EQ3_Q_fader");
const channel_1_EQ3_Q_value = document.getElementById("channel_1_EQ3_Q_value");
channel_1_EQ3_Q_fader.addEventListener("change", function (e) {
  channel_1_filter_eq3.Q.value = e.currentTarget.value;
  channel_1_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_1_EQ3_Q_fader", e.currentTarget.value);
});

channel_1_filter_eq3.fan(channel_1_fxSend_1_postEq_volNode, channel_1_fxSend_2_postEq_volNode, channel_1_fxSend_3_postEq_volNode, channel_1_fxSend_4_postEq_volNode);

//----------------------------------------------------
const channel_2_filter_eq3 = new Tone.EQ3();

channel_2_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const channel_2_EQ3_low_fader_gain = document.getElementById("channel_2_EQ3_low_fader_gain");
const channel_2_EQ3_low_fader_gain_value = document.getElementById("channel_2_EQ3_low_fader_gain_value");
channel_2_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_filter_eq3.low.value = -100;
    channel_2_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_low_fader_gain", -100);
  }
  else {
    channel_2_filter_eq3.low.value = e.currentTarget.value;
    channel_2_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const channel_2_EQ3_low_frequency_fader = document.getElementById("channel_2_EQ3_low_frequency_fader");
const channel_2_EQ3_low_frequency_fader_value = document.getElementById("channel_2_EQ3_low_frequency_fader_value");
channel_2_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_filter_eq3.lowFrequency.value = -100;
    channel_2_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_low_frequency_fader", -100);
  }
  else {
    channel_2_filter_eq3.lowFrequency.value = e.currentTarget.value;
    channel_2_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const channel_2_EQ3_mid_fader_gain = document.getElementById("channel_2_EQ3_mid_fader_gain");
const channel_2_EQ3_mid_fader_gain_value = document.getElementById("channel_2_EQ3_mid_fader_gain_value");
channel_2_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_filter_eq3.mid.value = -100;
    channel_2_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_mid_fader_gain", -100);
  }
  else {
    channel_2_filter_eq3.mid.value = e.currentTarget.value;
    channel_2_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const channel_2_EQ3_hi_fader_gain = document.getElementById("channel_2_EQ3_hi_fader_gain");
const channel_2_EQ3_hi_fader_gain_value = document.getElementById("channel_2_EQ3_hi_fader_gain_value");
channel_2_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_filter_eq3.mid.value = -100;
    channel_2_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_hi_fader_gain", -100);
  }
  else {
    channel_2_filter_eq3.high.value = e.currentTarget.value;
    channel_2_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const channel_2_EQ3_high_frequency_fader = document.getElementById("channel_2_EQ3_high_frequency_fader");
const channel_2_EQ3_high_frequency_value = document.getElementById("channel_2_EQ3_high_frequency_value");
channel_2_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_2_filter_eq3.highFrequency.value = -100;
    channel_2_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_high_frequency_fader", -100);
  }
  else {
    channel_2_filter_eq3.highFrequency.value = e.currentTarget.value;
    channel_2_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const channel_2_EQ3_Q_fader = document.getElementById("channel_2_EQ3_Q_fader");
const channel_2_EQ3_Q_value = document.getElementById("channel_2_EQ3_Q_value");
channel_2_EQ3_Q_fader.addEventListener("change", function (e) {
  channel_2_filter_eq3.Q.value = e.currentTarget.value;
  channel_2_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "channel_2_EQ3_Q_fader", e.currentTarget.value);
});

channel_2_filter_eq3.fan(channel_2_fxSend_1_postEq_volNode, channel_2_fxSend_2_postEq_volNode, channel_2_fxSend_3_postEq_volNode, channel_2_fxSend_4_postEq_volNode);
channel_2_filter_eq3.fan(channel_2_fxSend_1_postFdr_volNode, channel_2_fxSend_2_postFdr_volNode, channel_2_fxSend_3_postFdr_volNode, channel_2_fxSend_4_postFdr_volNode);

//---------------------------------------------
const channel_3_filter_eq3 = new Tone.EQ3();

channel_3_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const channel_3_EQ3_low_fader_gain = document.getElementById("channel_3_EQ3_low_fader_gain");
const channel_3_EQ3_low_fader_gain_value = document.getElementById("channel_3_EQ3_low_fader_gain_value");
channel_3_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_filter_eq3.low.value = -100;
    channel_3_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_EQ3_low_fader_gain", -100);
  }
  else {
    channel_3_filter_eq3.low.value = e.currentTarget.value;
    channel_3_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const channel_3_EQ3_low_frequency_fader = document.getElementById("channel_3_EQ3_low_frequency_fader");
const channel_3_EQ3_low_frequency_fader_value = document.getElementById("channel_3_EQ3_low_frequency_fader_value");
channel_3_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_filter_eq3.lowFrequency.value = -100;
    channel_3_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaNewValue(Tone.now(), "channel_3_EQ3_low_frequency_fader", -100);
  }
  else {
    channel_3_filter_eq3.lowFrequency.value = e.currentTarget.value;
    channel_3_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const channel_3_EQ3_mid_fader_gain = document.getElementById("channel_3_EQ3_mid_fader_gain");
const channel_3_EQ3_mid_fader_gain_value = document.getElementById("channel_3_EQ3_mid_fader_gain_value");
channel_3_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_filter_eq3.mid.value = -100;
    channel_3_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_mid_fader_gain", -100);
  }
  else {
    channel_3_filter_eq3.mid.value = e.currentTarget.value;
    channel_3_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const channel_3_EQ3_hi_fader_gain = document.getElementById("channel_3_EQ3_hi_fader_gain");
const channel_3_EQ3_hi_fader_gain_value = document.getElementById("channel_3_EQ3_hi_fader_gain_value");
channel_3_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_filter_eq3.mid.value = -100;
    channel_3_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_hi_fader_gain", -100);
  }
  else {
    channel_3_filter_eq3.high.value = e.currentTarget.value;
    channel_3_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const channel_3_EQ3_high_frequency_fader = document.getElementById("channel_3_EQ3_high_frequency_fader");
const channel_3_EQ3_high_frequency_value = document.getElementById("channel_3_EQ3_high_frequency_value");
channel_3_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_3_filter_eq3.highFrequency.value = -100;
    channel_3_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_high_frequency_fader", -100);
  }
  else {
    channel_3_filter_eq3.highFrequency.value = e.currentTarget.value;
    channel_3_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const channel_3_EQ3_Q_fader = document.getElementById("channel_3_EQ3_Q_fader");
const channel_3_EQ3_Q_value = document.getElementById("channel_3_EQ3_Q_value");
channel_3_EQ3_Q_fader.addEventListener("change", function (e) {
  channel_3_filter_eq3.Q.value = e.currentTarget.value;
  channel_3_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_EQ3_Q_fader", e.currentTarget.value);
});

channel_3_filter_eq3.fan(channel_3_fxSend_1_postEq_volNode, channel_3_fxSend_2_postEq_volNode, channel_3_fxSend_3_postEq_volNode, channel_3_fxSend_4_postEq_volNode);
channel_3_filter_eq3.fan(channel_3_fxSend_1_postFdr_volNode, channel_3_fxSend_2_postFdr_volNode, channel_3_fxSend_3_postFdr_volNode, channel_3_fxSend_4_postFdr_volNode);

//-----------------------------------
const channel_4_filter_eq3 = new Tone.EQ3();

channel_4_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const channel_4_EQ3_low_fader_gain = document.getElementById("channel_4_EQ3_low_fader_gain");
const channel_4_EQ3_low_fader_gain_value = document.getElementById("channel_4_EQ3_low_fader_gain_value");
channel_4_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_filter_eq3.low.value = -100;
    channel_4_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_low_fader_gain", -100);
  }
  else {
    channel_4_filter_eq3.low.value = e.currentTarget.value;
    channel_4_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const channel_4_EQ3_low_frequency_fader = document.getElementById("channel_4_EQ3_low_frequency_fader");
const channel_4_EQ3_low_frequency_fader_value = document.getElementById("channel_4_EQ3_low_frequency_fader_value");
channel_4_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_filter_eq3.lowFrequency.value = -100;
    channel_4_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_low_frequency_fader", -100);
  }
  else {
    channel_4_filter_eq3.lowFrequency.value = e.currentTarget.value;
    channel_4_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const channel_4_EQ3_mid_fader_gain = document.getElementById("channel_4_EQ3_mid_fader_gain");
const channel_4_EQ3_mid_fader_gain_value = document.getElementById("channel_4_EQ3_mid_fader_gain_value");
channel_4_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_filter_eq3.mid.value = -100;
    channel_4_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_mid_fader_gain", -100);
  }
  else {
    channel_4_filter_eq3.mid.value = e.currentTarget.value;
    channel_4_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const channel_4_EQ3_hi_fader_gain = document.getElementById("channel_4_EQ3_hi_fader_gain");
const channel_4_EQ3_hi_fader_gain_value = document.getElementById("channel_4_EQ3_hi_fader_gain_value");
channel_4_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_filter_eq3.mid.value = -100;
    channel_4_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_hi_fader_gain", -100);
  }
  else {
    channel_4_filter_eq3.high.value = e.currentTarget.value;
    channel_4_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const channel_4_EQ3_high_frequency_fader = document.getElementById("channel_4_EQ3_high_frequency_fader");
const channel_4_EQ3_high_frequency_value = document.getElementById("channel_4_EQ3_high_frequency_value");
channel_4_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    channel_4_filter_eq3.highFrequency.value = -100;
    channel_4_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_high_frequency_fader", -100);
  }
  else {
    channel_4_filter_eq3.highFrequency.value = e.currentTarget.value;
    channel_4_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const channel_4_EQ3_Q_fader = document.getElementById("channel_4_EQ3_Q_fader");
const channel_4_EQ3_Q_value = document.getElementById("channel_4_EQ3_Q_value");
channel_4_EQ3_Q_fader.addEventListener("change", function (e) {
  channel_4_filter_eq3.Q.value = e.currentTarget.value;
  channel_4_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_EQ3_Q_fader", e.currentTarget.value);
});

channel_4_filter_eq3.fan(channel_4_fxSend_1_postEq_volNode, channel_4_fxSend_2_postEq_volNode, channel_4_fxSend_3_postEq_volNode, channel_4_fxSend_4_postEq_volNode);
channel_4_filter_eq3.fan(channel_4_fxSend_1_postFdr_volNode, channel_4_fxSend_2_postFdr_volNode, channel_4_fxSend_3_postFdr_volNode, channel_4_fxSend_4_postFdr_volNode);

//----------------------------------------
const fx_1_filter_eq3 = new Tone.EQ3();
fx_1_filter_eq3.fan(fx_1_eq3_meter, meter_test_Node);

fx_1_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const fx_1_EQ3_low_fader_gain = document.getElementById("fx_1_EQ3_low_fader_gain");
const fx_1_EQ3_low_fader_gain_value = document.getElementById("fx_1_EQ3_low_fader_gain_value");
fx_1_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_filter_eq3.low.value = -100;
    fx_1_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_low_fader_gain", -100);
  }
  else {
    fx_1_filter_eq3.low.value = e.currentTarget.value;
    fx_1_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const fx_1_EQ3_low_frequency_fader = document.getElementById("fx_1_EQ3_low_frequency_fader");
const fx_1_EQ3_low_frequency_fader_value = document.getElementById("fx_1_EQ3_low_frequency_fader_value");
fx_1_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_filter_eq3.lowFrequency.value = -100;
    fx_1_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_low_frequency_fader", -100);
  }
  else {
    fx_1_filter_eq3.lowFrequency.value = e.currentTarget.value;
    fx_1_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const fx_1_EQ3_mid_fader_gain = document.getElementById("fx_1_EQ3_mid_fader_gain");
const fx_1_EQ3_mid_fader_gain_value = document.getElementById("fx_1_EQ3_mid_fader_gain_value");
fx_1_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_filter_eq3.mid.value = -100;
    fx_1_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_mid_fader_gain", -100);
  }
  else {
    fx_1_filter_eq3.mid.value = e.currentTarget.value;
    fx_1_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const fx_1_EQ3_hi_fader_gain = document.getElementById("fx_1_EQ3_hi_fader_gain");
const fx_1_EQ3_hi_fader_gain_value = document.getElementById("fx_1_EQ3_hi_fader_gain_value");
fx_1_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_filter_eq3.mid.value = -100;
    fx_1_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_hi_fader_gain", -100);
  }
  else {
    fx_1_filter_eq3.high.value = e.currentTarget.value;
    fx_1_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const fx_1_EQ3_high_frequency_fader = document.getElementById("fx_1_EQ3_high_frequency_fader");
const fx_1_EQ3_high_frequency_value = document.getElementById("fx_1_EQ3_high_frequency_value");
fx_1_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_filter_eq3.highFrequency.value = -100;
    fx_1_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_high_frequency_fader", -100);
  }
  else {
    fx_1_filter_eq3.highFrequency.value = e.currentTarget.value;
    fx_1_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const fx_1_EQ3_Q_fader = document.getElementById("fx_1_EQ3_Q_fader");
const fx_1_EQ3_Q_value = document.getElementById("fx_1_EQ3_Q_value");
fx_1_EQ3_Q_fader.addEventListener("change", function (e) {
  fx_1_filter_eq3.Q.value = e.currentTarget.value;
  fx_1_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_EQ3_Q_fader", e.currentTarget.value);
});

fx_1_filter_eq3.fan(fx_1_fxSend_1_postEq_volNode, fx_1_fxSend_2_postEq_volNode, fx_1_fxSend_3_postEq_volNode, fx_1_fxSend_4_postEq_volNode);

//----------------------------------------------------
const fx_2_filter_eq3 = new Tone.EQ3();

fx_2_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const fx_2_EQ3_low_fader_gain = document.getElementById("fx_2_EQ3_low_fader_gain");
const fx_2_EQ3_low_fader_gain_value = document.getElementById("fx_2_EQ3_low_fader_gain_value");
fx_2_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_filter_eq3.low.value = -100;
    fx_2_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_low_fader_gain", -100);
  }
  else {
    fx_2_filter_eq3.low.value = e.currentTarget.value;
    fx_2_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const fx_2_EQ3_low_frequency_fader = document.getElementById("fx_2_EQ3_low_frequency_fader");
const fx_2_EQ3_low_frequency_fader_value = document.getElementById("fx_2_EQ3_low_frequency_fader_value");
fx_2_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_filter_eq3.lowFrequency.value = -100;
    fx_2_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_low_frequency_fader", -100);
  }
  else {
    fx_2_filter_eq3.lowFrequency.value = e.currentTarget.value;
    fx_2_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const fx_2_EQ3_mid_fader_gain = document.getElementById("fx_2_EQ3_mid_fader_gain");
const fx_2_EQ3_mid_fader_gain_value = document.getElementById("fx_2_EQ3_mid_fader_gain_value");
fx_2_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_filter_eq3.mid.value = -100;
    fx_2_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_mid_fader_gain", -100);
  }
  else {
    fx_2_filter_eq3.mid.value = e.currentTarget.value;
    fx_2_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const fx_2_EQ3_hi_fader_gain = document.getElementById("fx_2_EQ3_hi_fader_gain");
const fx_2_EQ3_hi_fader_gain_value = document.getElementById("fx_2_EQ3_hi_fader_gain_value");
fx_2_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_filter_eq3.mid.value = -100;
    fx_2_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_hi_fader_gain", -100);
  }
  else {
    fx_2_filter_eq3.high.value = e.currentTarget.value;
    fx_2_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const fx_2_EQ3_high_frequency_fader = document.getElementById("fx_2_EQ3_high_frequency_fader");
const fx_2_EQ3_high_frequency_value = document.getElementById("fx_2_EQ3_high_frequency_value");
fx_2_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_2_filter_eq3.highFrequency.value = -100;
    fx_2_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_high_frequency_fader", -100);
  }
  else {
    fx_2_filter_eq3.highFrequency.value = e.currentTarget.value;
    fx_2_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const fx_2_EQ3_Q_fader = document.getElementById("fx_2_EQ3_Q_fader");
const fx_2_EQ3_Q_value = document.getElementById("fx_2_EQ3_Q_value");
fx_2_EQ3_Q_fader.addEventListener("change", function (e) {
  fx_2_filter_eq3.Q.value = e.currentTarget.value;
  fx_2_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_EQ3_Q_fader", e.currentTarget.value);
});

fx_2_filter_eq3.fan(fx_2_fxSend_1_postEq_volNode, fx_2_fxSend_2_postEq_volNode, fx_2_fxSend_3_postEq_volNode, fx_2_fxSend_4_postEq_volNode);

//---------------------------------------------
const fx_3_filter_eq3 = new Tone.EQ3();

fx_3_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const fx_3_EQ3_low_fader_gain = document.getElementById("fx_3_EQ3_low_fader_gain");
const fx_3_EQ3_low_fader_gain_value = document.getElementById("fx_3_EQ3_low_fader_gain_value");
fx_3_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_filter_eq3.low.value = -100;
    fx_3_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_low_fader_gain", -100);
  }
  else {
    fx_3_filter_eq3.low.value = e.currentTarget.value;
    fx_3_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const fx_3_EQ3_low_frequency_fader = document.getElementById("fx_3_EQ3_low_frequency_fader");
const fx_3_EQ3_low_frequency_fader_value = document.getElementById("fx_3_EQ3_low_frequency_fader_value");
fx_3_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_filter_eq3.lowFrequency.value = -100;
    fx_3_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_low_frequency_fader", -100);
  }
  else {
    fx_3_filter_eq3.lowFrequency.value = e.currentTarget.value;
    fx_3_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const fx_3_EQ3_mid_fader_gain = document.getElementById("fx_3_EQ3_mid_fader_gain");
const fx_3_EQ3_mid_fader_gain_value = document.getElementById("fx_3_EQ3_mid_fader_gain_value");
fx_3_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_filter_eq3.mid.value = -100;
    fx_3_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_mid_fader_gain", -100);
  }
  else {
    fx_3_filter_eq3.mid.value = e.currentTarget.value;
    fx_3_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const fx_3_EQ3_hi_fader_gain = document.getElementById("fx_3_EQ3_hi_fader_gain");
const fx_3_EQ3_hi_fader_gain_value = document.getElementById("fx_3_EQ3_hi_fader_gain_value");
fx_3_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_filter_eq3.mid.value = -100;
    fx_3_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_hi_fader_gain", -100);
  }
  else {
    fx_3_filter_eq3.high.value = e.currentTarget.value;
    fx_3_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const fx_3_EQ3_high_frequency_fader = document.getElementById("fx_3_EQ3_high_frequency_fader");
const fx_3_EQ3_high_frequency_value = document.getElementById("fx_3_EQ3_high_frequency_value");
fx_3_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_3_filter_eq3.highFrequency.value = -100;
    fx_3_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_high_frequency_fader", -100);
  }
  else {
    fx_3_filter_eq3.highFrequency.value = e.currentTarget.value;
    fx_3_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const fx_3_EQ3_Q_fader = document.getElementById("fx_3_EQ3_Q_fader");
const fx_3_EQ3_Q_value = document.getElementById("fx_3_EQ3_Q_value");
fx_3_EQ3_Q_fader.addEventListener("change", function (e) {
  fx_3_filter_eq3.Q.value = e.currentTarget.value;
  fx_3_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_EQ3_Q_fader", e.currentTarget.value);
});

fx_3_filter_eq3.fan(fx_3_fxSend_1_postEq_volNode, fx_3_fxSend_2_postEq_volNode, fx_3_fxSend_3_postEq_volNode, fx_3_fxSend_4_postEq_volNode);

//-----------------------------------
const fx_4_filter_eq3 = new Tone.EQ3();

fx_4_filter_eq3.set(
  {
    low: 0,
    mid: 0,
    high: 0,
    lowFrequency: 400,
    highFrequency: 2500
  }
);

const fx_4_EQ3_low_fader_gain = document.getElementById("fx_4_EQ3_low_fader_gain");
const fx_4_EQ3_low_fader_gain_value = document.getElementById("fx_4_EQ3_low_fader_gain_value");
fx_4_EQ3_low_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_filter_eq3.low.value = -100;
    fx_4_EQ3_low_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_low_fader_gain", -100);
  }
  else {
    fx_4_filter_eq3.low.value = e.currentTarget.value;
    fx_4_EQ3_low_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_low_fader_gain", e.currentTarget.value);
  }
});

const fx_4_EQ3_low_frequency_fader = document.getElementById("fx_4_EQ3_low_frequency_fader");
const fx_4_EQ3_low_frequency_fader_value = document.getElementById("fx_4_EQ3_low_frequency_fader_value");
fx_4_EQ3_low_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_filter_eq3.lowFrequency.value = -100;
    fx_4_EQ3_low_frequency_fader_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_low_frequency_fader", -100);
  }
  else {
    fx_4_filter_eq3.lowFrequency.value = e.currentTarget.value;
    fx_4_EQ3_low_frequency_fader_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_low_frequency_fader", e.currentTarget.value);
  }
});

const fx_4_EQ3_mid_fader_gain = document.getElementById("fx_4_EQ3_mid_fader_gain");
const fx_4_EQ3_mid_fader_gain_value = document.getElementById("fx_4_EQ3_mid_fader_gain_value");
fx_4_EQ3_mid_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_filter_eq3.mid.value = -100;
    fx_4_EQ3_mid_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_mid_fader_gain", -100);
  }
  else {
    fx_4_filter_eq3.mid.value = e.currentTarget.value;
    fx_4_EQ3_mid_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_mid_fader_gain", e.currentTarget.value);
  }
});

const fx_4_EQ3_hi_fader_gain = document.getElementById("fx_4_EQ3_hi_fader_gain");
const fx_4_EQ3_hi_fader_gain_value = document.getElementById("fx_4_EQ3_hi_fader_gain_value");
fx_4_EQ3_hi_fader_gain.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_filter_eq3.mid.value = -100;
    fx_4_EQ3_hi_fader_gain_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_hi_fader_gain", -100);
  }
  else {
    fx_4_filter_eq3.high.value = e.currentTarget.value;
    fx_4_EQ3_hi_fader_gain_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_hi_fader_gain", e.currentTarget.value);
  }
});

const fx_4_EQ3_high_frequency_fader = document.getElementById("fx_4_EQ3_high_frequency_fader");
const fx_4_EQ3_high_frequency_value = document.getElementById("fx_4_EQ3_high_frequency_value");
fx_4_EQ3_high_frequency_fader.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_4_filter_eq3.highFrequency.value = -100;
    fx_4_EQ3_high_frequency_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_high_frequency_fader", -100);
  }
  else {
    fx_4_filter_eq3.highFrequency.value = e.currentTarget.value;
    fx_4_EQ3_high_frequency_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_high_frequency_fader", e.currentTarget.value);
  }
});

const fx_4_EQ3_Q_fader = document.getElementById("fx_4_EQ3_Q_fader");
const fx_4_EQ3_Q_value = document.getElementById("fx_4_EQ3_Q_value");
fx_4_EQ3_Q_fader.addEventListener("change", function (e) {
  fx_4_filter_eq3.Q.value = e.currentTarget.value;
  fx_4_EQ3_Q_value.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_EQ3_Q_fader", e.currentTarget.value);
});

fx_4_filter_eq3.fan(fx_4_fxSend_1_postEq_volNode, fx_4_fxSend_2_postEq_volNode, fx_4_fxSend_3_postEq_volNode, fx_4_fxSend_4_postEq_volNode);

//************************************************************************** */
//************************************************************************** */
//***********************    TEST METER VARIOUS CHANNEL 1    ******************* */
//************************************************************************** */
//************************************************************************** */
const player_1_rms_meter = new Tone.Meter(0);
player_1_Node.fan(player_1_rms_meter);
//REACOMODAR
const player_3_rms_meter = new Tone.Meter(0);
player_3_Node.fan(player_3_rms_meter);

const player_4_rms_meter = new Tone.Meter(0);
player_4_Node.fan(player_4_rms_meter);

const channel_1_filter_bypass_meter = new Tone.Meter(0);
channel_1_filter_Bypass.fan(channel_1_filter_bypass_meter);

const channel_1_rms_comp_bypass_meter = new Tone.Meter(0);
channel_1_dynamics_compressorNode_Bypass.connect(channel_1_rms_comp_bypass_meter); //BORRAR ESTO LUEGO

const channel_1_rms_comp_meter = new Tone.Meter(0);
channel_1_dynamics_compressorNode.connect(channel_1_rms_comp_meter);

const channel_1_rms_gate_bypass_meter = new Tone.Meter(0);
channel_1_dynamics_gateNode_Bypass.connect(channel_1_rms_gate_bypass_meter);

const channel_1_rms_gate_meter = new Tone.Meter(0);
channel_1_dynamics_gateNode.connect(channel_1_rms_gate_meter);

const channel_1_rms_limiter_bypass_meter = new Tone.Meter(0);
channel_1_dynamics_limiterNode_Bypass.connect(channel_1_rms_limiter_bypass_meter);

const channel_1_rms_limiter_meter = new Tone.Meter(0);
channel_1_dynamics_limiterNode.connect(channel_1_rms_limiter_meter);

const channel_1_tascam_424_Hi_meter = new Tone.Meter(0);
channel_1_tascam_HighShelf_FilterNode.fan(channel_1_tascam_424_Hi_meter);

const channel_1_tascam_424_Mid_meter = new Tone.Meter(0);
channel_1_tascam_Mid_SemiParam_FilterNode.fan(channel_1_tascam_424_Mid_meter);

const channel_1_tascam_424_Low_meter = new Tone.Meter(0);
channel_1_tascam_LowShelf_FilterNode.fan(channel_1_tascam_424_Low_meter);

const channel_1_filter_meter = new Tone.Meter(0);
channel_1_filter.connect(channel_1_filter_meter);

const channel_1_eq3_meter = new Tone.Meter(0);
channel_1_filter_eq3.connect(channel_1_eq3_meter);

//---------------------------
const fx_1_filter_meter = new Tone.Meter(0);
fx_1_filter.connect(fx_1_filter_meter);
//----------------------------------------------
fx_1_volNode.fan(fx_1_rms_meter);
fx_2_volNode.fan(fx_2_rms_meter);
fx_3_volNode.fan(fx_3_rms_meter);
fx_4_volNode.fan(fx_4_rms_meter);

//************************************************************************** */
//************************************************************************** */
//***********************    FX 1 EQ CONTROLS     ******************* */
//************************************************************************** */
//************************************************************************** */

const fx_1_peaking_controls_div = document.getElementById("fx_1_peaking_controls_div");
const fx_1_tascam_424_controls_div = document.getElementById("fx_1_tascam_424_controls_div");
const fx_1_shelf_controls_div = document.getElementById("fx_1_shelf_controls_div");
const fx_1_allpass_controls_div = document.getElementById("fx_1_allpass_controls_div");
const fx_1_empty_controls_div = document.getElementById("fx_1_empty_controls_div");
const fx_1_bypass_controls_div = document.getElementById("fx_1_bypass_controls_div");
const fx_1_eq3_controls_div = document.getElementById("fx_1_eq3_controls_div");

const fx_2_peaking_controls_div = document.getElementById("fx_2_peaking_controls_div");
const fx_2_tascam_424_controls_div = document.getElementById("fx_2_tascam_424_controls_div");
const fx_2_shelf_controls_div = document.getElementById("fx_2_shelf_controls_div");
const fx_2_allpass_controls_div = document.getElementById("fx_2_allpass_controls_div");
const fx_2_empty_controls_div = document.getElementById("fx_2_empty_controls_div");
const fx_2_bypass_controls_div = document.getElementById("fx_2_bypass_controls_div");
const fx_2_eq3_controls_div = document.getElementById("fx_2_eq3_controls_div");

const fx_3_peaking_controls_div = document.getElementById("fx_3_peaking_controls_div");
const fx_3_tascam_424_controls_div = document.getElementById("fx_3_tascam_424_controls_div");
const fx_3_shelf_controls_div = document.getElementById("fx_3_shelf_controls_div");
const fx_3_allpass_controls_div = document.getElementById("fx_3_allpass_controls_div");
const fx_3_empty_controls_div = document.getElementById("fx_3_empty_controls_div");
const fx_3_bypass_controls_div = document.getElementById("fx_3_bypass_controls_div");
const fx_3_eq3_controls_div = document.getElementById("fx_3_eq3_controls_div");

const fx_4_peaking_controls_div = document.getElementById("fx_4_peaking_controls_div");
const fx_4_tascam_424_controls_div = document.getElementById("fx_4_tascam_424_controls_div");
const fx_4_shelf_controls_div = document.getElementById("fx_4_shelf_controls_div");
const fx_4_allpass_controls_div = document.getElementById("fx_4_allpass_controls_div");
const fx_4_empty_controls_div = document.getElementById("fx_4_empty_controls_div");
const fx_4_bypass_controls_div = document.getElementById("fx_4_bypass_controls_div");
const fx_4_eq3_controls_div = document.getElementById("fx_4_eq3_controls_div");

//*************************************************************************** */
//*************************************************************************** */
//*************************************************************************** */
const fx_1_fxSend_1_text = document.getElementById("fx_1_fxSend_1_text");
const fx_1_fxSend_2_text = document.getElementById("fx_1_fxSend_2_text");
const fx_1_fxSend_3_text = document.getElementById("fx_1_fxSend_3_text");
const fx_1_fxSend_4_text = document.getElementById("fx_1_fxSend_4_text");
const fx_1_rms_value = document.getElementById("fx_1_rms_value");

const fx_2_fxSend_1_text = document.getElementById("fx_2_fxSend_1_text");
const fx_2_fxSend_2_text = document.getElementById("fx_2_fxSend_2_text");
const fx_2_fxSend_3_text = document.getElementById("fx_2_fxSend_3_text");
const fx_2_fxSend_4_text = document.getElementById("fx_2_fxSend_4_text");
const fx_2_rms_value = document.getElementById("fx_2_rms_value");

const fx_3_fxSend_1_text = document.getElementById("fx_3_fxSend_1_text");
const fx_3_fxSend_2_text = document.getElementById("fx_3_fxSend_2_text");
const fx_3_fxSend_3_text = document.getElementById("fx_3_fxSend_3_text");
const fx_3_fxSend_4_text = document.getElementById("fx_3_fxSend_4_text");
const fx_3_rms_value = document.getElementById("fx_3_rms_value");

const fx_4_fxSend_1_text = document.getElementById("fx_4_fxSend_1_text");
const fx_4_fxSend_2_text = document.getElementById("fx_4_fxSend_2_text");
const fx_4_fxSend_3_text = document.getElementById("fx_4_fxSend_3_text");
const fx_4_fxSend_4_text = document.getElementById("fx_4_fxSend_4_text");
const fx_4_rms_value = document.getElementById("fx_4_rms_value");

//*****************************************************************************************
//*****************************************************************************************
//*******    FX 1 VOLUME + PAN + SENDFX       **********************************************************************************
//*****************************************************************************************
//*****************************************************************************************
const fx_1_volume = document.getElementById("fx_1_volume");
const fx_1_volume_value = document.getElementById("fx_1_volume_value");
const fx_1_pan_fader = document.getElementById("fx_1_pan_fader");
const fx_1_pan_value = document.getElementById("fx_1_pan_value");

//*****************************************************************************************
//*****************************************************************************************
//*******    FX 2 VOLUME + PAN + SENDFX       **********************************************************************************
//*****************************************************************************************
//*****************************************************************************************
const fx_2_volume = document.getElementById("fx_2_volume");
const fx_2_volume_value = document.getElementById("fx_2_volume_value");
const fx_2_pan_fader = document.getElementById("fx_2_pan_fader");
const fx_2_pan_value = document.getElementById("fx_2_pan_value");

//*****************************************************************************************
//*****************************************************************************************
//*******    FX 3 VOLUME + PAN + SENDFX       **********************************************************************************
//*****************************************************************************************
//*****************************************************************************************
const fx_3_volume = document.getElementById("fx_3_volume");
const fx_3_volume_value = document.getElementById("fx_3_volume_value");
const fx_3_pan_fader = document.getElementById("fx_3_pan_fader");
const fx_3_pan_value = document.getElementById("fx_3_pan_value");

//*****************************************************************************************
//*****************************************************************************************
//*******    FX 3 VOLUME + PAN + SENDFX       **********************************************************************************
//*****************************************************************************************
//*****************************************************************************************
const fx_4_volume = document.getElementById("fx_4_volume");
const fx_4_volume_value = document.getElementById("fx_4_volume_value");
const fx_4_pan_fader = document.getElementById("fx_4_pan_fader");
const fx_4_pan_value = document.getElementById("fx_4_pan_value");

//*****************************************************************************************
//*****************************************************************************************
//***      REC      **************************************************************************************
//*****************************************************************************************
//*****************************************************************************************
const recButton = document.getElementById("recButton");

//*****************************************************************************************
//*****************************************************************************************
//*******    COOLAPSIBLE MAIN FOO         **********************************************************************************
//*****************************************************************************************
//*****************************************************************************************
var coll = document.getElementsByClassName("collapsible");
var i;

for (i = 0; i < coll.length; i++) {
  coll[i].addEventListener("click", function () {
    this.classList.toggle("active");
    var content = this.nextElementSibling;
    if (content.style.display === "block") {
      content.style.display = "none";
    } else {
      content.style.display = "block";
    }
  });
}

//********************************************************************************************
const fxReturn_1_fader = new Tone.Volume(0).connect(fx_1_panNode);
const fxReturn_2_fader = new Tone.Volume(0).connect(fx_2_pan);
const fxReturn_3_fader = new Tone.Volume(0).connect(fx_3_pan);
const fxReturn_4_fader = new Tone.Volume(0).connect(fx_4_pan);

//*****************************************************************************************
//*****************************************************************************************
//*****************************************************************************************
//CODIGO DE PRUEBA DE RMS 
const fxReturn_1_fader_meter = new Tone.Meter(0);
const fxReturn_2_meter = new Tone.Meter(0);
const fxReturn_3_meter = new Tone.Meter(0);
const fxReturn_4_meter = new Tone.Meter(0);

fxReturn_1_fader.fan(fxReturn_1_fader_meter);
fxReturn_2_fader.fan(fxReturn_2_meter);
fxReturn_3_fader.fan(fxReturn_3_meter);
fxReturn_4_fader.fan(fxReturn_4_meter);

//SE USA FXRETURN_1
//fxReturn_1_fader.fan(fx_1_fxSend_2_preEq_volNode, fx_1_fxSend_3_preEq_volNode, fx_1_fxSend_4_preEq_volNode);
fx_1_panNode.fan(fx_1_fxSend_2_preEq_volNode, fx_1_fxSend_3_preEq_volNode, fx_1_fxSend_4_preEq_volNode);

setInterval('updatesMeters()', 100);

//*****************************************************************************************
//*****************************************************************************************
//********      ALL SETTINGS FOR SCREEN BUTTONS, FADERS, NODES TO  START    ******************************
//*****************************************************************************************
//*****************************************************************************************
//fx 1
fx_1_allpass_controls_div.style.display = "none";
fx_1_shelf_controls_div.style.display = "none";
fx_1_peaking_controls_div.style.display = "none";
fx_1_tascam_424_controls_div.style.display = "none";
fx_1_empty_controls_div.style.display = "none";
fx_1_bypass_controls_div.style.display = "block";
fx_1_eq3_controls_div.style.display = "none";
const gate_div = document.getElementById("gate_div");
const limiter_div = document.getElementById("limiter_div");

//fx 2
fx_2_allpass_controls_div.style.display = "none";
fx_2_shelf_controls_div.style.display = "none";
fx_2_peaking_controls_div.style.display = "none";
fx_2_tascam_424_controls_div.style.display = "none";
fx_2_empty_controls_div.style.display = "none";
fx_2_bypass_controls_div.style.display = "block";
fx_2_eq3_controls_div.style.display = "none";

//fx 3
fx_3_allpass_controls_div.style.display = "none";
fx_3_shelf_controls_div.style.display = "none";
fx_3_peaking_controls_div.style.display = "none";
fx_3_tascam_424_controls_div.style.display = "none";
fx_3_empty_controls_div.style.display = "none";
fx_3_bypass_controls_div.style.display = "block";
fx_3_eq3_controls_div.style.display = "none";

//fx 4
fx_4_allpass_controls_div.style.display = "none";
fx_4_shelf_controls_div.style.display = "none";
fx_4_peaking_controls_div.style.display = "none";
fx_4_tascam_424_controls_div.style.display = "none";
fx_4_empty_controls_div.style.display = "none";
fx_4_bypass_controls_div.style.display = "block";
fx_4_eq3_controls_div.style.display = "none";

//************************************************************************************* */
//************************************************************************************* */
//FX 1-4 ADDEVENTLISTENERS
//************************************************************************************* */
//************************************************************************************* */

fx_1_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fx_1_volNode.volume.value = -100;
    fx_1_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_volume", -100);
  }
  else {
    fx_1_volNode.volume.value = e.currentTarget.value;
    fx_1_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_1_volume", e.currentTarget.value);
  }
});

fx_1_pan_fader.addEventListener("change", function (e) {
  fx_1_panNode.pan.value = e.currentTarget.value;
  fx_1_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_pan_fader", e.currentTarget.value);
});

fx_2_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fxReturn_2_fader.volume.value = -100;
    fx_2_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_volume", -100);
  }
  else {
    fxReturn_2_fader.volume.value = e.currentTarget.value;
    fx_2_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_2_volume", e.currentTarget.value);
  }
});

fx_2_pan_fader.addEventListener("change", function (e) {
  fx_2_pan.pan.value = e.currentTarget.value;
  fx_2_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_pan_fader", e.currentTarget.value);
});

fx_3_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fxReturn_3_fader.volume.value = -100;
    fx_3_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_volume", -100);
  }
  else {
    fxReturn_3_fader.volume.value = e.currentTarget.value;
    fx_3_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_3_volume", e.currentTarget.value);
  }
});

fx_3_pan_fader.addEventListener("change", function (e) {
  fx_3_pan.pan.value = e.currentTarget.value;
  fx_3_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_pan_fader", e.currentTarget.value);
});

fx_4_volume.addEventListener("change", function (e) {
  if (e.currentTarget.value <= -40) {
    fxReturn_4_fader.volume.value = -100;
    fx_4_volume_value.innerHTML = -100;
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_volume", -100);
  }
  else {
    fxReturn_4_fader.volume.value = e.currentTarget.value;
    fx_4_volume_value.innerHTML = Math.round(`${e.currentTarget.value}`);
    mixEvent.logIntoListaAction(Tone.now(), "fx_4_volume", e.currentTarget.value);
  }
});

fx_4_pan_fader.addEventListener("change", function (e) {
  fx_4_pan.pan.value = e.currentTarget.value;
  fx_4_pan_value.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_pan_fader", e.currentTarget.value);
});

//*********************************************************************************** */
//*********************************************************************************** */
//*************     INNERHTML           ********************************************* */
//*********************************************************************************** */
//*********************************************************************************** */
const fx_1_select = document.getElementById("fx_1_select");
fx_1_select.addEventListener("change", function (e) {
  changes_fx_name("FX1", e.currentTarget.value);
  sets_New_FX("FX1", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "fx_1_select", e.currentTarget.value);
});

const fx_2_select = document.getElementById("fx_2_select")
fx_2_select.addEventListener("change", function (e) {
  changes_fx_name("FX2", e.currentTarget.value);
  sets_New_FX("FX2", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "fx_2_select", e.currentTarget.value);
});

const fx_3_select = document.getElementById("fx_3_select")
fx_3_select.addEventListener("change", function (e) {
  changes_fx_name("FX3", e.currentTarget.value);
  sets_New_FX("FX3", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "fx_3_select", e.currentTarget.value);
});

const fx_4_select = document.getElementById("fx_4_select")
fx_4_select.addEventListener("change", function (e) {
  changes_fx_name("FX4", e.currentTarget.value);
  sets_New_FX("FX4", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "fx_4_select", e.currentTarget.value);
});

//*********************************************************************************** */
//*********************************************************************************** */
//********          INIT SETUP      *************************************************************************** */
//*********************************************************************************** */
//*********************************************************************************** */
//**********     (SO CALL PROGRAM)          ************************************************************************* */
//*********************************************************************************** */
//*********************************************************************************** */

multiple_play_source_1.checked = false;
multiple_play_source_2.checked = false;
multiple_play_source_3.checked = false;
multiple_play_source_4.checked = false;
multiple_play_test_player.checked = true;
player_1_loop_checkbox.checked = true;
player_1_Node.loop = true;
player_1_Node.volume.value = -12;
channel_1_volNode.volume.value = -6;
channel_1_volume_value.innerHTML = -6;
channel_1_volume.value = -6;

player_2_loop_checkbox.checked = true;
player_2_Node.loop = true;
player_2_Node.volume.value = -12;
channel_2_volNode.volume.value = -6;
channel_2_volume_value.innerHTML = -6;
channel_2_volume.value = -6;

player_3_loop_checkbox.checked = true;
player_3_Node.loop = true;
player_3_Node.volume.value = -12;
channel_3_volNode.volume.value = -6;
channel_3_volume_value.innerHTML = -6;
channel_3_volume.value = -6;

player_4_loop_checkbox.checked = true;
player_4_Node.loop = true;
player_4_Node.volume.value = -12;
channel_4_volNode.volume.value = -6;
channel_4_volume_value.innerHTML = -6;
channel_4_volume.value = -6;

fx_1_volume.value = -6;
fx_1_volume_value.innerHTML = -6;
fx_2_volNode.volume.value = -6;
fx_2_volume.value = -6;
fx_2_volume_value.innerHTML = -6;

fx_3_volNode.volume.value = -6;
fx_3_volume.value = -6;
fx_3_volume_value.innerHTML = -6;

fx_4_volNode.volume.value = -6;
fx_4_volume.value = -6;
fx_4_volume_value.innerHTML = -6;

fx_1_dynamics_compressor_div.style.display = "block";
fx_1_dynamics_gate_div.style.display = "none";
fx_1_dynamics_limiter_div.style.display = "none";

//player_1_Node.loopStart = 0.3;    player_1_loop_start.value = 0.3;
//player_1_Node.loopEnd = 22.8;     player_1_loop_end.value = 22.8;
hide_all_divs("fx_1_select");
hide_all_divs("fx_2_select");
hide_all_divs("fx_3_select");
hide_all_divs("fx_4_select");

var fx_1_new_patch = "";
var fx_1_actual_patch = "fx_1_pingpong";
var fx_2_actual_patch = "fx_2_pingpong";
var fx_3_actual_patch = "fx_3_pingpong";
var fx_4_actual_patch = "fx_4_pingpong";

var source_1_actual_patch = "player";
var source_2_actual_patch = "player";
var source_3_actual_patch = "player";
var source_4_actual_patch = "player";

fx_1_pingpong_Node.connect(fxReturn_1_fader);
channel_1_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
channel_1_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
channel_1_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

fx_2_pingpong_Node.connect(fxReturn_2_fader);
channel_1_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
channel_1_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
channel_1_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

fx_3_pingpong_Node.connect(fxReturn_3_fader);
channel_1_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
channel_1_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
channel_1_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

fx_4_pingpong_Node.connect(fxReturn_4_fader);
channel_1_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
channel_1_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
channel_1_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

player_1_div.style.display = "block";
player_2_div.style.display = "block";
player_3_div.style.display = "block";
player_4_div.style.display = "block";

fx_1_pingpong_div.style.display = "block";
fx_2_pingpong_div.style.display = "block";
fx_3_pingpong_div.style.display = "block";
fx_4_pingpong_div.style.display = "block";

const empty_1_div = document.getElementById("empty_1_div");
const empty_2_div = document.getElementById("empty_2_div");
const empty_3_div = document.getElementById("empty_3_div");
const empty_4_div = document.getElementById("empty_4_div");
empty_1_div.style.display = "none";
empty_2_div.style.display = "none";
empty_3_div.style.display = "none";
empty_4_div.style.display = "none";

//--------------------------------------------------------
//--------------------------------------------------------
//<button id="elem" onclick="alert('Clic!');">Click automático</button>

let event2 = new MouseEvent("click", {
  bubbles: true,
  cancelable: true,
  //clientX: 10,
  //clientY: 11
});
multiple_play_source_2.dispatchEvent(event2);
player_1_playButton.dispatchEvent(event2);

//element.dispatchEvent(new Event('input'))

//*********************************************************************************** */
//*********                                  ***************************************** */
//*********            FUNCTIONS             ********************************************************************** */
//*********                                  **************************************** */
//*********************************************************************************** */

function send_text_Button() {
  const sampler_baseUrl = document.getElementById("sampler_baseUrl");
  sampler_baseUrl.value
  console.log("value en sampler_baseUrl.value: " + sampler_baseUrl.value);
}

function send(value, rampTo_newValue, rampTo_time) {
  console.log("SEND foo" + "\n" + "value: " + value + "\n" +
    "rampTo_newValue: "
    + rampTo_newValue.value + "\n"
    + "rampTo_time: " +
    rampTo_time.value + "\n"
  );
  if (rampTo_newValue.value != "" && rampTo_time.value != "") {
    console.log("SEND value: " + value);
    switch (value) {
      case "master_volume_rampTo": {
        masterVolumeNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        master_volume.value = rampTo_newValue.value;
        master_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      //channel 1
      case "channel_1_volume_rampTo": {
        channel_1_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_volume.value = rampTo_newValue.value;
        channel_1_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "channel_1_pan_rampTo": {
        channel_1_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_pan.value = rampTo_newValue.value;
        channel_1_pan_value.innerHTML = channel_1_pan.value;
        break;
      }
      case "channel_1_filter_frequency_shelf_rampTo": {
        channel_1_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_1_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_filter_gain_shelf_rampTo": {
        channel_1_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_1_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_filter_detune_shelf_rampTo": {

        channel_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_1_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_filter_frequency_allpass_rampTo": {
        channel_1_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_frequency_value_allpass.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_frequency_allpass.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_1_filter_Q_allpass_rampTo": {
        channel_1_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_Q_value_allpass.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_Q_allpass.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_1_filter_detune_allpass_rampTo": {
        channel_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_detune_value_allpass.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_detune_allpass.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_1_filter_frequency_peaking_rampTo": {
        channel_1_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_frequency_value_peaking.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_frequency_peaking.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_1_filter_Q_peaking_rampTo": {
        channel_1_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_Q_value_peaking.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_Q_peaking.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_1_filter_gain_peaking_rampTo": {
        channel_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_detune_value_peaking.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_detune_peaking.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_1_filter_detune_peaking_rampTo": {
        channel_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_filter_detune_value_peaking.innerHTML = `${channel_1_volume_rampTo_gain.value}`;
        channel_1_filter_detune_peaking.value = `${channel_1_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "channel_1_HighShelf_gain_tascam_rampTo": {
        channel_1_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_Mid_SemiParam_gain_tascam_rampTo": {
        channel_1_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_Mid_SemiParam_frequency_tascam_rampTo": {
        channel_1_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_LowShelf_gain_tascam_rampTo": {
        channel_1_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "channel_1_EQ3_low_frequency_rampTo": {
        channel_1_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_EQ3_low_fader_gain_rampTo": {
        channel_1_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_EQ3_mid_fader_gain_rampTo": {
        channel_1_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_EQ3_hi_fader_gain_rampTo": {
        channel_1_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_EQ3_high_frequency_rampTo": {
        channel_1_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_EQ3_Q_rampTo": {
        channel_1_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "channel_1_dynamics_ratio_compressor_rampTo": {
        channel_1_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_dynamics_threshold_compressor_rampTo": {
        channel_1_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_dynamics_release_compressor_rampTo": {
        channel_1_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_dynamics_attack_compressor_rampTo": {
        channel_1_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_dynamics_knee_compressor_rampTo": {
        channel_1_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "channel_1_gate_threshold_rampTo": {
        channel_1_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_1_gate_smoothing_rampTo": {
        channel_1_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_1_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        channel_1_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "channel_1_limiter_threshold_rampTo": {
        try {
          channel_1_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
          channel_1_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
          channel_1_limiter_threshold.value = `${rampTo_newValue.value}`;
        } catch (error) {
          console.log("error.name: " + error.name)
        }
        break;
      }
      //channel 1 fxSend
      case "channel_1_fxSend_1_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_1_fxSend_1_state == "PostEQ") {
            channel_1_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_1_state == "PreEQ") {
            channel_1_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_1_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_1_fxSend_1.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_1_fxSend_2_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_1_fxSend_2_state == "PostEQ") {
            channel_1_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_2_state == "PreEQ") {
            channel_1_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_2_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_1_fxSend_2.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_1_fxSend_3_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_1_fxSend_3_state == "PostEQ") {
            channel_1_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_3_state == "PreEQ") {
            channel_1_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_3_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_1_fxSend_3.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_1_fxSend_4_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_1_fxSend_4_state == "PostEQ") {
            channel_1_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_4_state == "PreEQ") {
            channel_1_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_1_fxSend_4_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_1_fxSend_4.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      //sources
      case "noise_1_volume_rampTo": {
        noise_1_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noise_1_volume.value = rampTo_newValue.value;
        noise_1_volume_value.innerHTML = `${e.currentTarget.value}`;
        break;
      }
      case "grainPlayer_1_volume_rampTo": {
        grainPlayer_1_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        grainPlayer_1_volume.value = rampTo_newValue.value;
        grainPlayer_1_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "player_1_volume_rampTo": {
        player_1_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        player_1_volume.value = rampTo_newValue.value;
        player_1_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_1_volume_rampTo": {
        noiseSynth_1.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noiseSynth_1_volume.value = rampTo_newValue.value;
        noiseSynth_1_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_1_envelope_attack_rampTo": {
        noiseSynth_1.envelope.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        //synth.set({ envelope: { attack: 0.1 } });
        noiseSynth_1_envelope_attack.value = rampTo_newValue.value;
        noiseSynth_1_envelope_attack_value.innerHTML = rampTo_newValue.value;
        break;
      }

      //channel 2
      case "channel_2_volume_rampTo": {
        channel_2_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_volume.value = rampTo_newValue.value;
        channel_2_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "channel_2_pan_rampTo": {
        channel_2_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_pan.value = rampTo_newValue.value;
        channel_2_pan_value.innerHTML = channel_2_pan.value;
        break;
      }
      case "channel_2_filter_frequency_shelf_rampTo": {
        channel_2_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_2_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_filter_gain_shelf_rampTo": {
        channel_2_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_2_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_filter_detune_shelf_rampTo": {

        channel_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_2_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_filter_frequency_allpass_rampTo": {
        channel_2_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_frequency_value_allpass.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_frequency_allpass.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_2_filter_Q_allpass_rampTo": {
        channel_2_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_Q_value_allpass.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_Q_allpass.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_2_filter_detune_allpass_rampTo": {
        channel_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_detune_value_allpass.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_detune_allpass.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_2_filter_frequency_peaking_rampTo": {
        channel_2_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_frequency_value_peaking.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_frequency_peaking.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_2_filter_Q_peaking_rampTo": {
        channel_2_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_Q_value_peaking.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_Q_peaking.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_2_filter_gain_peaking_rampTo": {
        channel_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_detune_value_peaking.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_detune_peaking.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_2_filter_detune_peaking_rampTo": {
        channel_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_filter_detune_value_peaking.innerHTML = `${channel_2_volume_rampTo_gain.value}`;
        channel_2_filter_detune_peaking.value = `${channel_2_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "channel_2_HighShelf_gain_tascam_rampTo": {
        channel_2_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_Mid_SemiParam_gain_tascam_rampTo": {
        channel_2_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_Mid_SemiParam_frequency_tascam_rampTo": {
        channel_2_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_LowShelf_gain_tascam_rampTo": {
        channel_2_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "channel_2_EQ3_low_frequency_rampTo": {
        channel_2_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_EQ3_low_fader_gain_rampTo": {
        channel_2_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_EQ3_mid_fader_gain_rampTo": {
        channel_2_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_EQ3_hi_fader_gain_rampTo": {
        channel_2_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_EQ3_high_frequency_rampTo": {
        channel_2_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_EQ3_Q_rampTo": {
        channel_2_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "channel_2_dynamics_ratio_compressor_rampTo": {
        channel_2_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_dynamics_threshold_compressor_rampTo": {
        channel_2_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_dynamics_release_compressor_rampTo": {
        channel_2_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_dynamics_attack_compressor_rampTo": {
        channel_2_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_dynamics_knee_compressor_rampTo": {
        channel_2_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "channel_2_gate_threshold_rampTo": {
        channel_2_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_2_gate_smoothing_rampTo": {
        channel_2_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_2_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        channel_2_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "channel_2_limiter_threshold_rampTo": {
        try {
          channel_2_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
          channel_2_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
          channel_2_limiter_threshold.value = `${rampTo_newValue.value}`;
        } catch (error) {
          console.log("error.name: " + error.name)
        }
        break;
      }
      //channel 2 fxSend
      case "channel_2_fxSend_1_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_2_fxSend_1_state == "PostEQ") {
            channel_2_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_1_state == "PreEQ") {
            channel_2_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_1_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_2_fxSend_1.value = `${rampTo_newValue.value}`;

          }
        }
        break;
      }
      case "channel_2_fxSend_2_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_2_fxSend_2_state == "PostEQ") {
            channel_2_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_2_state == "PreEQ") {
            channel_2_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_2_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_2_fxSend_2.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_2_fxSend_3_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_2_fxSend_3_state == "PostEQ") {
            channel_2_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_3_state == "PreEQ") {
            channel_2_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_3_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_2_fxSend_3.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_2_fxSend_4_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_2_fxSend_4_state == "PostEQ") {
            channel_2_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_4_state == "PreEQ") {
            channel_2_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_2_fxSend_4_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_2_fxSend_4.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      //sources
      case "noise_2_volume_rampTo": {
        noise_2_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noise_2_volume.value = rampTo_newValue.value;
        noise_2_volume_value.innerHTML = `${rampTo_newValue.value}`
        break;
      }
      case "grainPlayer_2_volume_rampTo": {
        grainPlayer_2_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        grainPlayer_2_volume.value = rampTo_newValue.value;
        grainPlayer_2_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "player_2_volume_rampTo": {
        player_2_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        player_2_volume.value = rampTo_newValue.value;
        player_2_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_2_volume_rampTo": {
        noiseSynth_2.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noiseSynth_2_volume.value = rampTo_newValue.value;
        noiseSynth_2_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_2_envelope_attack_rampTo": {
        noiseSynth_2.envelope.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        //synth.set({ envelope: { attack: 0.1 } });
        noiseSynth_2_envelope_attack.value = rampTo_newValue.value;
        noiseSynth_2_envelope_attack_value.innerHTML = rampTo_newValue.value;
        break;
      }
      //channel_3
      case "channel_3_volume_rampTo": {
        channel_3_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_volume.value = rampTo_newValue.value;
        channel_3_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "channel_3_pan_rampTo": {
        channel_3_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_pan.value = rampTo_newValue.value;
        channel_3_pan_value.innerHTML = channel_3_pan.value;
        break;
      }
      case "channel_3_filter_frequency_shelf_rampTo": {
        channel_3_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_3_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_filter_gain_shelf_rampTo": {
        channel_3_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_3_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_filter_detune_shelf_rampTo": {

        channel_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_3_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_filter_frequency_allpass_rampTo": {
        channel_3_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_frequency_value_allpass.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_frequency_allpass.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_3_filter_Q_allpass_rampTo": {
        channel_3_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_Q_value_allpass.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_Q_allpass.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_3_filter_detune_allpass_rampTo": {
        channel_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_detune_value_allpass.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_detune_allpass.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_3_filter_frequency_peaking_rampTo": {
        channel_3_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_frequency_value_peaking.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_frequency_peaking.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_3_filter_Q_peaking_rampTo": {
        channel_3_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_Q_value_peaking.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_Q_peaking.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_3_filter_gain_peaking_rampTo": {
        channel_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_detune_value_peaking.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_detune_peaking.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_3_filter_detune_peaking_rampTo": {
        channel_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_filter_detune_value_peaking.innerHTML = `${channel_3_volume_rampTo_gain.value}`;
        channel_3_filter_detune_peaking.value = `${channel_3_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "channel_3_HighShelf_gain_tascam_rampTo": {
        channel_3_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_Mid_SemiParam_gain_tascam_rampTo": {
        channel_3_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_Mid_SemiParam_frequency_tascam_rampTo": {
        channel_3_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_LowShelf_gain_tascam_rampTo": {
        channel_3_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "channel_3_EQ3_low_frequency_rampTo": {
        channel_3_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_EQ3_low_fader_gain_rampTo": {
        channel_3_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_EQ3_mid_fader_gain_rampTo": {
        channel_3_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_EQ3_hi_fader_gain_rampTo": {
        channel_3_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_EQ3_high_frequency_rampTo": {
        channel_3_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_EQ3_Q_rampTo": {
        channel_3_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "channel_3_dynamics_ratio_compressor_rampTo": {
        channel_3_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_dynamics_threshold_compressor_rampTo": {
        channel_3_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_dynamics_release_compressor_rampTo": {
        channel_3_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_dynamics_attack_compressor_rampTo": {
        channel_3_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_dynamics_knee_compressor_rampTo": {
        channel_3_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "channel_3_gate_threshold_rampTo": {
        channel_3_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_3_gate_smoothing_rampTo": {
        channel_3_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_3_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        channel_3_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "channel_3_limiter_threshold_rampTo": {
        try {
          channel_3_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
          channel_3_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
          channel_3_limiter_threshold.value = `${rampTo_newValue.value}`;
        } catch (error) {
          console.log("error.name: " + error.name)
        }
        break;
      }
      //channel 3 fxSend
      case "channel_3_fxSend_1_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_3_fxSend_1_state == "PostEQ") {
            channel_3_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_1_state == "PreEQ") {
            channel_3_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_1_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_3_fxSend_1.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_3_fxSend_2_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_3_fxSend_2_state == "PostEQ") {
            channel_3_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_2_state == "PreEQ") {
            channel_3_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_2_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_3_fxSend_2.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_3_fxSend_3_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_3_fxSend_3_state == "PostEQ") {
            channel_3_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_3_state == "PreEQ") {
            channel_3_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_3_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_3_fxSend_3.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_3_fxSend_4_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_3_fxSend_4_state == "PostEQ") {
            channel_3_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_4_state == "PreEQ") {
            channel_3_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_3_fxSend_4_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_3_fxSend_4.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      //sources
      case "noise_3_volume_rampTo": {
        noise_3_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noise_3_volume.value = rampTo_newValue.value;
        noise_3_volume_value.innerHTML = `${e.currentTarget.value}`;
        break;
      }
      case "grainPlayer_3_volume_rampTo": {
        grainPlayer_3_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        grainPlayer_3_volume.value = rampTo_newValue.value;
        grainPlayer_3_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "player_3_volume_rampTo": {
        player_3_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        player_3_volume.value = rampTo_newValue.value;
        player_3_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_3_volume_rampTo": {
        noiseSynth_3.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noiseSynth_3_volume.value = rampTo_newValue.value;
        noiseSynth_3_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_3_envelope_attack_rampTo": {
        noiseSynth_3.envelope.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        //synth.set({ envelope: { attack: 0.1 } });
        noiseSynth_3_envelope_attack.value = rampTo_newValue.value;
        noiseSynth_3_envelope_attack_value.innerHTML = rampTo_newValue.value;
        break;
      }
      //channel 4
      case "channel_4_volume_rampTo": {
        channel_4_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_volume.value = rampTo_newValue.value;
        channel_4_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "channel_4_pan_rampTo": {
        channel_4_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_pan.value = rampTo_newValue.value;
        channel_4_pan_value.innerHTML = channel_4_pan.value;
        break;
      }
      case "channel_4_filter_frequency_shelf_rampTo": {
        channel_4_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_4_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_filter_gain_shelf_rampTo": {
        channel_4_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_4_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_filter_detune_shelf_rampTo": {

        channel_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        channel_4_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_filter_frequency_allpass_rampTo": {
        channel_4_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_frequency_value_allpass.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_frequency_allpass.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_4_filter_Q_allpass_rampTo": {
        channel_4_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_Q_value_allpass.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_Q_allpass.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_4_filter_detune_allpass_rampTo": {
        channel_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_detune_value_allpass.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_detune_allpass.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_4_filter_frequency_peaking_rampTo": {
        channel_4_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_frequency_value_peaking.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_frequency_peaking.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_4_filter_Q_peaking_rampTo": {
        channel_4_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_Q_value_peaking.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_Q_peaking.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_4_filter_gain_peaking_rampTo": {
        channel_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_detune_value_peaking.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_detune_peaking.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      case "channel_4_filter_detune_peaking_rampTo": {
        channel_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_filter_detune_value_peaking.innerHTML = `${channel_4_volume_rampTo_gain.value}`;
        channel_4_filter_detune_peaking.value = `${channel_4_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "channel_4_HighShelf_gain_tascam_rampTo": {
        channel_4_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_Mid_SemiParam_gain_tascam_rampTo": {
        channel_4_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_Mid_SemiParam_frequency_tascam_rampTo": {
        channel_4_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_LowShelf_gain_tascam_rampTo": {
        channel_4_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "channel_4_EQ3_low_frequency_rampTo": {
        channel_4_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_EQ3_low_fader_gain_rampTo": {
        channel_4_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_EQ3_mid_fader_gain_rampTo": {
        channel_4_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_EQ3_hi_fader_gain_rampTo": {
        channel_4_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_EQ3_high_frequency_rampTo": {
        channel_4_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_EQ3_Q_rampTo": {
        channel_4_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "channel_4_dynamics_ratio_compressor_rampTo": {
        channel_4_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_dynamics_threshold_compressor_rampTo": {
        channel_4_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_dynamics_release_compressor_rampTo": {
        channel_4_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_dynamics_attack_compressor_rampTo": {
        channel_4_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_dynamics_knee_compressor_rampTo": {
        channel_4_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "channel_4_gate_threshold_rampTo": {
        channel_4_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "channel_4_gate_smoothing_rampTo": {
        channel_4_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        channel_4_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        channel_4_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "channel_4_limiter_threshold_rampTo": {
        try {
          channel_4_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
          channel_4_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
          channel_4_limiter_threshold.value = `${rampTo_newValue.value}`;
        } catch (error) {
          console.log("error.name: " + error.name)
        }
        break;
      }
      //channel 4 fxSend
      case "channel_4_fxSend_1_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_4_fxSend_1_state == "PostEQ") {
            channel_4_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_1_state == "PreEQ") {
            channel_4_fxSend_1.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_1_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_4_fxSend_1.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_4_fxSend_2_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_4_fxSend_2_state == "PostEQ") {
            channel_4_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_2_state == "PreEQ") {
            channel_4_fxSend_2.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_2_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_4_fxSend_2.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_4_fxSend_3_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_4_fxSend_3_state == "PostEQ") {
            channel_4_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_3_state == "PreEQ") {
            channel_4_fxSend_3.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_3_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_4_fxSend_3.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      case "channel_4_fxSend_4_volume_rampTo": {
        if (rampTo_newValue.value <= 12) {
          if (channel_4_fxSend_4_state == "PostEQ") {
            channel_4_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_4_state == "PreEQ") {
            channel_4_fxSend_4.value = `${rampTo_newValue.value}`;
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          }
          else if (channel_4_fxSend_4_state == "PostFdr") {
            recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
            channel_4_fxSend_4.value = `${rampTo_newValue.value}`;
          }
        }
        break;
      }
      //sources
      case "noise_4_volume_rampTo": {
        noise_4_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noise_4_volume.value = rampTo_newValue.value;
        noise_4_volume_value.innerHTML = `${e.currentTarget.value}`;
        break;
      }
      case "grainPlayer_4_volume_rampTo": {
        grainPlayer_4_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        grainPlayer_4_volume.value = rampTo_newValue.value;
        grainPlayer_4_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "player_4_volume_rampTo": {
        player_4_Node.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        player_4_volume.value = rampTo_newValue.value;
        player_4_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_4_volume_rampTo": {
        noiseSynth_4.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        noiseSynth_4_volume.value = rampTo_newValue.value;
        noiseSynth_4_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "noiseSynth_4_envelope_attack_rampTo": {
        noiseSynth_4.envelope.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        //synth.set({ envelope: { attack: 0.1 } });
        noiseSynth_4_envelope_attack.value = rampTo_newValue.value;
        noiseSynth_4_envelope_attack_value.innerHTML = rampTo_newValue.value;
        break;
      }

      //fx 1
      case "fx_1_volume_rampTo": {
        fx_1_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_volume.value = rampTo_newValue.value;
        fx_1_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "fx_1_pan_rampTo": {
        fx_1_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_pan_fader.value = rampTo_newValue.value;
        fx_1_pan_value.innerHTML = fx_1_panNode.pan.value;
        break;
      }
      case "fx_1_filter_frequency_shelf_rampTo": {
        fx_1_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_1_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_filter_gain_shelf_rampTo": {
        fx_1_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_1_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_filter_detune_shelf_rampTo": {
        fx_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_1_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_filter_frequency_allpass_rampTo": {
        fx_1_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_frequency_value_allpass.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_frequency_allpass.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_1_filter_Q_allpass_rampTo": {
        fx_1_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_Q_value_allpass.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_Q_allpass.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_1_filter_detune_allpass_rampTo": {
        fx_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_detune_value_allpass.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_detune_allpass.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_1_filter_frequency_peaking_rampTo": {
        fx_1_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_frequency_value_peaking.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_frequency_peaking.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_1_filter_Q_peaking_rampTo": {
        fx_1_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_Q_value_peaking.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_Q_peaking.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_1_filter_gain_peaking_rampTo": {
        fx_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_detune_value_peaking.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_detune_peaking.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_1_filter_detune_peaking_rampTo": {
        fx_1_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_filter_detune_value_peaking.innerHTML = `${fx_1_volume_rampTo_gain.value}`;
        fx_1_filter_detune_peaking.value = `${fx_1_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "fx_1_HighShelf_gain_tascam_rampTo": {
        fx_1_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_Mid_SemiParam_gain_tascam_rampTo": {
        fx_1_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_Mid_SemiParam_frequency_tascam_rampTo": {
        fx_1_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_LowShelf_gain_tascam_rampTo": {
        fx_1_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "fx_1_EQ3_low_frequency_rampTo": {
        fx_1_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_EQ3_low_fader_gain_rampTo": {
        fx_1_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_EQ3_mid_fader_gain_rampTo": {
        fx_1_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_EQ3_hi_fader_gain_rampTo": {
        fx_1_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_EQ3_high_frequency_rampTo": {
        fx_1_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_EQ3_Q_rampTo": {
        fx_1_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "fx_1_dynamics_ratio_compressor_rampTo": {
        fx_1_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_dynamics_threshold_compressor_rampTo": {
        fx_1_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_dynamics_release_compressor_rampTo": {
        fx_1_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_dynamics_attack_compressor_rampTo": {
        fx_1_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_dynamics_knee_compressor_rampTo": {
        fx_1_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "fx_1_gate_threshold_rampTo": {
        fx_1_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_gate_smoothing_rampTo": {
        fx_1_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "fx_1_limiter_threshold_rampTo": {
        fx_1_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_limiter_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      //fx 1 fxSend
      case "fx_1_fxSend_1_volume_rampTo": {
        if (fx_1_fxSend_1_state == "PostEQ") {
          fx_1_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_1_state == "PreEQ") {
          fx_1_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_1_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_1_fxSend_1.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_1_fxSend_2_volume_rampTo": {
        if (fx_1_fxSend_2_state == "PostEQ") {
          fx_1_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_2_state == "PreEQ") {
          fx_1_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_2_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_1_fxSend_2.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_1_fxSend_3_volume_rampTo": {
        if (fx_1_fxSend_3_state == "PostEQ") {
          fx_1_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_3_state == "PreEQ") {
          fx_1_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_3_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_1_fxSend_3.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_1_fxSend_4_volume_rampTo": {
        if (fx_1_fxSend_4_state == "PostEQ") {
          fx_1_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_4_state == "PreEQ") {
          fx_1_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_1_fxSend_4_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_1_fxSend_4.value = `${rampTo_newValue.value}`;
        }
        break;
      }

      //fx 2
      case "fx_2_volume_rampTo": {
        fx_2_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_volume.value = rampTo_newValue.value;
        fx_2_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "fx_2_pan_rampTo": {
        fx_2_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_pan.value = rampTo_newValue.value;
        fx_2_pan_value.innerHTML = fx_2_pan.value;
        break;
      }
      case "fx_2_filter_frequency_shelf_rampTo": {
        fx_2_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_2_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_filter_gain_shelf_rampTo": {
        fx_2_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_2_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_filter_detune_shelf_rampTo": {
        fx_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_2_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_filter_frequency_allpass_rampTo": {
        fx_2_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_frequency_value_allpass.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_frequency_allpass.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_2_filter_Q_allpass_rampTo": {
        fx_2_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_Q_value_allpass.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_Q_allpass.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_2_filter_detune_allpass_rampTo": {
        fx_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_detune_value_allpass.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_detune_allpass.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_2_filter_frequency_peaking_rampTo": {
        fx_2_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_frequency_value_peaking.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_frequency_peaking.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_2_filter_Q_peaking_rampTo": {
        fx_2_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_Q_value_peaking.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_Q_peaking.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_2_filter_gain_peaking_rampTo": {
        fx_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_detune_value_peaking.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_detune_peaking.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_2_filter_detune_peaking_rampTo": {
        fx_2_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_filter_detune_value_peaking.innerHTML = `${fx_2_volume_rampTo_gain.value}`;
        fx_2_filter_detune_peaking.value = `${fx_2_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "fx_2_HighShelf_gain_tascam_rampTo": {
        fx_2_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_Mid_SemiParam_gain_tascam_rampTo": {
        fx_2_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_Mid_SemiParam_frequency_tascam_rampTo": {
        fx_2_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_LowShelf_gain_tascam_rampTo": {
        fx_2_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "fx_2_EQ3_low_frequency_rampTo": {
        fx_2_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_EQ3_low_fader_gain_rampTo": {
        fx_2_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_EQ3_mid_fader_gain_rampTo": {
        fx_2_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_EQ3_hi_fader_gain_rampTo": {
        fx_2_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_EQ3_high_frequency_rampTo": {
        fx_2_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_EQ3_Q_rampTo": {
        fx_2_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "fx_2_dynamics_ratio_compressor_rampTo": {
        fx_2_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_dynamics_threshold_compressor_rampTo": {
        fx_2_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_dynamics_release_compressor_rampTo": {
        fx_2_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_dynamics_attack_compressor_rampTo": {
        fx_2_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_dynamics_knee_compressor_rampTo": {
        fx_2_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "fx_2_gate_threshold_rampTo": {
        fx_2_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_gate_smoothing_rampTo": {
        fx_2_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "fx_2_limiter_threshold_rampTo": {
        fx_2_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_limiter_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      //fx 2 fxSend
      case "fx_2_fxSend_1_volume_rampTo": {
        if (fx_2_fxSend_1_state == "PostEQ") {
          fx_2_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_1_state == "PreEQ") {
          fx_2_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_1_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_2_fxSend_1.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_2_fxSend_2_volume_rampTo": {
        if (fx_2_fxSend_2_state == "PostEQ") {
          fx_2_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_2_state == "PreEQ") {
          fx_2_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_2_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_2_fxSend_2.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_2_fxSend_3_volume_rampTo": {
        if (fx_2_fxSend_3_state == "PostEQ") {
          fx_2_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_3_state == "PreEQ") {
          fx_2_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_3_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_2_fxSend_3.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_2_fxSend_4_volume_rampTo": {
        if (fx_2_fxSend_4_state == "PostEQ") {
          fx_2_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_4_state == "PreEQ") {
          fx_2_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_2_fxSend_4_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_2_fxSend_4.value = `${rampTo_newValue.value}`;
        }
        break;
      }

      //fx 3
      case "fx_3_volume_rampTo": {
        fx_3_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_volume.value = rampTo_newValue.value;
        fx_3_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "fx_3_pan_rampTo": {
        fx_3_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_pan.value = rampTo_newValue.value;
        fx_3_pan_value.innerHTML = fx_3_pan.value;
        break;
      }
      case "fx_3_filter_frequency_shelf_rampTo": {
        fx_3_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_3_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_filter_gain_shelf_rampTo": {
        fx_3_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_3_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_filter_detune_shelf_rampTo": {
        fx_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_3_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_filter_frequency_allpass_rampTo": {
        fx_3_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_frequency_value_allpass.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_frequency_allpass.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_3_filter_Q_allpass_rampTo": {
        fx_3_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_Q_value_allpass.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_Q_allpass.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_3_filter_detune_allpass_rampTo": {
        fx_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_detune_value_allpass.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_detune_allpass.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_3_filter_frequency_peaking_rampTo": {
        fx_3_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_frequency_value_peaking.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_frequency_peaking.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_3_filter_Q_peaking_rampTo": {
        fx_3_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_Q_value_peaking.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_Q_peaking.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_3_filter_gain_peaking_rampTo": {
        fx_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_detune_value_peaking.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_detune_peaking.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_3_filter_detune_peaking_rampTo": {
        fx_3_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_filter_detune_value_peaking.innerHTML = `${fx_3_volume_rampTo_gain.value}`;
        fx_3_filter_detune_peaking.value = `${fx_3_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "fx_3_HighShelf_gain_tascam_rampTo": {
        fx_3_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_Mid_SemiParam_gain_tascam_rampTo": {
        fx_3_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_Mid_SemiParam_frequency_tascam_rampTo": {
        fx_3_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_LowShelf_gain_tascam_rampTo": {
        fx_3_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "fx_3_EQ3_low_frequency_rampTo": {
        fx_3_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_EQ3_low_fader_gain_rampTo": {
        fx_3_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_EQ3_mid_fader_gain_rampTo": {
        fx_3_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_EQ3_hi_fader_gain_rampTo": {
        fx_3_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_EQ3_high_frequency_rampTo": {
        fx_3_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_EQ3_Q_rampTo": {
        fx_3_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "fx_3_dynamics_ratio_compressor_rampTo": {
        fx_3_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_dynamics_threshold_compressor_rampTo": {
        fx_3_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_dynamics_release_compressor_rampTo": {
        fx_3_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_dynamics_attack_compressor_rampTo": {
        fx_3_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_dynamics_knee_compressor_rampTo": {
        fx_3_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "fx_3_gate_threshold_rampTo": {
        fx_3_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_3_gate_smoothing_rampTo": {
        fx_3_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "fx_3_limiter_threshold_rampTo": {
        fx_3_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_3_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_3_limiter_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      //fx 3 fxSend
      case "fx_3_fxSend_1_volume_rampTo": {
        if (fx_3_fxSend_1_state == "PostEQ") {
          fx_3_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_1_state == "PreEQ") {
          fx_3_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_1_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_3_fxSend_1.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_3_fxSend_2_volume_rampTo": {
        if (fx_3_fxSend_2_state == "PostEQ") {
          fx_3_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_2_state == "PreEQ") {
          fx_3_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_2_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_3_fxSend_2.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_3_fxSend_3_volume_rampTo": {
        if (fx_3_fxSend_3_state == "PostEQ") {
          fx_3_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_3_state == "PreEQ") {
          fx_3_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_3_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_3_fxSend_3.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_3_fxSend_4_volume_rampTo": {
        if (fx_3_fxSend_4_state == "PostEQ") {
          fx_3_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_4_state == "PreEQ") {
          fx_3_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_3_fxSend_4_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_3_fxSend_4.value = `${rampTo_newValue.value}`;
        }
        break;
      }

      //fx 4
      case "fx_4_volume_rampTo": {
        fx_4_volNode.volume.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_volume.value = rampTo_newValue.value;
        fx_4_volume_value.innerHTML = rampTo_newValue.value;
        break;
      }
      case "fx_4_pan_rampTo": {
        fx_4_panNode.pan.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_pan.value = rampTo_newValue.value;
        fx_4_pan_value.innerHTML = fx_4_pan.value;
        break;
      }
      case "fx_4_filter_frequency_shelf_rampTo": {
        fx_4_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_frequency_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_4_filter_frequency_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_filter_gain_shelf_rampTo": {
        fx_4_filter.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_gain_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_4_filter_gain_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_filter_detune_shelf_rampTo": {
        fx_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_detune_value_shelf.innerHTML = `${rampTo_newValue.value}`;
        fx_4_filter_detune_shelf.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_filter_frequency_allpass_rampTo": {
        fx_4_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_frequency_value_allpass.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_frequency_allpass.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_4_filter_Q_allpass_rampTo": {
        fx_4_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_Q_value_allpass.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_Q_allpass.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_4_filter_detune_allpass_rampTo": {
        fx_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_detune_value_allpass.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_detune_allpass.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_4_filter_frequency_peaking_rampTo": {
        fx_4_filter.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_frequency_value_peaking.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_frequency_peaking.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_4_filter_Q_peaking_rampTo": {
        fx_4_filter.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_Q_value_peaking.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_Q_peaking.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_4_filter_gain_peaking_rampTo": {
        fx_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_detune_value_peaking.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_detune_peaking.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      case "fx_4_filter_detune_peaking_rampTo": {
        fx_4_filter.detune.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_filter_detune_value_peaking.innerHTML = `${fx_4_volume_rampTo_gain.value}`;
        fx_4_filter_detune_peaking.value = `${fx_4_volume_rampTo_gain.value}`;
        break;
      }
      //TASCAM
      case "fx_4_HighShelf_gain_tascam_rampTo": {
        fx_4_tascam_HighShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_tascam_HighShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_tascam_HighShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_Mid_SemiParam_gain_tascam_rampTo": {
        fx_4_tascam_Mid_SemiParam_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_tascam_Mid_SemiParam_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_tascam_Mid_SemiParam_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_Mid_SemiParam_frequency_tascam_rampTo": {
        fx_4_tascam_HighShelf_FilterNode.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_tascam_Mid_SemiParam_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_tascam_Mid_SemiParam_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_LowShelf_gain_tascam_rampTo": {
        fx_4_tascam_LowShelf_FilterNode.gain.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_tascam_LowShelf_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_tascam_LowShelf_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      //EQ3    
      case "fx_4_EQ3_low_frequency_rampTo": {
        fx_4_filter_eq3.lowFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_EQ3_low_frequency_fader_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_EQ3_low_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_EQ3_low_fader_gain_rampTo": {
        fx_4_filter_eq3.low.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_EQ3_low_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_EQ3_low_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_EQ3_mid_fader_gain_rampTo": {
        fx_4_filter_eq3.mid.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_EQ3_mid_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_EQ3_mid_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_EQ3_hi_fader_gain_rampTo": {
        fx_4_filter_eq3.high.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_EQ3_hi_fader_gain_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_EQ3_hi_fader_gain.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_EQ3_high_frequency_rampTo": {
        fx_4_filter_eq3.highFrequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_EQ3_high_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_EQ3_high_frequency_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_EQ3_Q_rampTo": {
        fx_4_filter_eq3.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_EQ3_Q_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_EQ3_Q_fader.value = `${rampTo_newValue.value}`;
        break;
      }
      // Dynamics Compressor
      case "fx_4_dynamics_ratio_compressor_rampTo": {
        fx_4_dynamics_compressorNode.ratio.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_dynamics_ratio_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_dynamics_ratio.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_dynamics_threshold_compressor_rampTo": {
        fx_4_dynamics_compressorNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_dynamics_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_dynamics_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_dynamics_release_compressor_rampTo": {
        fx_4_dynamics_compressorNode.release.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_dynamics_release_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_dynamics_release.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_dynamics_attack_compressor_rampTo": {
        fx_4_dynamics_compressorNode.attack.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_dynamics_attack_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_dynamics_attack.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_dynamics_knee_compressor_rampTo": {
        fx_4_dynamics_compressorNode.knee.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_dynamics_knee_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_dynamics_knee.value = `${rampTo_newValue.value}`;
        break;
      }
      //Gate
      case "fx_4_gate_threshold_rampTo": {
        fx_4_dynamics_gateNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_gate_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_gate_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_4_gate_smoothing_rampTo": {
        fx_4_dynamics_gateNode.smoothing.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_gate_smoothing_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_gate_smoothing.value = `${rampTo_newValue.value}`;
        break;
      }
      // Limiter
      case "fx_4_limiter_threshold_rampTo": {
        fx_4_dynamics_limiterNode.threshold.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_4_limiter_threshold_value.innerHTML = `${rampTo_newValue.value}`;
        fx_4_limiter_threshold.value = `${rampTo_newValue.value}`;
        break;
      }
      //fx 4 fxSend
      case "fx_4_fxSend_1_volume_rampTo": {
        if (fx_4_fxSend_1_state == "PostEQ") {
          fx_4_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_1_state == "PreEQ") {
          fx_4_fxSend_1.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_1_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_4_fxSend_1.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_4_fxSend_2_volume_rampTo": {
        if (fx_4_fxSend_2_state == "PostEQ") {
          fx_4_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_2_state == "PreEQ") {
          fx_4_fxSend_2.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_2_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_4_fxSend_2.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_4_fxSend_3_volume_rampTo": {
        if (fx_4_fxSend_3_state == "PostEQ") {
          fx_4_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_3_state == "PreEQ") {
          fx_4_fxSend_3.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_3_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_4_fxSend_3.value = `${rampTo_newValue.value}`;
        }
        break;
      }
      case "fx_4_fxSend_4_volume_rampTo": {
        if (fx_4_fxSend_4_state == "PostEQ") {
          fx_4_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_4_state == "PreEQ") {
          fx_4_fxSend_4.value = `${rampTo_newValue.value}`;
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
        }
        else if (fx_4_fxSend_4_state == "PostFdr") {
          recieves_player_x_fxSend_x_value_Sets_Volume_value(rampTo_newValue.value, value);
          fx_4_fxSend_4.value = `${rampTo_newValue.value}`;
        }
        break;
      }

      case "fx_1_chorus_freq_rampTo": {

        fx_1_chorus_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_chorus_freq_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_chorus_freq.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_chorus_feedback_rampTo": {
        fx_1_chorus_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_chorus_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_chorus_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_feedback_rampTo": {

        fx_1_feedback_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_feedback_delayTime_rampTo": {

        fx_1_feedback_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_feedback_delayTime_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_feedback_delayTime.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_frequencyShifter_rampTo": {
        fx_1_FrequencyShifter_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_frequencyShifter_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_frequencyShifter.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_phaser_frequency_rampTo": {
        fx_1_phaser_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_phaser_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_phaser_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_phaser_octaves_rampTo": {
        fx_1_phaser_Node.octaves.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_phaser_octaves_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_phaser_octaves.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_phaser_Q_rampTo": {
        fx_1_phaser_Node.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_phaser_Q_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_phaser_Q.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_pingpong_feedback_rampTo": {
        fx_1_pingpong_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_pingpong_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_pingpong_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_pingpong_delayTime_rampTo": {
        fx_1_pingpong_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_pingpong_delayTime_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_pingpong_delayTime.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_pitchshift_feedback_rampTo": {
        fx_1_pitchshift_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_pingpong_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_pingpong_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_pitchshift_delayTime_rampTo": {
        fx_1_pitchshift_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_pitchshift_delayTime_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_pitchshift_delayTime.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_reverb_preDelay_rampTo": {
        fx_1_reverb_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_reverb_preDelay_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_reverb_preDelay.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_reverb_decay_rampTo": {
        fx_1_reverb_Node.decay.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_reverb_decay_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_reverb_decay.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_tremolo_frequency_rampTo": {
        fx_1_tremolo_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tremolo_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tremolo_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_tremolo_depth_rampTo": {
        fx_1_tremolo_Node.depth.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tremolo_depth_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tremolo_depth.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_tremolo_spread_rampTo": {
        fx_1_tremolo_Node.spread.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_tremolo_spread_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_tremolo_spread.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_vibrato_frequency_rampTo": {
        fx_1_vibrato_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_vibrato_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_vibrato_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_1_vibrato_depth_rampTo": {
        fx_1_vibrato_Node.depth.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_1_vibrato_depth_value.innerHTML = `${rampTo_newValue.value}`;
        fx_1_vibrato_depth.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_chorus_freq_rampTo": {

        fx_2_chorus_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_chorus_freq_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_chorus_freq.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_chorus_feedback_rampTo": {
        fx_2_chorus_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_chorus_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_chorus_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_feedback_rampTo": {

        fx_2_feedback_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_feedback_delayTime_rampTo": {

        fx_2_feedback_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_feedback_delayTime_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_feedback_delayTime.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_frequencyShifter_rampTo": {
        fx_2_FrequencyShifter_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_frequencyShifter_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_frequencyShifter.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_phaser_frequency_rampTo": {
        fx_2_phaser_Node.frequency.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_phaser_frequency_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_phaser_frequency.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_phaser_octaves_rampTo": {
        fx_2_phaser_Node.octaves.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_phaser_octaves_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_phaser_octaves.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_phaser_Q_rampTo": {
        fx_2_phaser_Node.Q.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_phaser_Q_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_phaser_Q.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_pingpong_feedback_rampTo": {
        fx_2_pingpong_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_pingpong_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_pingpong_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_pingpong_delayTime_rampTo": {
        fx_2_pingpong_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_pingpong_delayTime_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_pingpong_delayTime.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_pitchshift_feedback_rampTo": {
        fx_2_pitchshift_Node.feedback.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_pitchshift_feedback_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_pitchshift_feedback.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_pitchshift_delayTime_rampTo": {
        fx_2_pitchshift_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_pitchshift_delayTime_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_pitchshift_delayTime.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_reverb_preDelay_rampTo": {
        fx_2_reverb_Node.delayTime.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_reverb_preDelay_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_reverb_preDelay.value = `${rampTo_newValue.value}`;
        break;
      }
      case "fx_2_reverb_decay_rampTo": {
        fx_2_reverb_Node.decay.rampTo(`${rampTo_newValue.value}`, `${rampTo_time.value}`);
        fx_2_reverb_decay_value.innerHTML = `${rampTo_newValue.value}`;
        fx_2_reverb_decay.value = `${rampTo_newValue.value}`;
        break;
      }
    }//CLOSES switch
  }
  else {
    alert("ELSE rampTo_newValue.value!= && rampTo_time.value!=")
  }
  mixEvent.logIntoListaRampValue(Tone.now(), value, `${rampTo_newValue.value}`, `${rampTo_time.value}`);
}

async function load_Local(value) {
  try {
    const ctx = new window.AudioContext();
    const [fileHandle] = await window.showOpenFilePicker({
      multiple: false,
      types: [
        {
          description: 'Audio files',
          accept: {
            'audio/*': ['.wav', '.ogg', '.mp3', '.mp4', '.aac', '.flac', '.webm'],
          }
        },
      ],
      excludeAcceptAllOption: true,
      startIn: 'downloads'
    });

    const file = await fileHandle.getFile();
    const arrayBuffer = await file.arrayBuffer();
    const decodedBuffer = await ctx.decodeAudioData(arrayBuffer);
    //    var toneBuffer = new Tone.Buffer(decodedBuffer);
    switch (value) {
      case "Grain_1":
        {
          grainPlayer_1_Node.buffer.set(decodedBuffer);
          grainPlayer_1_load_text.innerHTML = fileHandle.name;
          channel_1_songName.innerHTML = fileHandle.name;
          channel_1_duration_text.innerHTML = Math.round(`${grainPlayer_1_Node.buffer.duration}`);
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1", fileHandle.name);
          break;
        }
      case "Grain_2":
        {
          grainPlayer_2_Node.buffer.set(decodedBuffer);
          grainPlayer_2_load_text.innerHTML = fileHandle.name;
          channel_2_songName.innerHTML = fileHandle.name;
          channel_2_duration_text.innerHTML = Math.round(`${grainPlayer_2_Node.buffer.duration}`);
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_2", fileHandle.name);
          break;
        }
      case "Grain_3":
        {
          grainPlayer_3_Node.buffer.set(decodedBuffer);
          grainPlayer_3_load_text.innerHTML = fileHandle.name;
          channel_3_songName.innerHTML = fileHandle.name;
          channel_3_duration_text.innerHTML = Math.round(`${grainPlayer_3_Node.buffer.duration}`);
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3", fileHandle.name);
          break;
        }
      case "Grain_4":
        {
          grainPlayer_4_Node.buffer.set(decodedBuffer);
          grainPlayer_4_load_text.innerHTML = fileHandle.name;
          channel_4_songName.innerHTML = fileHandle.name;
          channel_4_duration_text.innerHTML = Math.round(`${grainPlayer_4_Node.buffer.duration}`);
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4", fileHandle.name);
          break;
        }

      case "player_1":
        {
          if (player_1_scrambler == true && decodedBuffer.duration < 180) {
            let tamanio = decodedBuffer.length;
            let randomPosition = 0;
            const Float32 = new Float32Array(decodedBuffer.length);
            let k = 0;
            do {
              randomPosition = getRndInteger(0, tamanio);
              if (randomPosition + 96000 < decodedBuffer.length) {
                for (i = 0; i < 96000 - 1; i++) {
                  for (let channel = 0; channel < 2; channel++) {
                    Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                    tamanio--;
                  }
                  k++;
                }
              }
            }
            while (k < decodedBuffer.length);
            //  console.log("testSliceaudiobuff: "+testSliceaudiobuff)
            // console.log("Float32: " + Float32)
            const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
            // player_1_Node.buffer.set(decodedBuffer_twosecs);
            const testSliceaudiobuff = Tone.Buffer.fromArray(Float32);
            //  console.log("testSliceaudiobuff: " + testSliceaudiobuff)
            player_1_Node.buffer.set(testSliceaudiobuff);
            player_1_load_text.innerHTML = fileHandle.name;
            channel_1_songName.innerHTML = fileHandle.name;
            channel_1_duration_text.innerHTML = Math.round(`${player_1_Node.buffer.duration}`);
            player_1_duration_value.innerHTML = Math.round(`${player_1_Node.buffer.duration}`);
          }
          else {
            //const player_1_buffer = new Tone.Buffer();
            //  player_1_buffer.set(toneBuffer);
            //  player_1_Node.buffer.set(player_1_buffer);
            player_1_Node.buffer.set(decodedBuffer);
            player_1_load_text.innerHTML = fileHandle.name;
            channel_1_songName.innerHTML = fileHandle.name;
            channel_1_duration_text.innerHTML = Math.round(`${player_1_Node.buffer.duration}`);
            player_1_duration_value.innerHTML = Math.round(`${player_1_Node.buffer.duration}`);
            if (player_1_scrambler_checkbox.checked == true) {
              player_1_scrambler_checkbox.checked = false
            }
          }

          /*
          let tamanio = decodedBuffer.length;
          let randomPosition = 0;
          const Float32 = new Float32Array(decodedBuffer.length);
          let k = 0;
          do {
            randomPosition = getRndInteger(0, tamanio);
            if (randomPosition + 48000 < decodedBuffer.length) {
              for (i = 0; i < 48000 - 1; i++) {
                for (let channel = 0; channel < 2; channel++) {
                  Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                  k++; tamanio--;
                }
              }
            }
          }
          while (k < decodedBuffer.length);
          const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
          player_1_Node.buffer.set(decodedBuffer_twosecs);
          /**/
          mixEvent.logIntoListaAction(Tone.now(), "player_1", fileHandle.name);
          break;
        }
      case "player_2":
        {
          if (player_2_scrambler == true && decodedBuffer.duration < 180) {
            let tamanio = decodedBuffer.length;
            let randomPosition = 0;
            const Float32 = new Float32Array(decodedBuffer.length);
            let k = 0;
            do {
              randomPosition = getRndInteger(0, tamanio);
              if (randomPosition + 96000 < decodedBuffer.length) {
                for (i = 0; i < 96000 - 1; i++) {
                  for (let channel = 0; channel < 2; channel++) {
                    Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                    tamanio--;
                  }
                  k++;
                }
              }
            }
            while (k < decodedBuffer.length);
            //  console.log("testSliceaudiobuff: "+testSliceaudiobuff)
            // console.log("Float32: " + Float32)
            const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
            // player_2_Node.buffer.set(decodedBuffer_twosecs);
            const testSliceaudiobuff = Tone.Buffer.fromArray(Float32);
            //  console.log("testSliceaudiobuff: " + testSliceaudiobuff)
            player_2_Node.buffer.set(testSliceaudiobuff);
            player_2_load_text.innerHTML = fileHandle.name;
            channel_2_songName.innerHTML = fileHandle.name;
            channel_2_duration_text.innerHTML = Math.round(`${player_2_Node.buffer.duration}`);
            player_2_duration_value.innerHTML = Math.round(`${player_2_Node.buffer.duration}`);
          }
          else {
            //const player_2_buffer = new Tone.Buffer();
            //  player_2_buffer.set(toneBuffer);
            //  player_2_Node.buffer.set(player_2_buffer);
            player_2_Node.buffer.set(decodedBuffer);
            player_2_load_text.innerHTML = fileHandle.name;
            channel_2_songName.innerHTML = fileHandle.name;
            channel_2_duration_text.innerHTML = Math.round(`${player_2_Node.buffer.duration}`);
            player_2_duration_value.innerHTML = Math.round(`${player_2_Node.buffer.duration}`);
            if (player_2_scrambler_checkbox.checked == true) {
              player_2_scrambler_checkbox.checked = false
            }
          }

          /*
          let tamanio = decodedBuffer.length;
          let randomPosition = 0;
          const Float32 = new Float32Array(decodedBuffer.length);
          let k = 0;
          do {
            randomPosition = getRndInteger(0, tamanio);
            if (randomPosition + 48000 < decodedBuffer.length) {
              for (i = 0; i < 48000 - 1; i++) {
                for (let channel = 0; channel < 2; channel++) {
                  Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                  k++; tamanio--;
                }
              }
            }
          }
          while (k < decodedBuffer.length);
          const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
          player_2_Node.buffer.set(decodedBuffer_twosecs);
          /**/
          mixEvent.logIntoListaAction(Tone.now(), "player_2", fileHandle.name);
          break;
        }
      case "player_3":
        {
          if (player_3_scrambler == true && decodedBuffer.duration < 180) {
            let tamanio = decodedBuffer.length;
            let randomPosition = 0;
            const Float32 = new Float32Array(decodedBuffer.length);
            let k = 0;
            do {
              randomPosition = getRndInteger(0, tamanio);
              if (randomPosition + 96000 < decodedBuffer.length) {
                for (i = 0; i < 96000 - 1; i++) {
                  for (let channel = 0; channel < 2; channel++) {
                    Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                    tamanio--;
                  }
                  k++;
                }
              }
            }
            while (k < decodedBuffer.length);
            //  console.log("testSliceaudiobuff: "+testSliceaudiobuff)
            // console.log("Float32: " + Float32)
            const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
            // player_3_Node.buffer.set(decodedBuffer_twosecs);
            const testSliceaudiobuff = Tone.Buffer.fromArray(Float32);
            //  console.log("testSliceaudiobuff: " + testSliceaudiobuff)
            player_3_Node.buffer.set(testSliceaudiobuff);
            player_3_load_text.innerHTML = fileHandle.name;
            channel_3_songName.innerHTML = fileHandle.name;
            channel_3_duration_text.innerHTML = Math.round(`${player_3_Node.buffer.duration}`);
            player_3_duration_value.innerHTML = Math.round(`${player_3_Node.buffer.duration}`);
          }
          else {
            //const player_3_buffer = new Tone.Buffer();
            //  player_3_buffer.set(toneBuffer);
            //  player_3_Node.buffer.set(player_3_buffer);
            player_3_Node.buffer.set(decodedBuffer);
            player_3_load_text.innerHTML = fileHandle.name;
            channel_3_songName.innerHTML = fileHandle.name;
            channel_3_duration_text.innerHTML = Math.round(`${player_3_Node.buffer.duration}`);
            player_3_duration_value.innerHTML = Math.round(`${player_3_Node.buffer.duration}`);
            if (player_3_scrambler_checkbox.checked == true) {
              player_3_scrambler_checkbox.checked = false
            }
          }

          /*
          let tamanio = decodedBuffer.length;
          let randomPosition = 0;
          const Float32 = new Float32Array(decodedBuffer.length);
          let k = 0;
          do {
            randomPosition = getRndInteger(0, tamanio);
            if (randomPosition + 48000 < decodedBuffer.length) {
              for (i = 0; i < 48000 - 1; i++) {
                for (let channel = 0; channel < 2; channel++) {
                  Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                  k++; tamanio--;
                }
              }
            }
          }
          while (k < decodedBuffer.length);
          const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
          player_3_Node.buffer.set(decodedBuffer_twosecs);
          /**/
          mixEvent.logIntoListaAction(Tone.now(), "player_3", fileHandle.name);
          break;
        }
      case "player_4":
        {
          if (player_4_scrambler == true && decodedBuffer.duration < 180) {
            let tamanio = decodedBuffer.length;
            let randomPosition = 0;
            const Float32 = new Float32Array(decodedBuffer.length);
            let k = 0;
            do {
              randomPosition = getRndInteger(0, tamanio);
              if (randomPosition + 96000 < decodedBuffer.length) {
                for (i = 0; i < 96000 - 1; i++) {
                  for (let channel = 0; channel < 2; channel++) {
                    Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                    tamanio--;
                  }
                  k++;
                }
              }
            }
            while (k < decodedBuffer.length);
            //  console.log("testSliceaudiobuff: "+testSliceaudiobuff)
            // console.log("Float32: " + Float32)
            const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
            // player_4_Node.buffer.set(decodedBuffer_twosecs);
            const testSliceaudiobuff = Tone.Buffer.fromArray(Float32);
            //  console.log("testSliceaudiobuff: " + testSliceaudiobuff)
            player_4_Node.buffer.set(testSliceaudiobuff);
            player_4_load_text.innerHTML = fileHandle.name;
            channel_4_songName.innerHTML = fileHandle.name;
            channel_4_duration_text.innerHTML = Math.round(`${player_4_Node.buffer.duration}`);
            player_4_duration_value.innerHTML = Math.round(`${player_4_Node.buffer.duration}`);
          }
          else {
            //const player_4_buffer = new Tone.Buffer();
            //  player_4_buffer.set(toneBuffer);
            //  player_4_Node.buffer.set(player_4_buffer);
            player_4_Node.buffer.set(decodedBuffer);
            player_4_load_text.innerHTML = fileHandle.name;
            channel_4_songName.innerHTML = fileHandle.name;
            channel_4_duration_text.innerHTML = Math.round(`${player_4_Node.buffer.duration}`);
            player_4_duration_value.innerHTML = Math.round(`${player_4_Node.buffer.duration}`);
            if (player_4_scrambler_checkbox.checked == true) {
              player_4_scrambler_checkbox.checked = false
            }
          }

          /*
          let tamanio = decodedBuffer.length;
          let randomPosition = 0;
          const Float32 = new Float32Array(decodedBuffer.length);
          let k = 0;
          do {
            randomPosition = getRndInteger(0, tamanio);
            if (randomPosition + 48000 < decodedBuffer.length) {
              for (i = 0; i < 48000 - 1; i++) {
                for (let channel = 0; channel < 2; channel++) {
                  Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                  k++; tamanio--;
                }
              }
            }
          }
          while (k < decodedBuffer.length);
          const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
          player_4_Node.buffer.set(decodedBuffer_twosecs);
          /**/
          mixEvent.logIntoListaAction(Tone.now(), "player_4", fileHandle.name);
          break;
        }
      default:
        { break; }

    }//CLOSES SWT6CH
    //dispose ctx REVISAR
    //  ctx.destination.close(); DA ERROR
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('User dismissed the file picker.');
    } else {
      console.error('Error loading file:', error);
    }
  }
}

function play(value) {
  switch (value) {
    case "oscillator_1": {
      oscillator_1.start();
      mixEvent.logIntoListaAction(Tone.now(), "oscillator_1", "play");
      break;
    }
    case "Grain_1":
      {
        if (!grainPlayer_1_Node.loaded) {
          grainPlayer_1_duration_value.innerHTML = "!loaded";
        }
        else {
          var duration = grainPlayer_1_Node.buffer.duration;
          grainPlayer_1_duration_value.innerHTML = Math.round(`${duration}`);
          grainPlayer_1_Node.start();
          grainPlayer_1_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1", "play");
        }
        break;
      }
    case "oscillator_2": {
      oscillator_2.start();
      mixEvent.logIntoListaAction(Tone.now(), "oscillator_2", "play");
      break;
    }
    case "Grain_2":
      {
        if (!grainPlayer_2_Node.loaded) {
          grainPlayer_2_duration_value.innerHTML = "!loaded";
        }
        else {
          var duration = grainPlayer_2_Node.buffer.duration;
          grainPlayer_2_duration_value.innerHTML = Math.round(`${duration}`);
          grainPlayer_2_Node.start();
          grainPlayer_2_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "Grain_2", "play");
        }
        break;
      }
    case "Grain_3":
      {
        if (!grainPlayer_3_Node.loaded) {
          grainPlayer_3_duration_value.innerHTML = "!loaded";
        }
        else {
          var duration = grainPlayer_3_Node.buffer.duration;
          grainPlayer_3_duration_value.innerHTML = Math.round(`${duration}`);
          grainPlayer_3_Node.start();
          grainPlayer_3_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "Grain_3", "play");
        }
        break;
      }
    case "Grain_4":
      {
        if (!grainPlayer_4_Node.loaded) {
          grainPlayer_4_duration_value.innerHTML = "!loaded";
        }
        else {
          var duration = grainPlayer_4_Node.buffer.duration;
          grainPlayer_4_duration_value.innerHTML = Math.round(`${duration}`);
          grainPlayer_4_Node.start();
          grainPlayer_4_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "Grain_4", "play");
        }
        break;
      }
    case "player_1":
      {
        if (!player_1_Node.loaded) {
          player_1_duration_value.innerHTML = "!loaded";
        }
        else {
          var duration = player_1_Node.buffer.duration;
          channel_1_duration_text.innerHTML = Math.round(`${duration}`);
          player_1_Node.start();
          player_1_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_1", "play");
        }
        break;
      }
    case "player_2":
      {
        if (!player_2_Node.loaded) {
          player_2_duration_value.innerHTML = "loading P2 (PLAY FOO)";
        }
        else {
          var duration = player_2_Node.buffer.duration;
          player_2_duration_value.innerHTML = Math.round(`${duration}`);
          player_2_Node.start();
          player_2_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_2", "play");
        }
        break;
      }
    case "player_3":
      {
        if (!player_3_Node.loaded) {
          player_3_duration_value.innerHTML = "loading P3 (PLAY FOO)";
        }
        else {
          var duration = player_3_Node.buffer.duration;
          player_3_duration_value.innerHTML = Math.round(`${duration}`);
          player_3_Node.start();
          player_3_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_3", "play");
        }
        break;
      }
    case "player_4":
      {
        if (!player_4_Node.loaded) {
          player_4_duration_value.innerHTML = "loading P2 (PLAY FOO)";
        }
        else {
          var duration = player_4_Node.buffer.duration;
          player_4_duration_value.innerHTML = Math.round(`${duration}`);
          player_4_Node.start();
          player_4_playButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_4", "play");
        }
        break;
      }
    case "noise_1":
      {
        noise_1_Node.start();
        mixEvent.logIntoListaAction(Tone.now(), "noise_1", "play");
        break;
      }
    case "noise_2":
      {
        noise_2_Node.start();
        mixEvent.logIntoListaAction(Tone.now(), "noise_2", "play");
        break;
      }
    case "noise_3":
      {
        noise_3_Node.start();
        mixEvent.logIntoListaAction(Tone.now(), "noise_3", "play");
        break;
      }
    case "noise_4":
      {
        noise_4_Node.start();
        mixEvent.logIntoListaAction(Tone.now(), "noise_4", "play");
        break;
      }
    default:
      { break; }

  }//CLOSES SWT6CH
}

function stop(value) {
  switch (value) {
    case "oscillator_1": {
      oscillator_1.stop();
      mixEvent.logIntoListaAction(Tone.now(), "oscillator_1", "stop");
      break;
    }
    case "Grain_1":
      {
        grainPlayer_1_Node.stop();
        grainPlayer_1_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1", "stop");
        break;
      }
    case "oscillator_2": {
      oscillator_2.stop();
      mixEvent.logIntoListaAction(Tone.now(), "oscillator_2", "stop");
      break;
    }
    case "Grain_2":
      {
        grainPlayer_2_Node.stop();
        grainPlayer_2_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_2", "stop");
        break;
      }
    case "Grain_3":
      {
        grainPlayer_3_Node.stop();
        grainPlayer_3_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3", "stop");
        break;
      }
    case "Grain_4":
      {
        grainPlayer_4_Node.stop();
        grainPlayer_4_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4", "stop");
        break;
      }
    case "player_1":
      {
        player_1_Node.stop();
        player_1_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "player_1", "stop");
        break;
      }
    case "player_2":
      {
        player_2_Node.stop();
        player_2_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "player_2", "stop");
        break;
      }
    case "player_3":
      {
        player_3_Node.stop();
        player_3_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "player_3", "stop");
        break;
      }
    case "player_4":
      {
        player_4_Node.stop();
        player_4_playButton.style.backgroundColor = "white";
        mixEvent.logIntoListaAction(Tone.now(), "player_4", "stop");
        break;
      }
    case "noise_1":
      {
        noise_1_Node.stop();
        mixEvent.logIntoListaAction(Tone.now(), "noise_1", "stop");
        break;
      }
    case "noise_2":
      {
        noise_2_Node.stop();
        mixEvent.logIntoListaAction(Tone.now(), "noise_2", "stop");
        break;
      }
    case "noise_3":
      {
        noise_3_Node.stop();
        mixEvent.logIntoListaAction(Tone.now(), "noise_3", "stop");
        break;
      }
    case "noise_4":
      {
        noise_4_Node.stop();
        mixEvent.logIntoListaAction(Tone.now(), "noise_4", "stop");
        break;
      }
    default:
      { alert("DEFAULT function stop(value)"); break; }
  }
}

function mute(value) {
  switch (value) {
    case "oscillator_1": {
      oscillator_1.mute();
      break;
    }
    case "player_1":
      {
        player_1_Node.mute = !player_1_Node.mute;
        if (player_1_Node.mute == true) {
          player_1_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_1_mute", "on");
        }
        else {
          player_1_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "player_1_mute", "off");
        }
        break;
      }
    case "player_2":
      {
        player_2_Node.mute = !player_2_Node.mute;
        if (player_2_Node.mute == true) {
          player_2_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_1_mute", "on");
        }
        else {
          player_2_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "player_1_mute", "off");
        }
        break;
      }
    case "player_3":
      {
        player_3_Node.mute = !player_3_Node.mute;
        if (player_3_Node.mute == true) {
          player_3_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_3_mute", "on");
        }
        else {
          player_3_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "player_3_mute", "off");
        }
        break;
      }
    case "player_4":
      {
        player_4_Node.mute = !player_4_Node.mute;
        if (player_4_Node.mute == true) {
          player_4_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "player_4_mute", "on");
        }
        else {
          player_4_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "player_4_mute", "off");
        }
        break;
      }
    case "Grain_1":
      {
        grainPlayer_1_Node.mute = !grainPlayer_1_Node.mute;
        if (grainPlayer_1_Node.mute == true) {
          grainPlayer_1_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_mute", "on");
        }
        else {
          grainPlayer_1_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_1_mute", "off");
        }
        break;
      }
    case "Grain_2":
      {
        grainPlayer_2_Node.mute = !grainPlayer_2_Node.mute;
        if (grainPlayer_2_Node.mute == true) {
          grainPlayer_2_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_2_mute", "on");
        }
        else {
          grainPlayer_2_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_2_mute", "off");
        }
        break;
      }
    case "Grain_3":
      {
        grainPlayer_3_Node.mute = !grainPlayer_3_Node.mute;
        if (grainPlayer_3_Node.mute == true) {
          grainPlayer_3_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_mute", "on");
        }
        else {
          grainPlayer_3_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_3_mute", "off");
        }
        break;
      }
    case "Grain_4":
      {
        grainPlayer_4_Node.mute = !grainPlayer_4_Node.mute;
        if (grainPlayer_4_Node.mute == true) {
          grainPlayer_4_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_mute", "on");
        }
        else {
          grainPlayer_4_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "grainPlayer_4_mute", "off");
        }
        break;
      }
    case "noise_1":
      /*      {
              alert("noise_1_Node.mute: " + noise_1_Node.mute);
              if (noise_1_Node.mute == true) {
                noise_muteButton.style.backgroundColor = "green";
                noise_volume.value = -100;
              }
              else { noise_muteButton.style.backgroundColor = "white"; }
      
              noise_1_Node.mute = !noise_1_Node.mute;
              break;
            }
      /**/
      {
        noise_1_Node.mute = !noise_1_Node.mute;
        if (noise_1_Node.mute == true) {
          noise_1_muteButton.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "noise_1_mute", "on");
        }
        else {
          noise_1_muteButton.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "noise_1_mute", "off");
        }
        break;
      }
    /**/
    default:
      { alert("DEFAULT function mute(value)"); break; } 9
  }
}

function busca1() {
  let songNumber = "", playerNumber = "";
  let i = 0, j = 0;
  let cadena = validateForm();
  var doesItInclude = cadena.includes("-", 0);
  if (doesItInclude) {
    var indexCadena = cadena.indexOf("-", 0);
    for (i = 0; i < indexCadena; i++) {
      songNumber = songNumber + cadena[i];
    }
    for (j = indexCadena + 1; j < cadena.length; j++) {
      playerNumber = playerNumber + cadena[j];
    }
  }
  else { console.log("La cadena no incluye un -"); }

  switch (playerNumber) {
    case "1":
      {
        if (player_1_Node.state != "started") {
          player_1_Node.load(`${array_Canciones[songNumber - 1].url_src}`, callbackLoaded(songNumber, playerNumber));
        }
        else {
          alert("ELSE: deten la reproduccion");
        }
        break;
      }
    case "2":
      {
        if (player_2.state != "started") {
          player_2.load(`${array_Canciones[songNumber - 1].url_src}`, callbackLoaded(songNumber, playerNumber));
        }
        else { alert("ELSE: deten la reproduccion"); }
        break;
      }
    case "3":
      {
        if (player_3.state != "started") {
          player_3.load(`${array_Canciones[songNumber - 1].url_src}`, callbackLoaded(songNumber, playerNumber));
        }
        else { alert("ELSE: deten la reproduccion"); }
        break;
      }
    case "4":
      {
        if (player_4.state != "started") {
          player_4.load(`${array_Canciones[songNumber - 1].url_src}`, callbackLoaded(songNumber, playerNumber));
        }
        else { alert("ELSE: deten la reproduccion"); }
        break;
      }
    default:
      { alert("DEFAULT busca1 "); }
  }
}// CLOSES busca1

function validateForm() {
  var formulario = new Object();
  formulario.song = document.getElementById("song");
  formulario.player = document.getElementById("player");
  let player_trim = player.value.trim();
  let song_trim = song.value.trim();
  let mensaje = "Error inicial";
  if (song_trim != "") {
    if (song_trim.length >= 1 && song_trim.value != "undefined") {
      if (player_trim.value != "" && player_trim.value != "undefined") {
        mensaje = "todoOk";
      }
      else { mensaje = "if (player_trim.value !=vacio && player_trim.value != undefined)  ERROR" }
    }
    else { mensaje = "song_trim.length >= 1 && song_trim.value != undefined" }
  }
  else { mensaje = "SONG TRIM no es !=" }
  if (mensaje == "todoOk") {
    var cadena = (song_trim + "-" + player_trim).toString();
  }
  else { alert("else mensaje == todoOk: " + mensaje); }
  return cadena;
}

function recieves_Number_Returns_url(song) {
  return `${array_Canciones[song].url_src}`;
}//CLOSES recieves_Number_Returns_url

//************************************************************************* */
//********************************************************************* */
//*********    EQ CHANNEL X     ************************************************************ */
//********************************************************************* */
//********************************************************************* */
function channel_x_filter_eq_selection_foo(name, value) {
  /*
    alert("channel_x_filter_eq_selection_foo: " + value
      + "\n" + "name:  " + name);
    /* */
  switch (name) {
    case "channel_1": {
      if (channel_1_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_eq_selection", value);
            if (channel_1_filter_eq_selection == "bypass") {
              channel_1_panNode.disconnect(channel_1_filter_Bypass);
              channel_1_panNode.connect(channel_1_filter);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "eq3") {
              channel_1_panNode.disconnect(channel_1_filter_eq3);
              channel_1_panNode.connect(channel_1_filter);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "tascam") {
              channel_1_panNode.disconnect(channel_1_tascam_in_Node);
              channel_1_panNode.connect(channel_1_filter);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter.connect(channel_1_dynamics_compressorNode_Bypass);

              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter.connect(channel_1_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("channel_1_filter_eq_selection", "on");
            hide_all_EQ_divs("1");
            switch (channel_1_filter_eq_type) {
              case "empty": {
                channel_1_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                channel_1_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                channel_1_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                channel_1_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_eq_selection", value);
            if (channel_1_filter_eq_selection == "on") {
              channel_1_panNode.disconnect(channel_1_filter);
              channel_1_panNode.connect(channel_1_filter_Bypass);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "eq3") {
              channel_1_panNode.disconnect(channel_1_filter_eq3);
              channel_1_panNode.connect(channel_1_filter_Bypass);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "tascam") {
              channel_1_panNode.disconnect(channel_1_tascam_in_Node);
              channel_1_panNode.connect(channel_1_filter_Bypass);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("1");
            channel_1_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_1_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_eq_selection", value);
            if (channel_1_filter_eq_selection == "on") {
              channel_1_panNode.disconnect(channel_1_filter);
              channel_1_panNode.connect(channel_1_filter_eq3);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "bypass") {
              channel_1_panNode.disconnect(channel_1_filter_Bypass);
              channel_1_panNode.connect(channel_1_filter_eq3);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "tascam") {
              channel_1_panNode.disconnect(channel_1_tascam_in_Node);
              channel_1_panNode.connect(channel_1_filter_eq3);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("1");
            channel_1_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_1_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_1_filter_eq_selection", value);
            if (channel_1_filter_eq_selection == "on") {
              channel_1_panNode.disconnect(channel_1_filter);
              channel_1_panNode.connect(channel_1_tascam_in_Node);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "bypass") {
              channel_1_panNode.disconnect(channel_1_filter_Bypass);
              channel_1_panNode.connect(channel_1_tascam_in_Node);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode);
              }
            }
            else if (channel_1_filter_eq_selection == "eq3") {
              channel_1_panNode.disconnect(channel_1_filter_eq3);
              channel_1_panNode.connect(channel_1_tascam_in_Node);
              if (channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode_Bypass);
              }
              if (channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("1");
            channel_1_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_1_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("DEFAULT channel_x_filter_eq_selection_foo value: " + value); break; }
        }
      }
      else { alert("channel_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "channel_2": {
      if (channel_2_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_eq_selection", value);
            if (channel_2_filter_eq_selection == "bypass") {
              channel_2_panNode.disconnect(channel_2_filter_Bypass);
              channel_2_panNode.connect(channel_2_filter);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "eq3") {
              channel_2_panNode.disconnect(channel_2_filter_eq3);
              channel_2_panNode.connect(channel_2_filter);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "tascam") {
              channel_2_panNode.disconnect(channel_2_tascam_in_Node);
              channel_2_panNode.connect(channel_2_filter);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter.connect(channel_2_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("channel_2_filter_eq_selection", "on");
            hide_all_EQ_divs("2");
            switch (channel_2_filter_eq_type) {
              case "empty": {
                channel_2_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                channel_2_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                channel_2_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                channel_2_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_eq_selection", value);
            if (channel_2_filter_eq_selection == "on") {
              channel_2_panNode.disconnect(channel_2_filter);
              channel_2_panNode.connect(channel_2_filter_Bypass);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "eq3") {
              channel_2_panNode.disconnect(channel_2_filter_eq3);
              channel_2_panNode.connect(channel_2_filter_Bypass);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "tascam") {
              channel_2_panNode.disconnect(channel_2_tascam_in_Node);
              channel_2_panNode.connect(channel_2_filter_Bypass);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("2");
            channel_2_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_2_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_eq_selection", value);
            if (channel_2_filter_eq_selection == "on") {
              channel_2_panNode.disconnect(channel_2_filter);
              channel_2_panNode.connect(channel_2_filter_eq3);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "bypass") {
              channel_2_panNode.disconnect(channel_2_filter_Bypass);
              channel_2_panNode.connect(channel_2_filter_eq3);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "tascam") {
              channel_2_panNode.disconnect(channel_2_tascam_in_Node);
              channel_2_panNode.connect(channel_2_filter_eq3);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("2");
            channel_2_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_2_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_2_filter_eq_selection", value);
            if (channel_2_filter_eq_selection == "on") {
              channel_2_panNode.disconnect(channel_2_filter);
              channel_2_panNode.connect(channel_2_tascam_in_Node);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "bypass") {
              channel_2_panNode.disconnect(channel_2_filter_Bypass);
              channel_2_panNode.connect(channel_2_tascam_in_Node);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode);
              }
            }
            else if (channel_2_filter_eq_selection == "eq3") {
              channel_2_panNode.disconnect(channel_2_filter_eq3);
              channel_2_panNode.connect(channel_2_tascam_in_Node);
              if (channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode_Bypass);
              }
              if (channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("2");
            channel_2_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_2_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("channel_x_filter_eq_selection != value ELSE"); break; }
        }
      }
      else { alert("channel_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "channel_3": {
      if (channel_3_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_eq_selection", value);
            if (channel_3_filter_eq_selection == "bypass") {
              channel_3_panNode.disconnect(channel_3_filter_Bypass);
              channel_3_panNode.connect(channel_3_filter);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "eq3") {
              channel_3_panNode.disconnect(channel_3_filter_eq3);
              channel_3_panNode.connect(channel_3_filter);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "tascam") {
              channel_3_panNode.disconnect(channel_3_tascam_in_Node);
              channel_3_panNode.connect(channel_3_filter);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter.connect(channel_3_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("channel_3_filter_eq_selection", "on");
            hide_all_EQ_divs("3");
            switch (channel_3_filter_eq_type) {
              case "empty": {
                channel_3_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                channel_3_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                channel_3_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                channel_3_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_eq_selection", value);
            if (channel_3_filter_eq_selection == "on") {
              channel_3_panNode.disconnect(channel_3_filter);
              channel_3_panNode.connect(channel_3_filter_Bypass);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "eq3") {
              channel_3_panNode.disconnect(channel_3_filter_eq3);
              channel_3_panNode.connect(channel_3_filter_Bypass);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "tascam") {
              channel_3_panNode.disconnect(channel_3_tascam_in_Node);
              channel_3_panNode.connect(channel_3_filter_Bypass);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("3");
            channel_3_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_3_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_eq_selection", value);
            if (channel_3_filter_eq_selection == "on") {
              channel_3_panNode.disconnect(channel_3_filter);
              channel_3_panNode.connect(channel_3_filter_eq3);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "bypass") {
              channel_3_panNode.disconnect(channel_3_filter_Bypass);
              channel_3_panNode.connect(channel_3_filter_eq3);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "tascam") {
              channel_3_panNode.disconnect(channel_3_tascam_in_Node);
              channel_3_panNode.connect(channel_3_filter_eq3);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("3");
            channel_3_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_3_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_3_filter_eq_selection", value);
            if (channel_3_filter_eq_selection == "on") {
              channel_3_panNode.disconnect(channel_3_filter);
              channel_3_panNode.connect(channel_3_tascam_in_Node);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "bypass") {
              channel_3_panNode.disconnect(channel_3_filter_Bypass);
              channel_3_panNode.connect(channel_3_tascam_in_Node);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode);
              }
            }
            else if (channel_3_filter_eq_selection == "eq3") {
              channel_3_panNode.disconnect(channel_3_filter_eq3);
              channel_3_panNode.connect(channel_3_tascam_in_Node);
              if (channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode_Bypass);
              }
              if (channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("3");
            channel_3_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_3_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("DEFAULT channel_x_filter_eq_selection_foo value: " + value); break; }
        }
      } else { alert("channel_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "channel_4": {
      if (channel_4_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_eq_selection", value);
            if (channel_4_filter_eq_selection == "bypass") {
              channel_4_panNode.disconnect(channel_4_filter_Bypass);
              channel_4_panNode.connect(channel_4_filter);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "eq3") {
              channel_4_panNode.disconnect(channel_4_filter_eq3);
              channel_4_panNode.connect(channel_4_filter);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "tascam") {
              channel_4_panNode.disconnect(channel_4_tascam_in_Node);
              channel_4_panNode.connect(channel_4_filter);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter.connect(channel_4_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("channel_4_filter_eq_selection", "on");
            hide_all_EQ_divs("4");
            switch (channel_4_filter_eq_type) {
              case "empty": {
                channel_4_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                channel_4_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                channel_4_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                channel_4_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_eq_selection", value);
            if (channel_4_filter_eq_selection == "on") {
              channel_4_panNode.disconnect(channel_4_filter);
              channel_4_panNode.connect(channel_4_filter_Bypass);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "eq3") {
              channel_4_panNode.disconnect(channel_4_filter_eq3);
              channel_4_panNode.connect(channel_4_filter_Bypass);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "tascam") {
              channel_4_panNode.disconnect(channel_4_tascam_in_Node);
              channel_4_panNode.connect(channel_4_filter_Bypass);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("4");
            channel_4_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_4_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_eq_selection", value);
            if (channel_4_filter_eq_selection == "on") {
              channel_4_panNode.disconnect(channel_4_filter);
              channel_4_panNode.connect(channel_4_filter_eq3);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "bypass") {
              channel_4_panNode.disconnect(channel_4_filter_Bypass);
              channel_4_panNode.connect(channel_4_filter_eq3);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "tascam") {
              channel_4_panNode.disconnect(channel_4_tascam_in_Node);
              channel_4_panNode.connect(channel_4_filter_eq3);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("4");
            channel_4_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_4_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "channel_4_filter_eq_selection", value);
            if (channel_4_filter_eq_selection == "on") {
              channel_4_panNode.disconnect(channel_4_filter);
              channel_4_panNode.connect(channel_4_tascam_in_Node);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "bypass") {
              channel_4_panNode.disconnect(channel_4_filter_Bypass);
              channel_4_panNode.connect(channel_4_tascam_in_Node);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode);
              }
            }
            else if (channel_4_filter_eq_selection == "eq3") {
              channel_4_panNode.disconnect(channel_4_filter_eq3);
              channel_4_panNode.connect(channel_4_tascam_in_Node);
              if (channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode_Bypass);
              }
              if (channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("4");
            channel_4_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("channel_4_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("DEFAULT channel_x_filter_eq_selection_foo value: " + value); break; }
        }
      } else { alert("channel_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "fx_1": {
      if (fx_1_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_eq_selection", value);
            if (fx_1_filter_eq_selection == "bypass") {
              fx_1_panNode.disconnect(fx_1_filter_Bypass);
              fx_1_panNode.connect(fx_1_filter);
              alert(".disconnect(fx_1_filter_Bypass); .connect(fx 1 filter);");
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter.connect(fx_1_dynamics_compressorNode_Bypass);
                alert("AAA2")
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter.connect(fx_1_dynamics_compressorNode);
                alert("AAA3")
              }
            }
            else if (fx_1_filter_eq_selection == "eq3") {
              fx_1_panNode.disconnect(fx_1_filter_eq3);
              fx_1_panNode.connect(fx_1_filter);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter.connect(fx_1_dynamics_compressorNode);
              }
            }
            else if (fx_1_filter_eq_selection == "tascam") {
              fx_1_panNode.disconnect(fx_1_tascam_in_Node);
              fx_1_panNode.connect(fx_1_filter);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter.connect(fx_1_dynamics_compressorNode_Bypass);

              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter.connect(fx_1_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("fx_1_filter_eq_selection", "on");
            hide_all_EQ_divs("fx_1");
            switch (fx_1_filter_eq_type) {
              case "empty": {
                fx_1_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                fx_1_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                fx_1_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                fx_1_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_eq_selection", value);
            if (fx_1_filter_eq_selection == "on") {
              fx_1_panNode.disconnect(fx_1_filter);
              fx_1_panNode.connect(fx_1_filter_Bypass);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode);
              }
            }
            else if (fx_1_filter_eq_selection == "eq3") {
              fx_1_panNode.disconnect(fx_1_filter_eq3);
              fx_1_panNode.connect(fx_1_filter_Bypass);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode);
              }
            }
            else if (fx_1_filter_eq_selection == "tascam") {
              fx_1_panNode.disconnect(fx_1_tascam_in_Node);
              fx_1_panNode.connect(fx_1_filter_Bypass);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_1");
            fx_1_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_1_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_eq_selection", value);
            if (fx_1_filter_eq_selection == "on") {
              alert("BBB");
              fx_1_panNode.disconnect(fx_1_filter);
              fx_1_panNode.connect(fx_1_filter_eq3);
              alert("BBB1");
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode_Bypass);
                alert("BBB2");
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode);
                alert("BBB3");
              }
            }
            else if (fx_1_filter_eq_selection == "bypass") {
              alert("BBBypass 1");
              fx_1_panNode.connect(fx_1_filter_eq3);
              fx_1_panNode.disconnect(fx_1_filter_Bypass);
              //fx_1_filter_eq3.connect(Tone.Destination);

              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode_Bypass);
                alert("BBBypass 2");
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode);
                alert("BBBypass 3");
              }
            }
            else if (fx_1_filter_eq_selection == "tascam") {
              fx_1_panNode.disconnect(fx_1_tascam_in_Node);
              fx_1_panNode.connect(fx_1_filter_eq3);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_1");
            fx_1_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_1_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_1_filter_eq_selection", value);
            if (fx_1_filter_eq_selection == "on") {
              fx_1_panNode.disconnect(fx_1_filter);
              fx_1_panNode.connect(fx_1_tascam_in_Node);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode);
              }
            }
            else if (fx_1_filter_eq_selection == "bypass") {
              fx_1_panNode.disconnect(fx_1_filter_Bypass);
              fx_1_panNode.connect(fx_1_tascam_in_Node);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode);
              }
            }
            else if (fx_1_filter_eq_selection == "eq3") {
              fx_1_panNode.disconnect(fx_1_filter_eq3);
              fx_1_panNode.connect(fx_1_tascam_in_Node);
              if (fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode_Bypass);
              }
              if (fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_1");
            fx_1_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_1_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("DEFAULT fx_x_filter_eq_selection_foo value: " + value); break; }
        }
      }
      else { console.log("fx_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "fx_2": {
      if (fx_2_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_eq_selection", value);
            if (fx_2_filter_eq_selection == "bypass") {
              fx_2_panNode.disconnect(fx_2_filter_Bypass);
              fx_2_panNode.connect(fx_2_filter);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "eq3") {
              fx_2_panNode.disconnect(fx_2_filter_eq3);
              fx_2_panNode.connect(fx_2_filter);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "tascam") {
              fx_2_panNode.disconnect(fx_2_tascam_in_Node);
              fx_2_panNode.connect(fx_2_filter);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter.connect(fx_2_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("fx_2_filter_eq_selection", "on");
            hide_all_EQ_divs("fx_2");
            switch (fx_2_filter_eq_type) {
              case "empty": {
                fx_2_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                fx_2_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                fx_2_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                fx_2_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_eq_selection", value);
            if (fx_2_filter_eq_selection == "on") {
              fx_2_panNode.disconnect(fx_2_filter);
              fx_2_panNode.connect(fx_2_filter_Bypass);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "eq3") {
              fx_2_panNode.disconnect(fx_2_filter_eq3);
              fx_2_panNode.connect(fx_2_filter_Bypass);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "tascam") {
              fx_2_panNode.disconnect(fx_2_tascam_in_Node);
              fx_2_panNode.connect(fx_2_filter_Bypass);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_2");
            fx_2_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_2_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_eq_selection", value);
            if (fx_2_filter_eq_selection == "on") {
              fx_2_panNode.disconnect(fx_2_filter);
              fx_2_panNode.connect(fx_2_filter_eq3);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "bypass") {
              fx_2_panNode.disconnect(fx_2_filter_Bypass);
              fx_2_panNode.connect(fx_2_filter_eq3);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "tascam") {
              fx_2_panNode.disconnect(fx_2_tascam_in_Node);
              fx_2_panNode.connect(fx_2_filter_eq3);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_2");
            fx_2_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_2_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_2_filter_eq_selection", value);
            if (fx_2_filter_eq_selection == "on") {
              fx_2_panNode.disconnect(fx_2_filter);
              fx_2_panNode.connect(fx_2_tascam_in_Node);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "bypass") {
              fx_2_panNode.disconnect(fx_2_filter_Bypass);
              fx_2_panNode.connect(fx_2_tascam_in_Node);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode);
              }
            }
            else if (fx_2_filter_eq_selection == "eq3") {
              fx_2_panNode.disconnect(fx_2_filter_eq3);
              fx_2_panNode.connect(fx_2_tascam_in_Node);
              if (fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode_Bypass);
              }
              if (fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_2");
            fx_2_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_2_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("fx_x_filter_eq_selection != value ELSE"); break; }
        }
      }
      else { alert("fx_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "fx_3": {
      if (fx_3_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_eq_selection", value);
            if (fx_3_filter_eq_selection == "bypass") {
              fx_3_panNode.disconnect(fx_3_filter_Bypass);
              fx_3_panNode.connect(fx_3_filter);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "eq3") {
              fx_3_panNode.disconnect(fx_3_filter_eq3);
              fx_3_panNode.connect(fx_3_filter);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "tascam") {
              fx_3_panNode.disconnect(fx_3_tascam_in_Node);
              fx_3_panNode.connect(fx_3_filter);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter.connect(fx_3_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("fx_3_filter_eq_selection", "on");
            hide_all_EQ_divs("fx_3");
            switch (fx_3_filter_eq_type) {
              case "empty": {
                fx_3_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                fx_3_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                fx_3_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                fx_3_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_eq_selection", value);
            if (fx_3_filter_eq_selection == "on") {
              fx_3_panNode.disconnect(fx_3_filter);
              fx_3_panNode.connect(fx_3_filter_Bypass);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "eq3") {
              fx_3_panNode.disconnect(fx_3_filter_eq3);
              fx_3_panNode.connect(fx_3_filter_Bypass);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "tascam") {
              fx_3_panNode.disconnect(fx_3_tascam_in_Node);
              fx_3_panNode.connect(fx_3_filter_Bypass);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_3");
            fx_3_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_3_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_eq_selection", value);
            if (fx_3_filter_eq_selection == "on") {
              fx_3_panNode.disconnect(fx_3_filter);
              fx_3_panNode.connect(fx_3_filter_eq3);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "bypass") {
              fx_3_panNode.disconnect(fx_3_filter_Bypass);
              fx_3_panNode.connect(fx_3_filter_eq3);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "tascam") {
              fx_3_panNode.disconnect(fx_3_tascam_in_Node);
              fx_3_panNode.connect(fx_3_filter_eq3);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_3");
            fx_3_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_3_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_3_filter_eq_selection", value);
            if (fx_3_filter_eq_selection == "on") {
              fx_3_panNode.disconnect(fx_3_filter);
              fx_3_panNode.connect(fx_3_tascam_in_Node);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "bypass") {
              fx_3_panNode.disconnect(fx_3_filter_Bypass);
              fx_3_panNode.connect(fx_3_tascam_in_Node);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode);
              }
            }
            else if (fx_3_filter_eq_selection == "eq3") {
              fx_3_panNode.disconnect(fx_3_filter_eq3);
              fx_3_panNode.connect(fx_3_tascam_in_Node);
              if (fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode_Bypass);
              }
              if (fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_3");
            fx_3_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_3_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("DEFAULT fx_x_filter_eq_selection_foo value: " + value); break; }
        }
      } else { alert("fx_x_filter_eq_selection != value ELSE"); }
      break;
    }
    case "fx_4": {
      if (fx_4_filter_eq_selection != value) {
        switch (value) {
          case "on": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_eq_selection", value);
            if (fx_4_filter_eq_selection == "bypass") {
              fx_4_panNode.disconnect(fx_4_filter_Bypass);
              fx_4_panNode.connect(fx_4_filter);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "eq3") {
              fx_4_panNode.disconnect(fx_4_filter_eq3);
              fx_4_panNode.connect(fx_4_filter);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "tascam") {
              fx_4_panNode.disconnect(fx_4_tascam_in_Node);
              fx_4_panNode.connect(fx_4_filter);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter.connect(fx_4_dynamics_compressorNode);
              }
            }
            switchState_filter_eq_selection("fx_4_filter_eq_selection", "on");
            hide_all_EQ_divs("fx_4");
            switch (fx_4_filter_eq_type) {
              case "empty": {
                fx_4_empty_controls_div.style.display = "block";
                break;
              }
              case "allpass": {
                fx_4_allpass_controls_div.style.display = "block";
                break;
              }
              case "shelf": {
                fx_4_shelf_controls_div.style.display = "block";
                break;
              }
              case "peaking": {
                fx_4_peaking_controls_div.style.display = "block";
                break;
              }
              default: { break; }
            }
            break;
          }
          case "bypass": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_eq_selection", value);
            if (fx_4_filter_eq_selection == "on") {
              fx_4_panNode.disconnect(fx_4_filter);
              fx_4_panNode.connect(fx_4_filter_Bypass);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "eq3") {
              fx_4_panNode.disconnect(fx_4_filter_eq3);
              fx_4_panNode.connect(fx_4_filter_Bypass);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "tascam") {
              fx_4_panNode.disconnect(fx_4_tascam_in_Node);
              fx_4_panNode.connect(fx_4_filter_Bypass);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_4");
            fx_4_bypass_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_4_filter_eq_selection", "bypass");
            break;
          }
          case "eq3": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_eq_selection", value);
            if (fx_4_filter_eq_selection == "on") {
              fx_4_panNode.disconnect(fx_4_filter);
              fx_4_panNode.connect(fx_4_filter_eq3);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "bypass") {
              fx_4_panNode.disconnect(fx_4_filter_Bypass);
              fx_4_panNode.connect(fx_4_filter_eq3);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "tascam") {
              fx_4_panNode.disconnect(fx_4_tascam_in_Node);
              fx_4_panNode.connect(fx_4_filter_eq3);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_4");
            fx_4_eq3_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_4_filter_eq_selection", "eq3");
            break;
          }
          case "tascam": {
            mixEvent.logIntoListaAction(Tone.now(), "fx_4_filter_eq_selection", value);
            if (fx_4_filter_eq_selection == "on") {
              fx_4_panNode.disconnect(fx_4_filter);
              fx_4_panNode.connect(fx_4_tascam_in_Node);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "bypass") {
              fx_4_panNode.disconnect(fx_4_filter_Bypass);
              fx_4_panNode.connect(fx_4_tascam_in_Node);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode);
              }
            }
            else if (fx_4_filter_eq_selection == "eq3") {
              fx_4_panNode.disconnect(fx_4_filter_eq3);
              fx_4_panNode.connect(fx_4_tascam_in_Node);
              if (fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode_Bypass);
              }
              if (fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode);
              }
            }
            hide_all_EQ_divs("fx_4");
            fx_4_tascam_424_controls_div.style.display = "block";
            switchState_filter_eq_selection("fx_4_filter_eq_selection", "tascam");
            break;
          }
          default: { alert("DEFAULT fx_x_filter_eq_selection_foo value: " + value); break; }
        }
      } else { alert("fx_x_filter_eq_selection != value ELSE"); }
      break;
    }
    default: { alert("DEFAULT channel_x_filter_eq_selection_foo") }
  }
}

//************************************************************************* */
//********************************************************************* */
//CHANNEL 1 FX SEND  ON OFF BUTTONS
//********************************************************************* */
//************************************************************

function player_x_fxSend_x_state_foo(name, value) {
  switch (name) {
    case "channel_1_fxSend_1":
      {
        if (is_channel_1_fxSend_1_On == true) {
          if (channel_1_fxSend_1_state != value) {
            switch (channel_1_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_1_fxSend_1_postEq_volNode.volume.value = channel_1_fxSend_1_preEq_volNode.volume.value;
                  channel_1_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_1_postFdr_volNode.volume.value = channel_1_fxSend_1_preEq_volNode.volume.value;
                  channel_1_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_1_fxSend_1_preEq_volNode.volume.value = channel_1_fxSend_1_postEq_volNode.volume.value;
                  channel_1_fxSend_1_postEq_volNode.volume.value = -100;
                  channel_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_1_postFdr_volNode.volume.value = channel_1_fxSend_1_postEq_volNode.volume.value;
                  channel_1_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_1_fxSend_1_postEq_volNode.volume.value = channel_1_fxSend_1_postFdr_volNode.volume.value;
                  channel_1_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_1_fxSend_1_preEq_volNode.volume.value = channel_1_fxSend_1_postFdr_volNode.volume.value;
                  channel_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  channel_1_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_1_state", value);
          break;
        }
        else { alert("is_channel_1_fxSend_1_On == FALSE"); }
      }
    case "channel_1_fxSend_2":
      {
        if (is_channel_1_fxSend_2_On == true) {
          if (channel_1_fxSend_2_state != value) {
            switch (channel_1_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_1_fxSend_2_postEq_volNode.volume.value = channel_1_fxSend_2_preEq_volNode.volume.value;
                  channel_1_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_2_postFdr_volNode.volume.value = channel_1_fxSend_2_preEq_volNode.volume.value;
                  channel_1_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_1_fxSend_2_preEq_volNode.volume.value = channel_1_fxSend_2_postEq_volNode.volume.value;
                  channel_1_fxSend_2_postEq_volNode.volume.value = -100;
                  channel_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_2_postFdr_volNode.volume.value = channel_1_fxSend_2_postEq_volNode.volume.value;
                  channel_1_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_1_fxSend_2_postEq_volNode.volume.value = channel_1_fxSend_2_postFdr_volNode.volume.value;
                  channel_1_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_1_fxSend_2_preEq_volNode.volume.value = channel_1_fxSend_2_postFdr_volNode.volume.value;
                  channel_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  channel_1_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_1_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_2_state", value);
          break;
        }
        else { alert("is_channel_1_fxSend_2_On == FALSE"); }
      }
    case "channel_1_fxSend_3":
      {
        if (is_channel_1_fxSend_3_On == true) {
          if (channel_1_fxSend_3_state != value) {
            switch (channel_1_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_1_fxSend_3_postEq_volNode.volume.value = channel_1_fxSend_3_preEq_volNode.volume.value;
                  channel_1_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_3_postFdr_volNode.volume.value = channel_1_fxSend_3_preEq_volNode.volume.value;
                  channel_1_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_1_fxSend_3_preEq_volNode.volume.value = channel_1_fxSend_3_postEq_volNode.volume.value;
                  channel_1_fxSend_3_postEq_volNode.volume.value = -100;
                  channel_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_3_postFdr_volNode.volume.value = channel_1_fxSend_3_postEq_volNode.volume.value;
                  channel_1_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_1_fxSend_3_postEq_volNode.volume.value = channel_1_fxSend_3_postFdr_volNode.volume.value;
                  channel_1_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_1_fxSend_3_preEq_volNode.volume.value = channel_1_fxSend_3_postFdr_volNode.volume.value;
                  channel_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  channel_1_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_1_fxSend_3_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_3_state", value);
          break;
        }
        else { alert("is_channel_1_fxSend_3_On == FALSE"); }
      }
    case "channel_1_fxSend_4":
      {
        if (is_channel_1_fxSend_4_On == true) {
          if (channel_1_fxSend_4_state != value) {
            switch (channel_1_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_1_fxSend_4_postEq_volNode.volume.value = channel_1_fxSend_4_preEq_volNode.volume.value;
                  channel_1_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_4_postFdr_volNode.volume.value = channel_1_fxSend_4_preEq_volNode.volume.value;
                  channel_1_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_1_fxSend_4_preEq_volNode.volume.value = channel_1_fxSend_4_postEq_volNode.volume.value;
                  channel_1_fxSend_4_postEq_volNode.volume.value = -100;
                  channel_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_1_fxSend_4_postFdr_volNode.volume.value = channel_1_fxSend_4_postEq_volNode.volume.value;
                  channel_1_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_1_fxSend_4_postEq_volNode.volume.value = channel_1_fxSend_4_postFdr_volNode.volume.value;
                  channel_1_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_1_fxSend_4_preEq_volNode.volume.value = channel_1_fxSend_4_postFdr_volNode.volume.value;
                  channel_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  channel_1_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_1_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_1_fxSend_4_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_fxSend_4_state", value);
          break;
        }
        else { alert("is_channel_1_fxSend_4_On == FALSE"); }
      }
    case "channel_2_fxSend_1":
      {
        if (is_channel_2_fxSend_1_On == true) {
          if (channel_2_fxSend_1_state != value) {
            switch (channel_2_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_2_fxSend_1_postEq_volNode.volume.value = channel_2_fxSend_1_preEq_volNode.volume.value;
                  channel_2_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_1_postFdr_volNode.volume.value = channel_2_fxSend_1_preEq_volNode.volume.value;
                  channel_2_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_2_fxSend_1_preEq_volNode.volume.value = channel_2_fxSend_1_postEq_volNode.volume.value;
                  channel_2_fxSend_1_postEq_volNode.volume.value = -100;
                  channel_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_1_postFdr_volNode.volume.value = channel_2_fxSend_1_postEq_volNode.volume.value;
                  channel_2_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_2_fxSend_1_postEq_volNode.volume.value = channel_2_fxSend_1_postFdr_volNode.volume.value;
                  channel_2_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_2_fxSend_1_preEq_volNode.volume.value = channel_2_fxSend_1_postFdr_volNode.volume.value;
                  channel_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  channel_2_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_2_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_1_state", value);
          break;
        }
        else { alert("is_channel_2_fxSend_1_On == FALSE"); }
      }
    case "channel_2_fxSend_2":
      {
        if (is_channel_2_fxSend_2_On == true) {
          if (channel_2_fxSend_2_state != value) {
            switch (channel_2_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_2_fxSend_2_postEq_volNode.volume.value = channel_2_fxSend_2_preEq_volNode.volume.value;
                  channel_2_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_2_postFdr_volNode.volume.value = channel_2_fxSend_2_preEq_volNode.volume.value;
                  channel_2_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_2_fxSend_2_preEq_volNode.volume.value = channel_2_fxSend_2_postEq_volNode.volume.value;
                  channel_2_fxSend_2_postEq_volNode.volume.value = -100;
                  channel_2_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_2_postFdr_volNode.volume.value = channel_2_fxSend_2_postEq_volNode.volume.value;
                  channel_2_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_3_fxSend_2_postEq_volNode.volume.value = channel_3_fxSend_2_postFdr_volNode.volume.value;
                  channel_3_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_3_fxSend_2_preEq_volNode.volume.value = channel_3_fxSend_2_postFdr_volNode.volume.value;
                  channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  channel_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_2_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_2_state", value);
          break;
        }
        else { alert("is_channel_2_fxSend_2_On == FALSE"); }
      }
    case "channel_2_fxSend_3":
      {
        if (is_channel_2_fxSend_3_On == true) {
          if (channel_2_fxSend_3_state != value) {
            switch (channel_2_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_2_fxSend_3_postEq_volNode.volume.value = channel_2_fxSend_3_preEq_volNode.volume.value;
                  channel_2_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_3_postFdr_volNode.volume.value = channel_2_fxSend_3_preEq_volNode.volume.value;
                  channel_2_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_2_fxSend_3_preEq_volNode.volume.value = channel_2_fxSend_3_postEq_volNode.volume.value;
                  channel_2_fxSend_3_postEq_volNode.volume.value = -100;
                  channel_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_3_postFdr_volNode.volume.value = channel_2_fxSend_3_postEq_volNode.volume.value;
                  channel_2_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_2_fxSend_3_postEq_volNode.volume.value = channel_2_fxSend_3_postFdr_volNode.volume.value;
                  channel_2_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_2_fxSend_3_preEq_volNode.volume.value = channel_2_fxSend_3_postFdr_volNode.volume.value;
                  channel_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  channel_2_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_2_fxSend_3_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_3_state", value);
          break;
        }
        else { alert("is_channel_2_fxSend_2_On == FALSE"); }
      }
    case "channel_2_fxSend_4":
      {
        if (is_channel_2_fxSend_4_On == true) {
          if (channel_2_fxSend_4_state != value) {
            switch (channel_2_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_2_fxSend_4_postEq_volNode.volume.value = channel_2_fxSend_4_preEq_volNode.volume.value;
                  channel_2_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_4_postFdr_volNode.volume.value = channel_2_fxSend_4_preEq_volNode.volume.value;
                  channel_2_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_2_fxSend_4_preEq_volNode.volume.value = channel_2_fxSend_4_postEq_volNode.volume.value;
                  channel_2_fxSend_4_postEq_volNode.volume.value = -100;
                  channel_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_2_fxSend_4_postFdr_volNode.volume.value = channel_2_fxSend_4_postEq_volNode.volume.value;
                  channel_2_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_2_fxSend_4_postEq_volNode.volume.value = channel_2_fxSend_4_postFdr_volNode.volume.value;
                  channel_2_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_2_fxSend_4_preEq_volNode.volume.value = channel_2_fxSend_4_postFdr_volNode.volume.value;
                  channel_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  channel_2_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_2_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_2_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_fxSend_4_state", value);
          break;
        }
        else { alert("is_channel_2_fxSend_4_On == FALSE"); }
      }
    case "channel_3_fxSend_1":
      {
        if (is_channel_3_fxSend_1_On == true) {
          if (channel_3_fxSend_1_state != value) {
            switch (channel_3_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_3_fxSend_1_postEq_volNode.volume.value = channel_3_fxSend_1_preEq_volNode.volume.value;
                  channel_3_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_1_postFdr_volNode.volume.value = channel_3_fxSend_1_preEq_volNode.volume.value;
                  channel_3_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_3_fxSend_1_preEq_volNode.volume.value = channel_3_fxSend_1_postEq_volNode.volume.value;
                  channel_3_fxSend_1_postEq_volNode.volume.value = -100;
                  channel_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_1_postFdr_volNode.volume.value = channel_3_fxSend_1_postEq_volNode.volume.value;
                  channel_3_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_3_fxSend_1_postEq_volNode.volume.value = channel_3_fxSend_1_postFdr_volNode.volume.value;
                  channel_3_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_3_fxSend_1_preEq_volNode.volume.value = channel_3_fxSend_1_postFdr_volNode.volume.value;
                  channel_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  channel_3_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_1_state", value);
          break;
        }
        else { alert("is_channel_3_fxSend_1_On == FALSE"); }
      }
    case "channel_3_fxSend_2":
      {
        if (is_channel_3_fxSend_2_On == true) {
          if (channel_3_fxSend_2_state != value) {
            switch (channel_3_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_3_fxSend_2_postEq_volNode.volume.value = channel_3_fxSend_2_preEq_volNode.volume.value;
                  channel_3_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_2_postFdr_volNode.volume.value = channel_3_fxSend_2_preEq_volNode.volume.value;
                  channel_3_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_3_fxSend_2_preEq_volNode.volume.value = channel_3_fxSend_2_postEq_volNode.volume.value;
                  channel_3_fxSend_2_postEq_volNode.volume.value = -100;
                  channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_2_postFdr_volNode.volume.value = channel_3_fxSend_2_postEq_volNode.volume.value;
                  channel_3_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_3_fxSend_2_postEq_volNode.volume.value = channel_3_fxSend_2_postFdr_volNode.volume.value;
                  channel_3_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_3_fxSend_2_preEq_volNode.volume.value = channel_3_fxSend_2_postFdr_volNode.volume.value;
                  channel_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  channel_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_3_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_2_state", value);
          break;
        }
        else { alert("is_channel_3_fxSend_2_On == FALSE"); }
      }
    case "channel_3_fxSend_3":
      {
        if (is_channel_3_fxSend_3_On == true) {
          if (channel_3_fxSend_3_state != value) {
            switch (channel_3_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_3_fxSend_3_postEq_volNode.volume.value = channel_3_fxSend_3_preEq_volNode.volume.value;
                  channel_3_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_3_postFdr_volNode.volume.value = channel_3_fxSend_3_preEq_volNode.volume.value;
                  channel_3_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_3_fxSend_3_preEq_volNode.volume.value = channel_3_fxSend_3_postEq_volNode.volume.value;
                  channel_3_fxSend_3_postEq_volNode.volume.value = -100;
                  channel_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_3_postFdr_volNode.volume.value = channel_3_fxSend_3_postEq_volNode.volume.value;
                  channel_3_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_3_fxSend_3_postEq_volNode.volume.value = channel_3_fxSend_3_postFdr_volNode.volume.value;
                  channel_3_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_3_fxSend_3_preEq_volNode.volume.value = channel_3_fxSend_3_postFdr_volNode.volume.value;
                  channel_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  channel_3_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_3_fxSend_3state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_3_state", value);
          break;
        }
        else { alert("is_channel_3_fxSend_3_On == FALSE"); }
      }
    case "channel_3_fxSend_4":
      {
        if (is_channel_3_fxSend_4_On == true) {
          if (channel_3_fxSend_4_state != value) {
            switch (channel_3_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_3_fxSend_4_postEq_volNode.volume.value = channel_3_fxSend_4_preEq_volNode.volume.value;
                  channel_3_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_4_postFdr_volNode.volume.value = channel_3_fxSend_4_preEq_volNode.volume.value;
                  channel_3_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_3_fxSend_4_preEq_volNode.volume.value = channel_3_fxSend_4_postEq_volNode.volume.value;
                  channel_3_fxSend_4_postEq_volNode.volume.value = -100;
                  channel_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_3_fxSend_4_postFdr_volNode.volume.value = channel_3_fxSend_4_postEq_volNode.volume.value;
                  channel_3_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_3_fxSend_4_postEq_volNode.volume.value = channel_3_fxSend_4_postFdr_volNode.volume.value;
                  channel_3_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_3_fxSend_4_preEq_volNode.volume.value = channel_3_fxSend_4_postFdr_volNode.volume.value;
                  channel_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  channel_3_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_3_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_3_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_fxSend_4_state", value);
          break;
        }
        else { alert("is_channel_3_fxSend_4_On == FALSE"); }
      }
    case "channel_4_fxSend_1":
      {
        if (is_channel_4_fxSend_1_On == true) {
          if (channel_4_fxSend_1_state != value) {
            switch (channel_4_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_4_fxSend_1_postEq_volNode.volume.value = channel_4_fxSend_1_preEq_volNode.volume.value;
                  channel_4_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_1_postFdr_volNode.volume.value = channel_4_fxSend_1_preEq_volNode.volume.value;
                  channel_4_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_4_fxSend_1_preEq_volNode.volume.value = channel_4_fxSend_1_postEq_volNode.volume.value;
                  channel_4_fxSend_1_postEq_volNode.volume.value = -100;
                  channel_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_1_postFdr_volNode.volume.value = channel_4_fxSend_1_postEq_volNode.volume.value;
                  channel_4_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_4_fxSend_1_postEq_volNode.volume.value = channel_4_fxSend_1_postFdr_volNode.volume.value;
                  channel_4_fxSend_1_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_4_fxSend_1_preEq_volNode.volume.value = channel_4_fxSend_1_postFdr_volNode.volume.value;
                  channel_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  channel_4_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_1_state", value);
          break;
        }
        else { alert("is_channel_4_fxSend_1_On == FALSE"); }
      }
    case "channel_4_fxSend_2":
      {
        if (is_channel_4_fxSend_2_On == true) {
          if (channel_4_fxSend_2_state != value) {
            switch (channel_4_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_4_fxSend_2_postEq_volNode.volume.value = channel_4_fxSend_2_preEq_volNode.volume.value;
                  channel_4_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_2_postFdr_volNode.volume.value = channel_4_fxSend_2_preEq_volNode.volume.value;
                  channel_4_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_4_fxSend_2_preEq_volNode.volume.value = channel_4_fxSend_2_postEq_volNode.volume.value;
                  channel_4_fxSend_2_postEq_volNode.volume.value = -100;
                  channel_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_2_postFdr_volNode.volume.value = channel_4_fxSend_2_postEq_volNode.volume.value;
                  channel_4_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_4_fxSend_2_postEq_volNode.volume.value = channel_4_fxSend_2_postFdr_volNode.volume.value;
                  channel_4_fxSend_2_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_4_fxSend_2_preEq_volNode.volume.value = channel_4_fxSend_2_postFdr_volNode.volume.value;
                  channel_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  channel_4_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_4_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_2_state", value);
          break;
        }
        else { alert("is_channel_4_fxSend_2_On == FALSE"); }
      }
    case "channel_4_fxSend_3":
      {
        if (is_channel_4_fxSend_3_On == true) {
          if (channel_4_fxSend_3_state != value) {
            switch (channel_4_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_4_fxSend_3_postEq_volNode.volume.value = channel_4_fxSend_3_preEq_volNode.volume.value;
                  channel_4_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_3_postFdr_volNode.volume.value = channel_4_fxSend_3_preEq_volNode.volume.value;
                  channel_4_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_4_fxSend_3_preEq_volNode.volume.value = channel_4_fxSend_3_postEq_volNode.volume.value;
                  channel_4_fxSend_3_postEq_volNode.volume.value = -100;
                  channel_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_3_postFdr_volNode.volume.value = channel_4_fxSend_3_postEq_volNode.volume.value;
                  channel_4_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_4_fxSend_3_postEq_volNode.volume.value = channel_4_fxSend_3_postFdr_volNode.volume.value;
                  channel_4_fxSend_3_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_4_fxSend_3_preEq_volNode.volume.value = channel_4_fxSend_3_postFdr_volNode.volume.value;
                  channel_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  channel_4_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_4_fxSend_3_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_3_state", value);
          break;
        }
        else { alert("is_channel_4_fxSend_3_On == FALSE"); }
      }
    case "channel_4_fxSend_4":
      {
        if (is_channel_4_fxSend_4_On == true) {
          if (channel_4_fxSend_4_state != value) {
            switch (channel_4_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  channel_4_fxSend_4_postEq_volNode.volume.value = channel_4_fxSend_4_preEq_volNode.volume.value;
                  channel_4_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_4_postFdr_volNode.volume.value = channel_4_fxSend_4_preEq_volNode.volume.value;
                  channel_4_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  channel_4_fxSend_4_preEq_volNode.volume.value = channel_4_fxSend_4_postEq_volNode.volume.value;
                  channel_4_fxSend_4_postEq_volNode.volume.value = -100;
                  channel_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  channel_4_fxSend_4_postFdr_volNode.volume.value = channel_4_fxSend_4_postEq_volNode.volume.value;
                  channel_4_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  channel_4_fxSend_4_postEq_volNode.volume.value = channel_4_fxSend_4_postFdr_volNode.volume.value;
                  channel_4_fxSend_4_preEq_volNode.volume.value = -100;
                  channel_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  channel_4_fxSend_4_preEq_volNode.volume.value = channel_4_fxSend_4_postFdr_volNode.volume.value;
                  channel_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  channel_4_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  channel_4_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(channel_4_fxSend_4_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_fxSend_4_state", value);
          break;
        }
        else { alert("is_channel_4_fxSend_4_On == FALSE"); }
      }
    case "fx_1_fxSend_1":
      {
        if (is_fx_1_fxSend_1_On == true) {
          if (fx_1_fxSend_1_state != value) {
            switch (fx_1_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_1_fxSend_1_postEq_volNode.volume.value = fx_1_fxSend_1_preEq_volNode.volume.value;
                  fx_1_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_1_postFdr_volNode.volume.value = fx_1_fxSend_1_preEq_volNode.volume.value;
                  fx_1_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_1_fxSend_1_preEq_volNode.volume.value = fx_1_fxSend_1_postEq_volNode.volume.value;
                  fx_1_fxSend_1_postEq_volNode.volume.value = -100;
                  fx_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_1_postFdr_volNode.volume.value = fx_1_fxSend_1_postEq_volNode.volume.value;
                  fx_1_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_1_fxSend_1_postEq_volNode.volume.value = fx_1_fxSend_1_postFdr_volNode.volume.value;
                  fx_1_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_1_fxSend_1_preEq_volNode.volume.value = fx_1_fxSend_1_postFdr_volNode.volume.value;
                  fx_1_fxSend_1_postFdr_volNode.volume.value = -100;
                  fx_1_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_1_state", value);
          break;
        }
        else { alert("is_fx_1_fxSend_1_On == FALSE"); }
      }
    case "fx_1_fxSend_2":
      {
        if (is_fx_1_fxSend_2_On == true) {
          if (fx_1_fxSend_2_state != value) {
            switch (fx_1_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_1_fxSend_2_postEq_volNode.volume.value = fx_1_fxSend_2_preEq_volNode.volume.value;
                  fx_1_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_2_postFdr_volNode.volume.value = fx_1_fxSend_2_preEq_volNode.volume.value;
                  fx_1_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_1_fxSend_2_preEq_volNode.volume.value = fx_1_fxSend_2_postEq_volNode.volume.value;
                  fx_1_fxSend_2_postEq_volNode.volume.value = -100;
                  fx_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_2_postFdr_volNode.volume.value = fx_1_fxSend_2_postEq_volNode.volume.value;
                  fx_1_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_1_fxSend_2_postEq_volNode.volume.value = fx_1_fxSend_2_postFdr_volNode.volume.value;
                  fx_1_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_1_fxSend_2_preEq_volNode.volume.value = fx_1_fxSend_2_postFdr_volNode.volume.value;
                  fx_1_fxSend_2_postFdr_volNode.volume.value = -100;
                  fx_1_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_2_state", value);
          break;
        }
        else { alert("is_fx_1_fxSend_1_On == FALSE"); }
      }
    case "fx_1_fxSend_3":
      {
        if (is_fx_1_fxSend_3_On == true) {
          if (fx_1_fxSend_3_state != value) {
            switch (fx_1_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_1_fxSend_3_postEq_volNode.volume.value = fx_1_fxSend_3_preEq_volNode.volume.value;
                  fx_1_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_3_postFdr_volNode.volume.value = fx_1_fxSend_3_preEq_volNode.volume.value;
                  fx_1_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_1_fxSend_3_preEq_volNode.volume.value = fx_1_fxSend_3_postEq_volNode.volume.value;
                  fx_1_fxSend_3_postEq_volNode.volume.value = -100;
                  fx_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_3_postFdr_volNode.volume.value = fx_1_fxSend_3_postEq_volNode.volume.value;
                  fx_1_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_1_fxSend_3_postEq_volNode.volume.value = fx_1_fxSend_3_postFdr_volNode.volume.value;
                  fx_1_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_1_fxSend_3_preEq_volNode.volume.value = fx_1_fxSend_3_postFdr_volNode.volume.value;
                  fx_1_fxSend_3_postFdr_volNode.volume.value = -100;
                  fx_1_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_3_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_3_state", value);
          break;
        }
        else { alert("is_fx_1_fxSend_1_On == FALSE"); }
      }
    case "fx_1_fxSend_4":
      {
        if (is_fx_1_fxSend_4_On == true) {
          if (fx_1_fxSend_4_state != value) {
            switch (fx_1_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_1_fxSend_4_postEq_volNode.volume.value = fx_1_fxSend_4_preEq_volNode.volume.value;
                  fx_1_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_4_postFdr_volNode.volume.value = fx_1_fxSend_4_preEq_volNode.volume.value;
                  fx_1_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_1_fxSend_4_preEq_volNode.volume.value = fx_1_fxSend_4_postEq_volNode.volume.value;
                  fx_1_fxSend_4_postEq_volNode.volume.value = -100;
                  fx_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_1_fxSend_4_postFdr_volNode.volume.value = fx_1_fxSend_4_postEq_volNode.volume.value;
                  fx_1_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_1_fxSend_4_postEq_volNode.volume.value = fx_1_fxSend_4_postFdr_volNode.volume.value;
                  fx_1_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_1_fxSend_4_preEq_volNode.volume.value = fx_1_fxSend_4_postFdr_volNode.volume.value;
                  fx_1_fxSend_4_postFdr_volNode.volume.value = -100;
                  fx_1_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_1_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_4_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_fxSend_4_state", value);
          break;
        }
        else { alert("is_fx_1_fxSend_1_On == FALSE"); }
      }
    case "fx_2_fxSend_1":
      {
        if (is_fx_2_fxSend_1_On == true) {
          if (fx_2_fxSend_1_state != value) {
            switch (fx_2_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_2_fxSend_1_postEq_volNode.volume.value = fx_2_fxSend_1_preEq_volNode.volume.value;
                  fx_2_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_1_postFdr_volNode.volume.value = fx_2_fxSend_1_preEq_volNode.volume.value;
                  fx_2_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_2_fxSend_1_preEq_volNode.volume.value = fx_2_fxSend_1_postEq_volNode.volume.value;
                  fx_2_fxSend_1_postEq_volNode.volume.value = -100;
                  fx_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_1_postFdr_volNode.volume.value = fx_2_fxSend_1_postEq_volNode.volume.value;
                  fx_2_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_2_fxSend_1_postEq_volNode.volume.value = fx_2_fxSend_1_postFdr_volNode.volume.value;
                  fx_2_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_2_fxSend_1_preEq_volNode.volume.value = fx_2_fxSend_1_postFdr_volNode.volume.value;
                  fx_2_fxSend_1_postFdr_volNode.volume.value = -100;
                  fx_2_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_1_state", value);
          break;
        }
        else { alert("is_fx_2_fxSend_1_On == FALSE"); }
      }
    case "fx_2_fxSend_2":
      {
        if (is_fx_2_fxSend_2_On == true) {
          if (fx_2_fxSend_2_state != value) {
            switch (fx_2_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_2_fxSend_2_postEq_volNode.volume.value = fx_2_fxSend_2_preEq_volNode.volume.value;
                  fx_2_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_2_postFdr_volNode.volume.value = fx_2_fxSend_2_preEq_volNode.volume.value;
                  fx_2_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_2_fxSend_2_preEq_volNode.volume.value = fx_2_fxSend_2_postEq_volNode.volume.value;
                  fx_2_fxSend_2_postEq_volNode.volume.value = -100;
                  fx_2_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_2_postFdr_volNode.volume.value = fx_2_fxSend_2_postEq_volNode.volume.value;
                  fx_2_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_3_fxSend_2_postEq_volNode.volume.value = fx_3_fxSend_2_postFdr_volNode.volume.value;
                  fx_3_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_3_fxSend_2_preEq_volNode.volume.value = fx_3_fxSend_2_postFdr_volNode.volume.value;
                  fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  fx_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_2_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_2_state", value);
          break;
        }
        else { alert("is_fx_2_fxSend_1_On == FALSE"); }
      }
    case "fx_2_fxSend_3":
      {
        if (is_fx_2_fxSend_3_On == true) {
          if (fx_2_fxSend_3_state != value) {
            switch (fx_2_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_2_fxSend_3_postEq_volNode.volume.value = fx_2_fxSend_3_preEq_volNode.volume.value;
                  fx_2_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_3_postFdr_volNode.volume.value = fx_2_fxSend_3_preEq_volNode.volume.value;
                  fx_2_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_2_fxSend_3_preEq_volNode.volume.value = fx_2_fxSend_3_postEq_volNode.volume.value;
                  fx_2_fxSend_3_postEq_volNode.volume.value = -100;
                  fx_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_3_postFdr_volNode.volume.value = fx_2_fxSend_3_postEq_volNode.volume.value;
                  fx_2_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_2_fxSend_3_postEq_volNode.volume.value = fx_2_fxSend_3_postFdr_volNode.volume.value;
                  fx_2_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_2_fxSend_3_preEq_volNode.volume.value = fx_2_fxSend_3_postFdr_volNode.volume.value;
                  fx_2_fxSend_3_postFdr_volNode.volume.value = -100;
                  fx_2_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_2_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_3_state", value);
          break;
        }
        else { alert("is_fx_2_fxSend_1_On == FALSE"); }
      }
    case "fx_2_fxSend_4":
      {
        if (is_fx_2_fxSend_4_On == true) {
          if (fx_2_fxSend_4_state != value) {
            switch (fx_2_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_2_fxSend_4_postEq_volNode.volume.value = fx_2_fxSend_4_preEq_volNode.volume.value;
                  fx_2_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_4_postFdr_volNode.volume.value = fx_2_fxSend_4_preEq_volNode.volume.value;
                  fx_2_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_2_fxSend_4_preEq_volNode.volume.value = fx_2_fxSend_4_postEq_volNode.volume.value;
                  fx_2_fxSend_4_postEq_volNode.volume.value = -100;
                  fx_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_2_fxSend_4_postFdr_volNode.volume.value = fx_2_fxSend_4_postEq_volNode.volume.value;
                  fx_2_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_2_fxSend_4_postEq_volNode.volume.value = fx_2_fxSend_4_postFdr_volNode.volume.value;
                  fx_2_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_2_fxSend_4_preEq_volNode.volume.value = fx_2_fxSend_4_postFdr_volNode.volume.value;
                  fx_2_fxSend_4_postFdr_volNode.volume.value = -100;
                  fx_2_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_2_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_2_fxSend_4_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_fxSend_4_state", value);
          break;
        }
        else { alert("is_fx_2_fxSend_1_On == FALSE"); }
      }
    case "fx_3_fxSend_1":
      {
        if (is_fx_3_fxSend_1_On == true) {
          if (fx_3_fxSend_1_state != value) {
            switch (fx_3_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_3_fxSend_1_postEq_volNode.volume.value = fx_3_fxSend_1_preEq_volNode.volume.value;
                  fx_3_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_1_postFdr_volNode.volume.value = fx_3_fxSend_1_preEq_volNode.volume.value;
                  fx_3_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_3_fxSend_1_preEq_volNode.volume.value = fx_3_fxSend_1_postEq_volNode.volume.value;
                  fx_3_fxSend_1_postEq_volNode.volume.value = -100;
                  fx_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_1_postFdr_volNode.volume.value = fx_3_fxSend_1_postEq_volNode.volume.value;
                  fx_3_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_3_fxSend_1_postEq_volNode.volume.value = fx_3_fxSend_1_postFdr_volNode.volume.value;
                  fx_3_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_3_fxSend_1_preEq_volNode.volume.value = fx_3_fxSend_1_postFdr_volNode.volume.value;
                  fx_3_fxSend_1_postFdr_volNode.volume.value = -100;
                  fx_3_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_1_state", value);
          break;
        }
        else { alert("is_fx_3_fxSend_1_On == FALSE"); }
      }
    case "fx_3_fxSend_2":
      {
        if (is_fx_3_fxSend_2_On == true) {
          if (fx_3_fxSend_2_state != value) {
            switch (fx_3_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_3_fxSend_2_postEq_volNode.volume.value = fx_3_fxSend_2_preEq_volNode.volume.value;
                  fx_3_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_2_postFdr_volNode.volume.value = fx_3_fxSend_2_preEq_volNode.volume.value;
                  fx_3_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_3_fxSend_2_preEq_volNode.volume.value = fx_3_fxSend_2_postEq_volNode.volume.value;
                  fx_3_fxSend_2_postEq_volNode.volume.value = -100;
                  fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_2_postFdr_volNode.volume.value = fx_3_fxSend_2_postEq_volNode.volume.value;
                  fx_3_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_3_fxSend_2_postEq_volNode.volume.value = fx_3_fxSend_2_postFdr_volNode.volume.value;
                  fx_3_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_3_fxSend_2_preEq_volNode.volume.value = fx_3_fxSend_2_postFdr_volNode.volume.value;
                  fx_3_fxSend_2_postFdr_volNode.volume.value = -100;
                  fx_3_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_3_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_2_state", value);
          break;
        }
        else { alert("is_fx_3_fxSend_1_On == FALSE"); }
      }
    case "fx_3_fxSend_3":
      {
        if (is_fx_3_fxSend_3_On == true) {
          if (fx_3_fxSend_3_state != value) {
            switch (fx_3_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_3_fxSend_3_postEq_volNode.volume.value = fx_3_fxSend_3_preEq_volNode.volume.value;
                  fx_3_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_3_postFdr_volNode.volume.value = fx_3_fxSend_3_preEq_volNode.volume.value;
                  fx_3_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_3_fxSend_3_preEq_volNode.volume.value = fx_3_fxSend_3_postEq_volNode.volume.value;
                  fx_3_fxSend_3_postEq_volNode.volume.value = -100;
                  fx_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_3_postFdr_volNode.volume.value = fx_3_fxSend_3_postEq_volNode.volume.value;
                  fx_3_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_3_fxSend_3_postEq_volNode.volume.value = fx_3_fxSend_3_postFdr_volNode.volume.value;
                  fx_3_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_3_fxSend_3_preEq_volNode.volume.value = fx_3_fxSend_3_postFdr_volNode.volume.value;
                  fx_3_fxSend_3_postFdr_volNode.volume.value = -100;
                  fx_3_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_3_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_3_state", value);
          break;
        }
        else { alert("is_fx_3_fxSend_1_On == FALSE"); }
      }
    case "fx_3_fxSend_4":
      {
        if (is_fx_3_fxSend_4_On == true) {
          if (fx_3_fxSend_4_state != value) {
            switch (fx_3_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_3_fxSend_4_postEq_volNode.volume.value = fx_3_fxSend_4_preEq_volNode.volume.value;
                  fx_3_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_4_postFdr_volNode.volume.value = fx_3_fxSend_4_preEq_volNode.volume.value;
                  fx_3_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_3_fxSend_4_preEq_volNode.volume.value = fx_3_fxSend_4_postEq_volNode.volume.value;
                  fx_3_fxSend_4_postEq_volNode.volume.value = -100;
                  fx_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_3_fxSend_4_postFdr_volNode.volume.value = fx_3_fxSend_4_postEq_volNode.volume.value;
                  fx_3_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_3_fxSend_4_postEq_volNode.volume.value = fx_3_fxSend_4_postFdr_volNode.volume.value;
                  fx_3_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_3_fxSend_4_preEq_volNode.volume.value = fx_3_fxSend_4_postFdr_volNode.volume.value;
                  fx_3_fxSend_4_postFdr_volNode.volume.value = -100;
                  fx_3_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_3_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_3_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_fxSend_4_state", value);
          break;
        }
        else { alert("is_fx_3_fxSend_1_On == FALSE"); }
      }
    case "fx_4_fxSend_1":
      {
        if (is_fx_4_fxSend_1_On == true) {
          if (fx_4_fxSend_1_state != value) {
            switch (fx_4_fxSend_1_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_4_fxSend_1_postEq_volNode.volume.value = fx_4_fxSend_1_preEq_volNode.volume.value;
                  fx_4_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_1_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_1_postFdr_volNode.volume.value = fx_4_fxSend_1_preEq_volNode.volume.value;
                  fx_4_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_4_fxSend_1_preEq_volNode.volume.value = fx_4_fxSend_1_postEq_volNode.volume.value;
                  fx_4_fxSend_1_postEq_volNode.volume.value = -100;
                  fx_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_1_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_1_postFdr_volNode.volume.value = fx_4_fxSend_1_postEq_volNode.volume.value;
                  fx_4_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_1_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_4_fxSend_1_postEq_volNode.volume.value = fx_4_fxSend_1_postFdr_volNode.volume.value;
                  fx_4_fxSend_1_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_1_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_4_fxSend_1_preEq_volNode.volume.value = fx_4_fxSend_1_postFdr_volNode.volume.value;
                  fx_4_fxSend_1_postFdr_volNode.volume.value = -100;
                  fx_4_fxSend_1_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_1_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_1_fxSend_1_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_1_state", value);
          break;
        }
        else { alert("is_fx_4_fxSend_1_On == FALSE"); }
      }
    case "fx_4_fxSend_2":
      {
        if (is_fx_4_fxSend_2_On == true) {
          if (fx_4_fxSend_2_state != value) {
            switch (fx_4_fxSend_2_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_4_fxSend_2_postEq_volNode.volume.value = fx_4_fxSend_2_preEq_volNode.volume.value;
                  fx_4_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_2_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_2_postFdr_volNode.volume.value = fx_4_fxSend_2_preEq_volNode.volume.value;
                  fx_4_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_4_fxSend_2_preEq_volNode.volume.value = fx_4_fxSend_2_postEq_volNode.volume.value;
                  fx_4_fxSend_2_postEq_volNode.volume.value = -100;
                  fx_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_2_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_2_postFdr_volNode.volume.value = fx_4_fxSend_2_postEq_volNode.volume.value;
                  fx_4_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_2_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_4_fxSend_2_postEq_volNode.volume.value = fx_4_fxSend_2_postFdr_volNode.volume.value;
                  fx_4_fxSend_2_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_2_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_4_fxSend_2_preEq_volNode.volume.value = fx_4_fxSend_2_postFdr_volNode.volume.value;
                  fx_4_fxSend_2_postFdr_volNode.volume.value = -100;
                  fx_4_fxSend_2_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_2_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_4_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_2_state", value);
          break;
        }
        else { alert("is_fx_4_fxSend_1_On == FALSE"); }
      }
    case "fx_4_fxSend_3":
      {
        if (is_fx_4_fxSend_3_On == true) {
          if (fx_4_fxSend_3_state != value) {
            switch (fx_4_fxSend_3_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_4_fxSend_3_postEq_volNode.volume.value = fx_4_fxSend_3_preEq_volNode.volume.value;
                  fx_4_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_3_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_3_postFdr_volNode.volume.value = fx_4_fxSend_3_preEq_volNode.volume.value;
                  fx_4_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_4_fxSend_3_preEq_volNode.volume.value = fx_4_fxSend_3_postEq_volNode.volume.value;
                  fx_4_fxSend_3_postEq_volNode.volume.value = -100;
                  fx_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_3_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_3_postFdr_volNode.volume.value = fx_4_fxSend_3_postEq_volNode.volume.value;
                  fx_4_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_3_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_4_fxSend_3_postEq_volNode.volume.value = fx_4_fxSend_3_postFdr_volNode.volume.value;
                  fx_4_fxSend_3_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_3_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_4_fxSend_3_preEq_volNode.volume.value = fx_4_fxSend_3_postFdr_volNode.volume.value;
                  fx_4_fxSend_3_postFdr_volNode.volume.value = -100;
                  fx_4_fxSend_3_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_3_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_4_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_3_state", value);
          break;
        }
        else { alert("is_fx_4_fxSend_1_On == FALSE"); }
      }
    case "fx_4_fxSend_4":
      {
        if (is_fx_4_fxSend_4_On == true) {
          if (fx_4_fxSend_4_state != value) {
            switch (fx_4_fxSend_4_state) {
              case "PreEQ": {
                if (value == "PostEQ") {
                  fx_4_fxSend_4_postEq_volNode.volume.value = fx_4_fxSend_4_preEq_volNode.volume.value;
                  fx_4_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_4_state = "PostEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_4_postFdr_volNode.volume.value = fx_4_fxSend_4_preEq_volNode.volume.value;
                  fx_4_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostEQ": {
                if (value == "PreEQ") {
                  fx_4_fxSend_4_preEq_volNode.volume.value = fx_4_fxSend_4_postEq_volNode.volume.value;
                  fx_4_fxSend_4_postEq_volNode.volume.value = -100;
                  fx_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_4_state = "PreEQ";
                }
                else if (value == "PostFdr") {
                  fx_4_fxSend_4_postFdr_volNode.volume.value = fx_4_fxSend_4_postEq_volNode.volume.value;
                  fx_4_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_4_state = "PostFdr";
                }
                break;
              }
              case "PostFdr": {
                if (value == "PostEQ") {
                  fx_4_fxSend_4_postEq_volNode.volume.value = fx_4_fxSend_4_postFdr_volNode.volume.value;
                  fx_4_fxSend_4_preEq_volNode.volume.value = -100;
                  fx_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_4_state = "PostEQ";
                }
                else if (value == "PreEQ") {
                  fx_4_fxSend_4_preEq_volNode.volume.value = fx_4_fxSend_4_postFdr_volNode.volume.value;
                  fx_4_fxSend_4_postFdr_volNode.volume.value = -100;
                  fx_4_fxSend_4_postEq_volNode.volume.value = -100;
                  send_state_player_x_background_change(name, value);
                  fx_4_fxSend_4_state = "PreEQ";
                }
                break;
              }
              default: { alert("DEFAULT switch(fx_4_fxSend_2_state) EN player_x_fxSend_x_state_foo ") }
            }
          }
          else { }
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_fxSend_4_state", value);
          break;
        }
        else { alert("is_fx_4_fxSend_1_On == FALSE"); }
      }
  }//CLOSES switch
}

function recieves_player_x_fxSend_x_value_Sets_Volume_value(e, name) {
  const state = channel_1_fxSend_1_state;
  switch (name) {

    case "channel_1_fxSend_1_volume_rampTo":
      {
        if (channel_1_fxSend_1_state == "PostEQ") {
          channel_1_fxSend_1_postEq_volNode.volume.value = e;
          channel_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_1.value = e;
        }
        else if (channel_1_fxSend_1_state == "PreEQ") {
          channel_1_fxSend_1_preEq_volNode.volume.value = e;
          channel_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_1_postFdr_volNode.volume.value = e;
          channel_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_1_fxSend_2_volume_rampTo":
      {
        if (channel_1_fxSend_2_state == "PostEQ") {
          channel_1_fxSend_2_postEq_volNode.volume.value = e;
          channel_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_2.value = e;
        }
        else if (channel_1_fxSend_2_state == "PreEQ") {
          channel_1_fxSend_2_preEq_volNode.volume.value = e;
          channel_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_2_postFdr_volNode.volume.value = e;
          channel_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_1_fxSend_3_volume_rampTo":
      {
        if (channel_1_fxSend_3_state == "PostEQ") {
          channel_1_fxSend_3_postEq_volNode.volume.value = e;
          channel_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_3.value = e;
        }
        else if (channel_1_fxSend_3_state == "PreEQ") {
          channel_1_fxSend_3_preEq_volNode.volume.value = e;
          channel_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_3_postFdr_volNode.volume.value = e;
          channel_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_1_fxSend_4_volume_rampTo":
      {
        if (channel_1_fxSend_4_state == "PostEQ") {
          channel_1_fxSend_4_postEq_volNode.volume.value = e;
          channel_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_4.value = e;
        }
        else if (channel_1_fxSend_4_state == "PreEQ") {
          channel_1_fxSend_4_preEq_volNode.volume.value = e;
          channel_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_4_postFdr_volNode.volume.value = e;
          channel_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_1_volume_rampTo":
      {
        if (channel_2_fxSend_1_state == "PostEQ") {
          channel_2_fxSend_1_postEq_volNode.volume.value = e;
          channel_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_1.value = e;
        }
        else if (channel_2_fxSend_1_state == "PreEQ") {
          channel_2_fxSend_1_preEq_volNode.volume.value = e;
          channel_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_1_postFdr_volNode.volume.value = e;
          channel_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_2_volume_rampTo":
      {
        if (channel_2_fxSend_2_state == "PostEQ") {
          channel_2_fxSend_2_postEq_volNode.volume.value = e;
          channel_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_2.value = e;
        }
        else if (channel_2_fxSend_2_state == "PreEQ") {
          channel_2_fxSend_2_preEq_volNode.volume.value = e;
          channel_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_2_postFdr_volNode.volume.value = e;
          channel_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_3_volume_rampTo":
      {
        if (channel_2_fxSend_3_state == "PostEQ") {
          channel_2_fxSend_3_postEq_volNode.volume.value = e;
          channel_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_3.value = e;
        }
        else if (channel_2_fxSend_3_state == "PreEQ") {
          channel_2_fxSend_3_preEq_volNode.volume.value = e;
          channel_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_3_postFdr_volNode.volume.value = e;
          channel_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_4_volume_rampTo":
      {
        if (channel_2_fxSend_4_state == "PostEQ") {
          channel_2_fxSend_4_postEq_volNode.volume.value = e;
          channel_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_4.value = e;
        }
        else if (channel_2_fxSend_4_state == "PreEQ") {
          channel_2_fxSend_4_preEq_volNode.volume.value = e;
          channel_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_4_postFdr_volNode.volume.value = e;
          channel_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_1_volume_rampTo":
      {
        if (channel_3_fxSend_1_state == "PostEQ") {
          channel_3_fxSend_1_postEq_volNode.volume.value = e;
          channel_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_1.value = e;
        }
        else if (channel_3_fxSend_1_state == "PreEQ") {
          channel_3_fxSend_1_preEq_volNode.volume.value = e;
          channel_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_1_postFdr_volNode.volume.value = e;
          channel_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_2_volume_rampTo":
      {
        if (channel_3_fxSend_2_state == "PostEQ") {
          channel_3_fxSend_2_postEq_volNode.volume.value = e;
          channel_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_2.value = e;
        }
        else if (channel_3_fxSend_2_state == "PreEQ") {
          channel_3_fxSend_2_preEq_volNode.volume.value = e;
          channel_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_2_postFdr_volNode.volume.value = e;
          channel_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_3_volume_rampTo":
      {
        if (channel_3_fxSend_3_state == "PostEQ") {
          channel_3_fxSend_3_postEq_volNode.volume.value = e;
          channel_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_3.value = e;
        }
        else if (channel_3_fxSend_3_state == "PreEQ") {
          channel_3_fxSend_3_preEq_volNode.volume.value = e;
          channel_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_3_postFdr_volNode.volume.value = e;
          channel_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_4_volume_rampTo":
      {
        if (channel_3_fxSend_4_state == "PostEQ") {
          channel_3_fxSend_4_postEq_volNode.volume.value = e;
          channel_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_4.value = e;
        }
        else if (channel_3_fxSend_4_state == "PreEQ") {
          channel_3_fxSend_4_preEq_volNode.volume.value = e;
          channel_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_4_postFdr_volNode.volume.value = e;
          channel_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_1_volume_rampTo":
      {
        if (channel_4_fxSend_1_state == "PostEQ") {
          channel_4_fxSend_1_postEq_volNode.volume.value = e;
          channel_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_1.value = e;
        }
        else if (channel_4_fxSend_1_state == "PreEQ") {
          channel_4_fxSend_1_preEq_volNode.volume.value = e;
          channel_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_1_postFdr_volNode.volume.value = e;
          channel_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_2_volume_rampTo":
      {
        if (channel_4_fxSend_2_state == "PostEQ") {
          channel_4_fxSend_2_postEq_volNode.volume.value = e;
          channel_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_2.value = e;
        }
        else if (channel_4_fxSend_2_state == "PreEQ") {
          channel_4_fxSend_2_preEq_volNode.volume.value = e;
          channel_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_2_postFdr_volNode.volume.value = e;
          channel_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_3_volume_rampTo":
      {
        if (channel_4_fxSend_3_state == "PostEQ") {
          channel_4_fxSend_3_postEq_volNode.volume.value = e;
          channel_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_3.value = e;
        }
        else if (channel_4_fxSend_3_state == "PreEQ") {
          channel_4_fxSend_3_preEq_volNode.volume.value = e;
          channel_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_3_postFdr_volNode.volume.value = e;
          channel_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_4_volume_rampTo":
      {
        if (channel_4_fxSend_4_state == "PostEQ") {
          channel_4_fxSend_4_postEq_volNode.volume.value = e;
          channel_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_4.value = e;
        }
        else if (channel_4_fxSend_4_state == "PreEQ") {
          channel_4_fxSend_4_preEq_volNode.volume.value = e;
          channel_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_4_postFdr_volNode.volume.value = e;
          channel_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_1_fxSend_1":
      {
        if (channel_1_fxSend_1_state == "PostEQ") {
          channel_1_fxSend_1_postEq_volNode.volume.value = e;
          channel_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_1.value = e;
          alert("PostEQ");
        }
        else if (channel_1_fxSend_1_state == "PreEQ") {
          channel_1_fxSend_1_preEq_volNode.volume.value = e;
          channel_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
          alert("PreEQ");
        }
        else {
          channel_1_fxSend_1_postFdr_volNode.volume.value = e;
          channel_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
          alert("PostFDR");
        }
        break;
      }
    case "channel_1_fxSend_2":
      {
        if (channel_1_fxSend_2_state == "PostEQ") {
          channel_1_fxSend_2_postEq_volNode.volume.value = e;
          channel_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_2.value = e;
        }
        else if (channel_1_fxSend_2_state == "PreEQ") {
          channel_1_fxSend_2_preEq_volNode.volume.value = e;
          channel_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_2_postFdr_volNode.volume.value = e;
          channel_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_1_fxSend_3":
      {
        if (channel_1_fxSend_3_state == "PostEQ") {
          channel_1_fxSend_3_postEq_volNode.volume.value = e;
          channel_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_3.value = e;
        }
        else if (channel_1_fxSend_3_state == "PreEQ") {
          channel_1_fxSend_3_preEq_volNode.volume.value = e;
          channel_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_3_postFdr_volNode.volume.value = e;
          channel_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_1_fxSend_4":
      {
        if (channel_1_fxSend_4_state == "PostEQ") {
          channel_1_fxSend_4_postEq_volNode.volume.value = e;
          channel_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_1_fxSend_4.value = e;
        }
        else if (channel_1_fxSend_4_state == "PreEQ") {
          channel_1_fxSend_4_preEq_volNode.volume.value = e;
          channel_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_1_fxSend_4_postFdr_volNode.volume.value = e;
          channel_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_1":
      {
        if (channel_2_fxSend_1_state == "PostEQ") {
          channel_2_fxSend_1_postEq_volNode.volume.value = e;
          channel_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_1.value = e;
        }
        else if (channel_2_fxSend_1_state == "PreEQ") {
          channel_2_fxSend_1_preEq_volNode.volume.value = e;
          channel_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_1_postFdr_volNode.volume.value = e;
          channel_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_2":
      {
        if (channel_2_fxSend_2_state == "PostEQ") {
          channel_2_fxSend_2_postEq_volNode.volume.value = e;
          channel_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_2.value = e;
        }
        else if (channel_2_fxSend_2_state == "PreEQ") {
          channel_2_fxSend_2_preEq_volNode.volume.value = e;
          channel_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_2_postFdr_volNode.volume.value = e;
          channel_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_3":
      {
        if (channel_2_fxSend_3_state == "PostEQ") {
          channel_2_fxSend_3_postEq_volNode.volume.value = e;
          channel_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_3.value = e;
        }
        else if (channel_2_fxSend_3_state == "PreEQ") {
          channel_2_fxSend_3_preEq_volNode.volume.value = e;
          channel_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_3_postFdr_volNode.volume.value = e;
          channel_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_2_fxSend_4":
      {
        if (channel_2_fxSend_4_state == "PostEQ") {
          channel_2_fxSend_4_postEq_volNode.volume.value = e;
          channel_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_2_fxSend_4.value = e;
        }
        else if (channel_2_fxSend_4_state == "PreEQ") {
          channel_2_fxSend_4_preEq_volNode.volume.value = e;
          channel_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_2_fxSend_4_postFdr_volNode.volume.value = e;
          channel_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_1":
      {
        if (channel_3_fxSend_1_state == "PostEQ") {
          channel_3_fxSend_1_postEq_volNode.volume.value = e;
          channel_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_1.value = e;
        }
        else if (channel_3_fxSend_1_state == "PreEQ") {
          channel_3_fxSend_1_preEq_volNode.volume.value = e;
          channel_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_1_postFdr_volNode.volume.value = e;
          channel_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_2":
      {
        if (channel_3_fxSend_2_state == "PostEQ") {
          channel_3_fxSend_2_postEq_volNode.volume.value = e;
          channel_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_2.value = e;
        }
        else if (channel_3_fxSend_2_state == "PreEQ") {
          channel_3_fxSend_2_preEq_volNode.volume.value = e;
          channel_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_2_postFdr_volNode.volume.value = e;
          channel_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_3":
      {
        if (channel_3_fxSend_3_state == "PostEQ") {
          channel_3_fxSend_3_postEq_volNode.volume.value = e;
          channel_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_3.value = e;
        }
        else if (channel_3_fxSend_3_state == "PreEQ") {
          channel_3_fxSend_3_preEq_volNode.volume.value = e;
          channel_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_3_postFdr_volNode.volume.value = e;
          channel_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_3_fxSend_4":
      {
        if (channel_3_fxSend_4_state == "PostEQ") {
          channel_3_fxSend_4_postEq_volNode.volume.value = e;
          channel_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_3_fxSend_4.value = e;
        }
        else if (channel_3_fxSend_4_state == "PreEQ") {
          channel_3_fxSend_4_preEq_volNode.volume.value = e;
          channel_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_3_fxSend_4_postFdr_volNode.volume.value = e;
          channel_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_1":
      {
        if (channel_4_fxSend_1_state == "PostEQ") {
          channel_4_fxSend_1_postEq_volNode.volume.value = e;
          channel_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_1.value = e;
        }
        else if (channel_4_fxSend_1_state == "PreEQ") {
          channel_4_fxSend_1_preEq_volNode.volume.value = e;
          channel_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_1_postFdr_volNode.volume.value = e;
          channel_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_2":
      {
        if (channel_4_fxSend_2_state == "PostEQ") {
          channel_4_fxSend_2_postEq_volNode.volume.value = e;
          channel_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_2.value = e;
        }
        else if (channel_4_fxSend_2_state == "PreEQ") {
          channel_4_fxSend_2_preEq_volNode.volume.value = e;
          channel_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_2_postFdr_volNode.volume.value = e;
          channel_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_3":
      {
        if (channel_4_fxSend_3_state == "PostEQ") {
          channel_4_fxSend_3_postEq_volNode.volume.value = e;
          channel_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_3.value = e;
        }
        else if (channel_4_fxSend_3_state == "PreEQ") {
          channel_4_fxSend_3_preEq_volNode.volume.value = e;
          channel_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_3_postFdr_volNode.volume.value = e;
          channel_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "channel_4_fxSend_4":
      {
        if (channel_4_fxSend_4_state == "PostEQ") {
          channel_4_fxSend_4_postEq_volNode.volume.value = e;
          channel_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
          channel_4_fxSend_4.value = e;
        }
        else if (channel_4_fxSend_4_state == "PreEQ") {
          channel_4_fxSend_4_preEq_volNode.volume.value = e;
          channel_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          channel_4_fxSend_4_postFdr_volNode.volume.value = e;
          channel_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_1":
      {
        if (fx_1_fxSend_1_state == "PostEQ") {
          fx_1_fxSend_1_postEq_volNode.volume.value = e;
          fx_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_1.value = e;
        }
        else if (fx_1_fxSend_1_state == "PreEQ") {
          fx_1_fxSend_1_preEq_volNode.volume.value = e;
          fx_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_1_postFdr_volNode.volume.value = e;
          fx_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_2":
      {
        if (fx_1_fxSend_2_state == "PostEQ") {
          fx_1_fxSend_2_postEq_volNode.volume.value = e;
          fx_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_2.value = e;
        }
        else if (fx_1_fxSend_2_state == "PreEQ") {
          fx_1_fxSend_2_preEq_volNode.volume.value = e;
          fx_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_2_postFdr_volNode.volume.value = e;
          fx_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_3":
      {
        if (fx_1_fxSend_3_state == "PostEQ") {
          fx_1_fxSend_3_postEq_volNode.volume.value = e;
          fx_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_3.value = e;
        }
        else if (fx_1_fxSend_3_state == "PreEQ") {
          fx_1_fxSend_3_preEq_volNode.volume.value = e;
          fx_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_3_postFdr_volNode.volume.value = e;
          fx_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_4":
      {
        if (fx_1_fxSend_4_state == "PostEQ") {
          fx_1_fxSend_4_postEq_volNode.volume.value = e;
          fx_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_4.value = e;
        }
        else if (fx_1_fxSend_4_state == "PreEQ") {
          fx_1_fxSend_4_preEq_volNode.volume.value = e;
          fx_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_4_postFdr_volNode.volume.value = e;
          fx_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_1":
      {
        if (fx_2_fxSend_1_state == "PostEQ") {
          fx_2_fxSend_1_postEq_volNode.volume.value = e;
          fx_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_1.value = e;
        }
        else if (fx_2_fxSend_1_state == "PreEQ") {
          fx_2_fxSend_1_preEq_volNode.volume.value = e;
          fx_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_1_postFdr_volNode.volume.value = e;
          fx_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_2":
      {
        if (fx_2_fxSend_2_state == "PostEQ") {
          fx_2_fxSend_2_postEq_volNode.volume.value = e;
          fx_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_2.value = e;
        }
        else if (fx_2_fxSend_2_state == "PreEQ") {
          fx_2_fxSend_2_preEq_volNode.volume.value = e;
          fx_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_2_postFdr_volNode.volume.value = e;
          fx_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_3":
      {
        if (fx_2_fxSend_3_state == "PostEQ") {
          fx_2_fxSend_3_postEq_volNode.volume.value = e;
          fx_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_3.value = e;
        }
        else if (fx_2_fxSend_3_state == "PreEQ") {
          fx_2_fxSend_3_preEq_volNode.volume.value = e;
          fx_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_3_postFdr_volNode.volume.value = e;
          fx_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_4":
      {
        if (fx_2_fxSend_4_state == "PostEQ") {
          fx_2_fxSend_4_postEq_volNode.volume.value = e;
          fx_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_4.value = e;
        }
        else if (fx_2_fxSend_4_state == "PreEQ") {
          fx_2_fxSend_4_preEq_volNode.volume.value = e;
          fx_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_4_postFdr_volNode.volume.value = e;
          fx_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_1":
      {
        if (fx_3_fxSend_1_state == "PostEQ") {
          fx_3_fxSend_1_postEq_volNode.volume.value = e;
          fx_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_1.value = e;
        }
        else if (fx_3_fxSend_1_state == "PreEQ") {
          fx_3_fxSend_1_preEq_volNode.volume.value = e;
          fx_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_1_postFdr_volNode.volume.value = e;
          fx_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_2":
      {
        if (fx_3_fxSend_2_state == "PostEQ") {
          fx_3_fxSend_2_postEq_volNode.volume.value = e;
          fx_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_2.value = e;
        }
        else if (fx_3_fxSend_2_state == "PreEQ") {
          fx_3_fxSend_2_preEq_volNode.volume.value = e;
          fx_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_2_postFdr_volNode.volume.value = e;
          fx_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_3":
      {
        if (fx_3_fxSend_3_state == "PostEQ") {
          fx_3_fxSend_3_postEq_volNode.volume.value = e;
          fx_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_3.value = e;
        }
        else if (fx_3_fxSend_3_state == "PreEQ") {
          fx_3_fxSend_3_preEq_volNode.volume.value = e;
          fx_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_3_postFdr_volNode.volume.value = e;
          fx_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_4":
      {
        if (fx_3_fxSend_4_state == "PostEQ") {
          fx_3_fxSend_4_postEq_volNode.volume.value = e;
          fx_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_4.value = e;
        }
        else if (fx_3_fxSend_4_state == "PreEQ") {
          fx_3_fxSend_4_preEq_volNode.volume.value = e;
          fx_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_4_postFdr_volNode.volume.value = e;
          fx_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_1":
      {
        if (fx_4_fxSend_1_state == "PostEQ") {
          fx_4_fxSend_1_postEq_volNode.volume.value = e;
          fx_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_1.value = e;
        }
        else if (fx_4_fxSend_1_state == "PreEQ") {
          fx_4_fxSend_1_preEq_volNode.volume.value = e;
          fx_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_1_postFdr_volNode.volume.value = e;
          fx_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_2":
      {
        if (fx_4_fxSend_2_state == "PostEQ") {
          fx_4_fxSend_2_postEq_volNode.volume.value = e;
          fx_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_2.value = e;
        }
        else if (fx_4_fxSend_2_state == "PreEQ") {
          fx_4_fxSend_2_preEq_volNode.volume.value = e;
          fx_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_2_postFdr_volNode.volume.value = e;
          fx_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_3":
      {
        if (fx_4_fxSend_3_state == "PostEQ") {
          fx_4_fxSend_3_postEq_volNode.volume.value = e;
          fx_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_3.value = e;
        }
        else if (fx_4_fxSend_3_state == "PreEQ") {
          fx_4_fxSend_3_preEq_volNode.volume.value = e;
          fx_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_3_postFdr_volNode.volume.value = e;
          fx_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_4":
      {
        if (fx_4_fxSend_4_state == "PostEQ") {
          fx_4_fxSend_4_postEq_volNode.volume.value = e;
          fx_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_4.value = e;
        }
        else if (fx_4_fxSend_4_state == "PreEQ") {
          fx_4_fxSend_4_preEq_volNode.volume.value = e;
          fx_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_4_postFdr_volNode.volume.value = e;
          fx_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }

    case "fx_1_fxSend_1_volume_rampTo":
      {
        if (fx_1_fxSend_1_state == "PostEQ") {
          fx_1_fxSend_1_postEq_volNode.volume.value = e;
          fx_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_1.value = e;
        }
        else if (fx_1_fxSend_1_state == "PreEQ") {
          fx_1_fxSend_1_preEq_volNode.volume.value = e;
          fx_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_1_postFdr_volNode.volume.value = e;
          fx_1_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_2_volume_rampTo":
      {
        if (fx_1_fxSend_2_state == "PostEQ") {
          fx_1_fxSend_2_postEq_volNode.volume.value = e;
          fx_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_2.value = e;
        }
        else if (fx_1_fxSend_2_state == "PreEQ") {
          fx_1_fxSend_2_preEq_volNode.volume.value = e;
          fx_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_2_postFdr_volNode.volume.value = e;
          fx_1_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_3_volume_rampTo":
      {
        if (fx_1_fxSend_3_state == "PostEQ") {
          fx_1_fxSend_3_postEq_volNode.volume.value = e;
          fx_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_3.value = e;
        }
        else if (fx_1_fxSend_3_state == "PreEQ") {
          fx_1_fxSend_3_preEq_volNode.volume.value = e;
          fx_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_3_postFdr_volNode.volume.value = e;
          fx_1_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_1_fxSend_4_volume_rampTo":
      {
        if (fx_1_fxSend_4_state == "PostEQ") {
          fx_1_fxSend_4_postEq_volNode.volume.value = e;
          fx_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_1_fxSend_4.value = e;
        }
        else if (fx_1_fxSend_4_state == "PreEQ") {
          fx_1_fxSend_4_preEq_volNode.volume.value = e;
          fx_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_1_fxSend_4_postFdr_volNode.volume.value = e;
          fx_1_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_1_volume_rampTo":
      {
        if (fx_2_fxSend_1_state == "PostEQ") {
          fx_2_fxSend_1_postEq_volNode.volume.value = e;
          fx_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_1.value = e;
        }
        else if (fx_2_fxSend_1_state == "PreEQ") {
          fx_2_fxSend_1_preEq_volNode.volume.value = e;
          fx_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_1_postFdr_volNode.volume.value = e;
          fx_2_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_2_volume_rampTo":
      {
        if (fx_2_fxSend_2_state == "PostEQ") {
          fx_2_fxSend_2_postEq_volNode.volume.value = e;
          fx_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_2.value = e;
        }
        else if (fx_2_fxSend_2_state == "PreEQ") {
          fx_2_fxSend_2_preEq_volNode.volume.value = e;
          fx_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_2_postFdr_volNode.volume.value = e;
          fx_2_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_3_volume_rampTo":
      {
        if (fx_2_fxSend_3_state == "PostEQ") {
          fx_2_fxSend_3_postEq_volNode.volume.value = e;
          fx_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_3.value = e;
        }
        else if (fx_2_fxSend_3_state == "PreEQ") {
          fx_2_fxSend_3_preEq_volNode.volume.value = e;
          fx_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_3_postFdr_volNode.volume.value = e;
          fx_2_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_2_fxSend_4_volume_rampTo":
      {
        if (fx_2_fxSend_4_state == "PostEQ") {
          fx_2_fxSend_4_postEq_volNode.volume.value = e;
          fx_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_2_fxSend_4.value = e;
        }
        else if (fx_2_fxSend_4_state == "PreEQ") {
          fx_2_fxSend_4_preEq_volNode.volume.value = e;
          fx_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_2_fxSend_4_postFdr_volNode.volume.value = e;
          fx_2_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_1_volume_rampTo":
      {
        if (fx_3_fxSend_1_state == "PostEQ") {
          fx_3_fxSend_1_postEq_volNode.volume.value = e;
          fx_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_1.value = e;
        }
        else if (fx_3_fxSend_1_state == "PreEQ") {
          fx_3_fxSend_1_preEq_volNode.volume.value = e;
          fx_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_1_postFdr_volNode.volume.value = e;
          fx_3_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_2_volume_rampTo":
      {
        if (fx_3_fxSend_2_state == "PostEQ") {
          fx_3_fxSend_2_postEq_volNode.volume.value = e;
          fx_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_2.value = e;
        }
        else if (fx_3_fxSend_2_state == "PreEQ") {
          fx_3_fxSend_2_preEq_volNode.volume.value = e;
          fx_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_2_postFdr_volNode.volume.value = e;
          fx_3_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_3_volume_rampTo":
      {
        if (fx_3_fxSend_3_state == "PostEQ") {
          fx_3_fxSend_3_postEq_volNode.volume.value = e;
          fx_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_3.value = e;
        }
        else if (fx_3_fxSend_3_state == "PreEQ") {
          fx_3_fxSend_3_preEq_volNode.volume.value = e;
          fx_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_3_postFdr_volNode.volume.value = e;
          fx_3_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_3_fxSend_4_volume_rampTo":
      {
        if (fx_3_fxSend_4_state == "PostEQ") {
          fx_3_fxSend_4_postEq_volNode.volume.value = e;
          fx_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_3_fxSend_4.value = e;
        }
        else if (fx_3_fxSend_4_state == "PreEQ") {
          fx_3_fxSend_4_preEq_volNode.volume.value = e;
          fx_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_3_fxSend_4_postFdr_volNode.volume.value = e;
          fx_3_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_1_volume_rampTo":
      {
        if (fx_4_fxSend_1_state == "PostEQ") {
          fx_4_fxSend_1_postEq_volNode.volume.value = e;
          fx_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_1.value = e;
        }
        else if (fx_4_fxSend_1_state == "PreEQ") {
          fx_4_fxSend_1_preEq_volNode.volume.value = e;
          fx_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_1_postFdr_volNode.volume.value = e;
          fx_4_fxSend_1_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_2_volume_rampTo":
      {
        if (fx_4_fxSend_2_state == "PostEQ") {
          fx_4_fxSend_2_postEq_volNode.volume.value = e;
          fx_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_2.value = e;
        }
        else if (fx_4_fxSend_2_state == "PreEQ") {
          fx_4_fxSend_2_preEq_volNode.volume.value = e;
          fx_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_2_postFdr_volNode.volume.value = e;
          fx_4_fxSend_2_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_3_volume_rampTo":
      {
        if (fx_4_fxSend_3_state == "PostEQ") {
          fx_4_fxSend_3_postEq_volNode.volume.value = e;
          fx_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_3.value = e;
        }
        else if (fx_4_fxSend_3_state == "PreEQ") {
          fx_4_fxSend_3_preEq_volNode.volume.value = e;
          fx_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_3_postFdr_volNode.volume.value = e;
          fx_4_fxSend_3_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    case "fx_4_fxSend_4_volume_rampTo":
      {
        if (fx_4_fxSend_4_state == "PostEQ") {
          fx_4_fxSend_4_postEq_volNode.volume.value = e;
          fx_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
          fx_4_fxSend_4.value = e;
        }
        else if (fx_4_fxSend_4_state == "PreEQ") {
          fx_4_fxSend_4_preEq_volNode.volume.value = e;
          fx_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        else {
          fx_4_fxSend_4_postFdr_volNode.volume.value = e;
          fx_4_fxSend_4_value.innerHTML = Math.round(`${e}`);
        }
        break;
      }
    default: {
      alert("DEFAULT  recieves_player_x_fxSend_x_value_Sets_Volume_value");
      break;
    }
  }// CLOSES SWITCH
}//CLOSES FOO 

function send_state_player_x_background_change(name, value) {
  switch (name) {
    case "channel_1_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            channel_1_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            channel_1_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_1_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            channel_1_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_1_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_1_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            channel_1_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            channel_1_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_1_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            channel_1_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_1_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_1_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            channel_1_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            channel_1_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_1_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            channel_1_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_1_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_1_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            channel_1_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            channel_1_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_1_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            channel_1_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_1_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_1_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_2_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            channel_2_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            channel_2_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_2_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            channel_2_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_2_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_2_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            channel_2_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            channel_2_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_2_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            channel_2_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_2_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_2_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            channel_2_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            channel_2_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_2_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            channel_2_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_2_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_2_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            channel_2_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            channel_2_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_2_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            channel_2_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_2_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_2_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_3_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            channel_3_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            channel_3_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_3_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            channel_3_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_3_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_3_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            channel_3_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            channel_3_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_3_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            channel_3_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_3_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_3_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            channel_3_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            channel_3_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_3_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            channel_3_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_3_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_3_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            channel_3_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            channel_3_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_3_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            channel_3_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_3_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_3_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_4_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            channel_4_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            channel_4_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_4_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            channel_4_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_4_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_4_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            channel_4_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            channel_4_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_4_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            channel_4_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_4_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_4_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            channel_4_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            channel_4_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_4_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            channel_4_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_4_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_4_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            channel_4_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            channel_4_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            channel_4_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            channel_4_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            channel_4_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            channel_4_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_1_fxSend_1":
      {
        alert("fx_1_fxSend_1 \n NO ANDA NADA PARA EVITAR ACOPLE");
      }
    case "fx_1_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            fx_1_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            fx_1_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_1_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            fx_1_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_1_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_1_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            fx_1_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            fx_1_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_1_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            fx_1_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_1_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_1_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            fx_1_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            fx_1_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_1_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            fx_1_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_1_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            fx_1_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_2_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            fx_2_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            fx_2_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_2_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            fx_2_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_2_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_2_fxSend_2":
      {
        alert("fx_2_fxSend_2 \n NO ANDA NADA PARA EVITAR ACOPLE");
      }
    case "fx_2_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            fx_2_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            fx_2_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_2_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            fx_2_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_2_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_2_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            fx_2_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            fx_2_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_2_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            fx_2_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_2_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            fx_2_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_3_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            fx_3_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            fx_3_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_3_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            fx_3_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_3_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_3_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            fx_3_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            fx_3_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_3_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            fx_3_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_3_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_3_fxSend_3":
      {
        alert("fx_3_fxSend_3 \n NO ANDA NADA PARA EVITAR ACOPLE");
      }
    case "fx_3_fxSend_4":
      {
        switch (value) {
          case "PreEQ": {
            fx_3_fxSend_4_pre_EQ_Button.style.backgroundColor = "green";
            fx_3_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_3_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_4_post_fader_Button.style.backgroundColor = "white";
            fx_3_fxSend_4_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_3_fxSend_4_post_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_4_pre_EQ_Button.style.backgroundColor = "white";
            fx_3_fxSend_4_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_4_fxSend_1":
      {
        switch (value) {
          case "PreEQ": {
            fx_4_fxSend_1_pre_EQ_Button.style.backgroundColor = "green";
            fx_4_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_4_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_1_post_fader_Button.style.backgroundColor = "white";
            fx_4_fxSend_1_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_4_fxSend_1_post_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_1_pre_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_1_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_4_fxSend_2":
      {
        switch (value) {
          case "PreEQ": {
            fx_4_fxSend_2_pre_EQ_Button.style.backgroundColor = "green";
            fx_4_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_4_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_2_post_fader_Button.style.backgroundColor = "white";
            fx_4_fxSend_2_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_4_fxSend_2_post_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_2_pre_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_2_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_4_fxSend_3":
      {
        switch (value) {
          case "PreEQ": {
            fx_4_fxSend_3_pre_EQ_Button.style.backgroundColor = "green";
            fx_4_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            break;
          }
          case "PostEQ": {
            fx_4_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_3_post_fader_Button.style.backgroundColor = "white";
            fx_4_fxSend_3_post_EQ_Button.style.backgroundColor = "green";
            break;
          }
          case "PostFdr": {
            fx_4_fxSend_3_post_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_3_pre_EQ_Button.style.backgroundColor = "white";
            fx_4_fxSend_3_post_fader_Button.style.backgroundColor = "green";
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_4_fxSend_4":
      {
        alert("fx_4_fxSend_4 \n NO ANDA NADA PARA EVITAR ACOPLE");
      }
  }//CLOSES  switch (name)
}//CLOSES send_state_channel_1_background_change

function player_x_dynamics_select_unit(name, value) {
  switch (name) {
    case "channel_1":
      {
        switch (value) {
          case "compressor":
            {
              channel_1_dynamics_compressor_div.style.display = "block";
              channel_1_dynamics_gate_div.style.display = "none";
              channel_1_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              channel_1_dynamics_compressor_div.style.display = "none";
              channel_1_dynamics_gate_div.style.display = "block";
              channel_1_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              channel_1_dynamics_compressor_div.style.display = "none";
              channel_1_dynamics_gate_div.style.display = "none";
              channel_1_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) channel_1  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "channel_2":
      {
        switch (value) {
          case "compressor":
            {
              channel_2_dynamics_compressor_div.style.display = "block";
              channel_2_dynamics_gate_div.style.display = "none";
              channel_2_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              channel_2_dynamics_compressor_div.style.display = "none";
              channel_2_dynamics_gate_div.style.display = "block";
              channel_2_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              channel_2_dynamics_compressor_div.style.display = "none";
              channel_2_dynamics_gate_div.style.display = "none";
              channel_2_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) channel_2  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "channel_3":
      {
        switch (value) {
          case "compressor":
            {
              channel_3_dynamics_compressor_div.style.display = "block";
              channel_3_dynamics_gate_div.style.display = "none";
              channel_3_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              channel_3_dynamics_compressor_div.style.display = "none";
              channel_3_dynamics_gate_div.style.display = "block";
              channel_3_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              channel_3_dynamics_compressor_div.style.display = "none";
              channel_3_dynamics_gate_div.style.display = "none";
              channel_3_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) channel_3  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "channel_4":
      {
        switch (value) {
          case "compressor":
            {
              channel_4_dynamics_compressor_div.style.display = "block";
              channel_4_dynamics_gate_div.style.display = "none";
              channel_4_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              channel_4_dynamics_compressor_div.style.display = "none";
              channel_4_dynamics_gate_div.style.display = "block";
              channel_4_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              channel_4_dynamics_compressor_div.style.display = "none";
              channel_4_dynamics_gate_div.style.display = "none";
              channel_4_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) channel_4  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "fx_1":
      {
        switch (value) {
          case "compressor":
            {
              fx_1_dynamics_compressor_div.style.display = "block";
              fx_1_dynamics_gate_div.style.display = "none";
              fx_1_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              fx_1_dynamics_compressor_div.style.display = "none";
              fx_1_dynamics_gate_div.style.display = "block";
              fx_1_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              fx_1_dynamics_compressor_div.style.display = "none";
              fx_1_dynamics_gate_div.style.display = "none";
              fx_1_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) fx_1  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "fx_2":
      {
        switch (value) {
          case "compressor":
            {
              fx_2_dynamics_compressor_div.style.display = "block";
              fx_2_dynamics_gate_div.style.display = "none";
              fx_2_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              fx_2_dynamics_compressor_div.style.display = "none";
              fx_2_dynamics_gate_div.style.display = "block";
              fx_2_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              fx_2_dynamics_compressor_div.style.display = "none";
              fx_2_dynamics_gate_div.style.display = "none";
              fx_2_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) fx_2  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "fx_3":
      {
        switch (value) {
          case "compressor":
            {
              fx_3_dynamics_compressor_div.style.display = "block";
              fx_3_dynamics_gate_div.style.display = "none";
              fx_3_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              fx_3_dynamics_compressor_div.style.display = "none";
              fx_3_dynamics_gate_div.style.display = "block";
              fx_3_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              fx_3_dynamics_compressor_div.style.display = "none";
              fx_3_dynamics_gate_div.style.display = "none";
              fx_3_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) fx_3  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    case "fx_4":
      {
        switch (value) {
          case "compressor":
            {
              fx_4_dynamics_compressor_div.style.display = "block";
              fx_4_dynamics_gate_div.style.display = "none";
              fx_4_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "gate":
            {
              fx_4_dynamics_compressor_div.style.display = "none";
              fx_4_dynamics_gate_div.style.display = "block";
              fx_4_dynamics_limiter_div.style.display = "none";
              break;
            }
          case "limiter":
            {
              fx_4_dynamics_compressor_div.style.display = "none";
              fx_4_dynamics_gate_div.style.display = "none";
              fx_4_dynamics_limiter_div.style.display = "block";
              break;
            }
          default: { alert("DEFAULT  (value) fx_4  player_x_dynamics_select_unit "); break; }
        }
        break;
      }
    default: { alert("DEFAULT (name) player_x_dynamics_select_unit "); break; }
  }
  mixEvent.logIntoListaAction(Tone.now(), name, value);
}

function player_x_dynamics_On_Off(name, value) {
  switch (name) {
    case "channel_1":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (channel_1_compressor_On_Off_Button_State == "off"
                && channel_1_filter_eq_selection == "on") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter.connect(channel_1_dynamics_compressorNode);
                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_1_compressor_On_Off_Button_State == "off"
                && channel_1_filter_eq_selection == "bypass") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode);

                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_1_compressor_On_Off_Button_State == "on"
                && channel_1_filter_eq_selection == "on") {
                channel_1_filter.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter.connect(channel_1_dynamics_compressorNode_Bypass);
                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_1_compressor_On_Off_Button_State == "on"
                && channel_1_filter_eq_selection == "bypass") {
                channel_1_filter_Bypass.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_Bypass.connect(channel_1_dynamics_compressorNode_Bypass);

                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode)
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode_Bypass)
                }
              }
              else if (channel_1_compressor_On_Off_Button_State == "off"
                && channel_1_filter_eq_selection == "eq3") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode);
                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_1_compressor_On_Off_Button_State == "on"
                && channel_1_filter_eq_selection == "eq3") {
                channel_1_filter_eq3.disconnect(channel_1_dynamics_compressorNode);
                channel_1_filter_eq3.connect(channel_1_dynamics_compressorNode_Bypass);
                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }

              else if (channel_1_compressor_On_Off_Button_State == "off"
                && channel_1_filter_eq_selection == "tascam") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode_Bypass);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode);
                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_1_compressor_On_Off_Button_State == "on"
                && channel_1_filter_eq_selection == "tascam") {
                channel_1_tascam_out_Node.disconnect(channel_1_dynamics_compressorNode);
                channel_1_tascam_out_Node.connect(channel_1_dynamics_compressorNode_Bypass);
                if (channel_1_gate_On_Off_Button_State == "on") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode);
                }
                else if (channel_1_gate_On_Off_Button_State == "off") {
                  channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode_Bypass);
                  channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode_Bypass);
                }
              }

              switchState_dynamics("channel_1_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (channel_1_gate_On_Off_Button_State == "off"
                && channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode_Bypass);
                channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode);
                if (channel_1_limiter_On_Off_Button_State == "on") {
                  channel_1_dynamics_gateNode_Bypass.disconnect(channel_1_dynamics_limiterNode);
                  channel_1_dynamics_gateNode.connect(channel_1_dynamics_limiterNode);
                }
                else if (channel_1_limiter_On_Off_Button_State == "off") {
                  channel_1_dynamics_gateNode_Bypass.disconnect(channel_1_dynamics_limiterNode_Bypass);
                  channel_1_dynamics_gateNode.connect(channel_1_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_1_gate_On_Off_Button_State == "off"
                && channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode_Bypass);
                channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode);
                if (channel_1_limiter_On_Off_Button_State == "on") {
                  channel_1_dynamics_gateNode_Bypass.disconnect(channel_1_dynamics_limiterNode);
                  channel_1_dynamics_gateNode.connect(channel_1_dynamics_limiterNode);
                }
                else if (channel_1_limiter_On_Off_Button_State == "off") {
                  channel_1_dynamics_gateNode_Bypass.disconnect(channel_1_dynamics_limiterNode_Bypass);
                  channel_1_dynamics_gateNode.connect(channel_1_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_1_gate_On_Off_Button_State == "on"
                && channel_1_compressor_On_Off_Button_State == "on") {
                channel_1_dynamics_compressorNode.disconnect(channel_1_dynamics_gateNode);
                channel_1_dynamics_compressorNode.connect(channel_1_dynamics_gateNode_Bypass);
                if (channel_1_limiter_On_Off_Button_State == "on") {
                  channel_1_dynamics_gateNode.disconnect(channel_1_dynamics_limiterNode);
                  channel_1_dynamics_gateNode_Bypass.connect(channel_1_dynamics_limiterNode);
                }
                else if (channel_1_limiter_On_Off_Button_State == "off") {
                  channel_1_dynamics_gateNode.disconnect(channel_1_dynamics_limiterNode_Bypass);
                  channel_1_dynamics_gateNode_Bypass.connect(channel_1_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_1_gate_On_Off_Button_State == "on"
                && channel_1_compressor_On_Off_Button_State == "off") {
                channel_1_dynamics_compressorNode_Bypass.disconnect(channel_1_dynamics_gateNode);
                channel_1_dynamics_compressorNode_Bypass.connect(channel_1_dynamics_gateNode_Bypass);

                if (channel_1_limiter_On_Off_Button_State == "on") {
                  channel_1_dynamics_gateNode.disconnect(channel_1_dynamics_limiterNode);
                  channel_1_dynamics_gateNode_Bypass.connect(channel_1_dynamics_limiterNode)
                }
                else if (channel_1_limiter_On_Off_Button_State == "off") {
                  channel_1_dynamics_gateNode.disconnect(channel_1_dynamics_limiterNode_Bypass);
                  channel_1_dynamics_gateNode_Bypass.connect(channel_1_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("channel_1_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (channel_1_limiter_On_Off_Button_State == "off"
                && channel_1_gate_On_Off_Button_State == "on") {
                channel_1_dynamics_gateNode.disconnect(channel_1_dynamics_limiterNode_Bypass);
                channel_1_dynamics_gateNode.connect(channel_1_dynamics_limiterNode);
                channel_1_dynamics_limiterNode_Bypass.disconnect(channel_1_volNode);
                channel_1_dynamics_limiterNode.connect(channel_1_volNode);
              }
              else if (channel_1_limiter_On_Off_Button_State == "off"
                && channel_1_gate_On_Off_Button_State == "off") {
                channel_1_dynamics_gateNode_Bypass.disconnect(channel_1_dynamics_limiterNode_Bypass);
                channel_1_dynamics_gateNode_Bypass.connect(channel_1_dynamics_limiterNode);
                channel_1_dynamics_limiterNode_Bypass.disconnect(channel_1_volNode);
                channel_1_dynamics_limiterNode.connect(channel_1_volNode);
              }
              else if (channel_1_limiter_On_Off_Button_State == "on"
                && channel_1_gate_On_Off_Button_State == "on") {
                channel_1_dynamics_gateNode.disconnect(channel_1_dynamics_limiterNode);
                channel_1_dynamics_gateNode.connect(channel_1_dynamics_limiterNode_Bypass);
                channel_1_dynamics_limiterNode.disconnect(channel_1_volNode);
                channel_1_dynamics_limiterNode_Bypass.connect(channel_1_volNode);
              }
              else if (channel_1_limiter_On_Off_Button_State == "on"
                && channel_1_gate_On_Off_Button_State == "off") {
                channel_1_dynamics_gateNode_Bypass.disconnect(channel_1_dynamics_limiterNode);
                channel_1_dynamics_gateNode_Bypass.connect(channel_1_dynamics_limiterNode_Bypass);
                channel_1_dynamics_limiterNode.disconnect(channel_1_volNode);
                channel_1_dynamics_limiterNode_Bypass.connect(channel_1_volNode);
              }

              switchState_dynamics("channel_1_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) channel_1  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "channel_2":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (channel_2_compressor_On_Off_Button_State == "off"
                && channel_2_filter_eq_selection == "on") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter.connect(channel_2_dynamics_compressorNode);
                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_2_compressor_On_Off_Button_State == "off"
                && channel_2_filter_eq_selection == "bypass") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode);

                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_2_compressor_On_Off_Button_State == "on"
                && channel_2_filter_eq_selection == "on") {
                channel_2_filter.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter.connect(channel_2_dynamics_compressorNode_Bypass);
                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_2_compressor_On_Off_Button_State == "on"
                && channel_2_filter_eq_selection == "bypass") {
                channel_2_filter_Bypass.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_Bypass.connect(channel_2_dynamics_compressorNode_Bypass);

                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode)
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode_Bypass)
                }
              }
              else if (channel_2_compressor_On_Off_Button_State == "off"
                && channel_2_filter_eq_selection == "eq3") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode);
                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_2_compressor_On_Off_Button_State == "on"
                && channel_2_filter_eq_selection == "eq3") {
                channel_2_filter_eq3.disconnect(channel_2_dynamics_compressorNode);
                channel_2_filter_eq3.connect(channel_2_dynamics_compressorNode_Bypass);
                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }

              else if (channel_2_compressor_On_Off_Button_State == "off"
                && channel_2_filter_eq_selection == "tascam") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode_Bypass);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode);
                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_2_compressor_On_Off_Button_State == "on"
                && channel_2_filter_eq_selection == "tascam") {
                channel_2_tascam_out_Node.disconnect(channel_2_dynamics_compressorNode);
                channel_2_tascam_out_Node.connect(channel_2_dynamics_compressorNode_Bypass);
                if (channel_2_gate_On_Off_Button_State == "on") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode);
                }
                else if (channel_2_gate_On_Off_Button_State == "off") {
                  channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode_Bypass);
                  channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode_Bypass);
                }
              }
              switchState_dynamics("channel_2_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (channel_2_gate_On_Off_Button_State == "off"
                && channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode_Bypass);
                channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode);
                if (channel_2_limiter_On_Off_Button_State == "on") {
                  channel_2_dynamics_gateNode_Bypass.disconnect(channel_2_dynamics_limiterNode);
                  channel_2_dynamics_gateNode.connect(channel_2_dynamics_limiterNode);
                }
                else if (channel_2_limiter_On_Off_Button_State == "off") {
                  channel_2_dynamics_gateNode_Bypass.disconnect(channel_2_dynamics_limiterNode_Bypass);
                  channel_2_dynamics_gateNode.connect(channel_2_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_2_gate_On_Off_Button_State == "off"
                && channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode_Bypass);
                channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode);
                if (channel_2_limiter_On_Off_Button_State == "on") {
                  channel_2_dynamics_gateNode_Bypass.disconnect(channel_2_dynamics_limiterNode);
                  channel_2_dynamics_gateNode.connect(channel_2_dynamics_limiterNode);
                }
                else if (channel_2_limiter_On_Off_Button_State == "off") {
                  channel_2_dynamics_gateNode_Bypass.disconnect(channel_2_dynamics_limiterNode_Bypass);
                  channel_2_dynamics_gateNode.connect(channel_2_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_2_gate_On_Off_Button_State == "on"
                && channel_2_compressor_On_Off_Button_State == "on") {
                channel_2_dynamics_compressorNode.disconnect(channel_2_dynamics_gateNode);
                channel_2_dynamics_compressorNode.connect(channel_2_dynamics_gateNode_Bypass);
                if (channel_2_limiter_On_Off_Button_State == "on") {
                  channel_2_dynamics_gateNode.disconnect(channel_2_dynamics_limiterNode);
                  channel_2_dynamics_gateNode_Bypass.connect(channel_2_dynamics_limiterNode);
                }
                else if (channel_2_limiter_On_Off_Button_State == "off") {
                  channel_2_dynamics_gateNode.disconnect(channel_2_dynamics_limiterNode_Bypass);
                  channel_2_dynamics_gateNode_Bypass.connect(channel_2_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_2_gate_On_Off_Button_State == "on"
                && channel_2_compressor_On_Off_Button_State == "off") {
                channel_2_dynamics_compressorNode_Bypass.disconnect(channel_2_dynamics_gateNode);
                channel_2_dynamics_compressorNode_Bypass.connect(channel_2_dynamics_gateNode_Bypass);

                if (channel_2_limiter_On_Off_Button_State == "on") {
                  channel_2_dynamics_gateNode.disconnect(channel_2_dynamics_limiterNode);
                  channel_2_dynamics_gateNode_Bypass.connect(channel_2_dynamics_limiterNode)
                }
                else if (channel_2_limiter_On_Off_Button_State == "off") {
                  channel_2_dynamics_gateNode.disconnect(channel_2_dynamics_limiterNode_Bypass);
                  channel_2_dynamics_gateNode_Bypass.connect(channel_2_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("channel_2_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (channel_2_limiter_On_Off_Button_State == "off"
                && channel_2_gate_On_Off_Button_State == "on") {
                channel_2_dynamics_gateNode.disconnect(channel_2_dynamics_limiterNode_Bypass);
                channel_2_dynamics_gateNode.connect(channel_2_dynamics_limiterNode);
                channel_2_dynamics_limiterNode_Bypass.disconnect(channel_2_volNode);
                channel_2_dynamics_limiterNode.connect(channel_2_volNode);
              }
              else if (channel_2_limiter_On_Off_Button_State == "off"
                && channel_2_gate_On_Off_Button_State == "off") {
                channel_2_dynamics_gateNode_Bypass.disconnect(channel_2_dynamics_limiterNode_Bypass);
                channel_2_dynamics_gateNode_Bypass.connect(channel_2_dynamics_limiterNode);
                channel_2_dynamics_limiterNode_Bypass.disconnect(channel_2_volNode);
                channel_2_dynamics_limiterNode.connect(channel_2_volNode);
              }
              else if (channel_2_limiter_On_Off_Button_State == "on"
                && channel_2_gate_On_Off_Button_State == "on") {
                channel_2_dynamics_gateNode.disconnect(channel_2_dynamics_limiterNode);
                channel_2_dynamics_gateNode.connect(channel_2_dynamics_limiterNode_Bypass);
                channel_2_dynamics_limiterNode.disconnect(channel_2_volNode);
                channel_2_dynamics_limiterNode_Bypass.connect(channel_2_volNode);
              }
              else if (channel_2_limiter_On_Off_Button_State == "on"
                && channel_2_gate_On_Off_Button_State == "off") {
                channel_2_dynamics_gateNode_Bypass.disconnect(channel_2_dynamics_limiterNode);
                channel_2_dynamics_gateNode_Bypass.connect(channel_2_dynamics_limiterNode_Bypass);
                channel_2_dynamics_limiterNode.disconnect(channel_2_volNode);
                channel_2_dynamics_limiterNode_Bypass.connect(channel_2_volNode);
              }

              switchState_dynamics("channel_2_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) channel_2  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "channel_3":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (channel_3_compressor_On_Off_Button_State == "off"
                && channel_3_filter_eq_selection == "on") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter.connect(channel_3_dynamics_compressorNode);
                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_3_compressor_On_Off_Button_State == "off"
                && channel_3_filter_eq_selection == "bypass") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode);

                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_3_compressor_On_Off_Button_State == "on"
                && channel_3_filter_eq_selection == "on") {
                channel_3_filter.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter.connect(channel_3_dynamics_compressorNode_Bypass);
                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_3_compressor_On_Off_Button_State == "on"
                && channel_3_filter_eq_selection == "bypass") {
                channel_3_filter_Bypass.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_Bypass.connect(channel_3_dynamics_compressorNode_Bypass);

                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode)
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode_Bypass)
                }
              }
              else if (channel_3_compressor_On_Off_Button_State == "off"
                && channel_3_filter_eq_selection == "eq3") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode);
                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_3_compressor_On_Off_Button_State == "on"
                && channel_3_filter_eq_selection == "eq3") {
                channel_3_filter_eq3.disconnect(channel_3_dynamics_compressorNode);
                channel_3_filter_eq3.connect(channel_3_dynamics_compressorNode_Bypass);
                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }

              else if (channel_3_compressor_On_Off_Button_State == "off"
                && channel_3_filter_eq_selection == "tascam") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode_Bypass);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode);
                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_3_compressor_On_Off_Button_State == "on"
                && channel_3_filter_eq_selection == "tascam") {
                channel_3_tascam_out_Node.disconnect(channel_3_dynamics_compressorNode);
                channel_3_tascam_out_Node.connect(channel_3_dynamics_compressorNode_Bypass);
                if (channel_3_gate_On_Off_Button_State == "on") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode);
                }
                else if (channel_3_gate_On_Off_Button_State == "off") {
                  channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode_Bypass);
                  channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode_Bypass);
                }
              }

              switchState_dynamics("channel_3_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (channel_3_gate_On_Off_Button_State == "off"
                && channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode_Bypass);
                channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode);
                if (channel_3_limiter_On_Off_Button_State == "on") {
                  channel_3_dynamics_gateNode_Bypass.disconnect(channel_3_dynamics_limiterNode);
                  channel_3_dynamics_gateNode.connect(channel_3_dynamics_limiterNode);
                }
                else if (channel_3_limiter_On_Off_Button_State == "off") {
                  channel_3_dynamics_gateNode_Bypass.disconnect(channel_3_dynamics_limiterNode_Bypass);
                  channel_3_dynamics_gateNode.connect(channel_3_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_3_gate_On_Off_Button_State == "off"
                && channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode_Bypass);
                channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode);
                if (channel_3_limiter_On_Off_Button_State == "on") {
                  channel_3_dynamics_gateNode_Bypass.disconnect(channel_3_dynamics_limiterNode);
                  channel_3_dynamics_gateNode.connect(channel_3_dynamics_limiterNode);
                }
                else if (channel_3_limiter_On_Off_Button_State == "off") {
                  channel_3_dynamics_gateNode_Bypass.disconnect(channel_3_dynamics_limiterNode_Bypass);
                  channel_3_dynamics_gateNode.connect(channel_3_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_3_gate_On_Off_Button_State == "on"
                && channel_3_compressor_On_Off_Button_State == "on") {
                channel_3_dynamics_compressorNode.disconnect(channel_3_dynamics_gateNode);
                channel_3_dynamics_compressorNode.connect(channel_3_dynamics_gateNode_Bypass);
                if (channel_3_limiter_On_Off_Button_State == "on") {
                  channel_3_dynamics_gateNode.disconnect(channel_3_dynamics_limiterNode);
                  channel_3_dynamics_gateNode_Bypass.connect(channel_3_dynamics_limiterNode);
                }
                else if (channel_3_limiter_On_Off_Button_State == "off") {
                  channel_3_dynamics_gateNode.disconnect(channel_3_dynamics_limiterNode_Bypass);
                  channel_3_dynamics_gateNode_Bypass.connect(channel_3_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_3_gate_On_Off_Button_State == "on"
                && channel_3_compressor_On_Off_Button_State == "off") {
                channel_3_dynamics_compressorNode_Bypass.disconnect(channel_3_dynamics_gateNode);
                channel_3_dynamics_compressorNode_Bypass.connect(channel_3_dynamics_gateNode_Bypass);

                if (channel_3_limiter_On_Off_Button_State == "on") {
                  channel_3_dynamics_gateNode.disconnect(channel_3_dynamics_limiterNode);
                  channel_3_dynamics_gateNode_Bypass.connect(channel_3_dynamics_limiterNode)
                }
                else if (channel_3_limiter_On_Off_Button_State == "off") {
                  channel_3_dynamics_gateNode.disconnect(channel_3_dynamics_limiterNode_Bypass);
                  channel_3_dynamics_gateNode_Bypass.connect(channel_3_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("channel_3_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (channel_3_limiter_On_Off_Button_State == "off"
                && channel_3_gate_On_Off_Button_State == "on") {
                channel_3_dynamics_gateNode.disconnect(channel_3_dynamics_limiterNode_Bypass);
                channel_3_dynamics_gateNode.connect(channel_3_dynamics_limiterNode);
                channel_3_dynamics_limiterNode_Bypass.disconnect(channel_3_volNode);
                channel_3_dynamics_limiterNode.connect(channel_3_volNode);
              }
              else if (channel_3_limiter_On_Off_Button_State == "off"
                && channel_3_gate_On_Off_Button_State == "off") {
                channel_3_dynamics_gateNode_Bypass.disconnect(channel_3_dynamics_limiterNode_Bypass);
                channel_3_dynamics_gateNode_Bypass.connect(channel_3_dynamics_limiterNode);
                channel_3_dynamics_limiterNode_Bypass.disconnect(channel_3_volNode);
                channel_3_dynamics_limiterNode.connect(channel_3_volNode);
              }
              else if (channel_3_limiter_On_Off_Button_State == "on"
                && channel_3_gate_On_Off_Button_State == "on") {
                channel_3_dynamics_gateNode.disconnect(channel_3_dynamics_limiterNode);
                channel_3_dynamics_gateNode.connect(channel_3_dynamics_limiterNode_Bypass);
                channel_3_dynamics_limiterNode.disconnect(channel_3_volNode);
                channel_3_dynamics_limiterNode_Bypass.connect(channel_3_volNode);
              }
              else if (channel_3_limiter_On_Off_Button_State == "on"
                && channel_3_gate_On_Off_Button_State == "off") {
                channel_3_dynamics_gateNode_Bypass.disconnect(channel_3_dynamics_limiterNode);
                channel_3_dynamics_gateNode_Bypass.connect(channel_3_dynamics_limiterNode_Bypass);
                channel_3_dynamics_limiterNode.disconnect(channel_3_volNode);
                channel_3_dynamics_limiterNode_Bypass.connect(channel_3_volNode);
              }

              switchState_dynamics("channel_3_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) channel 3  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "channel_4":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (channel_4_compressor_On_Off_Button_State == "off"
                && channel_4_filter_eq_selection == "on") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter.connect(channel_4_dynamics_compressorNode);
                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_4_compressor_On_Off_Button_State == "off"
                && channel_4_filter_eq_selection == "bypass") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode);

                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_4_compressor_On_Off_Button_State == "on"
                && channel_4_filter_eq_selection == "on") {
                channel_4_filter.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter.connect(channel_4_dynamics_compressorNode_Bypass);
                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_4_compressor_On_Off_Button_State == "on"
                && channel_4_filter_eq_selection == "bypass") {
                channel_4_filter_Bypass.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_Bypass.connect(channel_4_dynamics_compressorNode_Bypass);

                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode)
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode_Bypass)
                }
              }
              else if (channel_4_compressor_On_Off_Button_State == "off"
                && channel_4_filter_eq_selection == "eq3") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode);
                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_4_compressor_On_Off_Button_State == "on"
                && channel_4_filter_eq_selection == "eq3") {
                channel_4_filter_eq3.disconnect(channel_4_dynamics_compressorNode);
                channel_4_filter_eq3.connect(channel_4_dynamics_compressorNode_Bypass);
                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }

              else if (channel_4_compressor_On_Off_Button_State == "off"
                && channel_4_filter_eq_selection == "tascam") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode_Bypass);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode);
                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }
              else if (channel_4_compressor_On_Off_Button_State == "on"
                && channel_4_filter_eq_selection == "tascam") {
                channel_4_tascam_out_Node.disconnect(channel_4_dynamics_compressorNode);
                channel_4_tascam_out_Node.connect(channel_4_dynamics_compressorNode_Bypass);
                if (channel_4_gate_On_Off_Button_State == "on") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode);
                }
                else if (channel_4_gate_On_Off_Button_State == "off") {
                  channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode_Bypass);
                  channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode_Bypass);
                }
              }
              switchState_dynamics("channel_4_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (channel_4_gate_On_Off_Button_State == "off"
                && channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode_Bypass);
                channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode);
                if (channel_4_limiter_On_Off_Button_State == "on") {
                  channel_4_dynamics_gateNode_Bypass.disconnect(channel_4_dynamics_limiterNode);
                  channel_4_dynamics_gateNode.connect(channel_4_dynamics_limiterNode);
                }
                else if (channel_4_limiter_On_Off_Button_State == "off") {
                  channel_4_dynamics_gateNode_Bypass.disconnect(channel_4_dynamics_limiterNode_Bypass);
                  channel_4_dynamics_gateNode.connect(channel_4_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_4_gate_On_Off_Button_State == "off"
                && channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode_Bypass);
                channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode);
                if (channel_4_limiter_On_Off_Button_State == "on") {
                  channel_4_dynamics_gateNode_Bypass.disconnect(channel_4_dynamics_limiterNode);
                  channel_4_dynamics_gateNode.connect(channel_4_dynamics_limiterNode);
                }
                else if (channel_4_limiter_On_Off_Button_State == "off") {
                  channel_4_dynamics_gateNode_Bypass.disconnect(channel_4_dynamics_limiterNode_Bypass);
                  channel_4_dynamics_gateNode.connect(channel_4_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_4_gate_On_Off_Button_State == "on"
                && channel_4_compressor_On_Off_Button_State == "on") {
                channel_4_dynamics_compressorNode.disconnect(channel_4_dynamics_gateNode);
                channel_4_dynamics_compressorNode.connect(channel_4_dynamics_gateNode_Bypass);
                if (channel_4_limiter_On_Off_Button_State == "on") {
                  channel_4_dynamics_gateNode.disconnect(channel_4_dynamics_limiterNode);
                  channel_4_dynamics_gateNode_Bypass.connect(channel_4_dynamics_limiterNode);
                }
                else if (channel_4_limiter_On_Off_Button_State == "off") {
                  channel_4_dynamics_gateNode.disconnect(channel_4_dynamics_limiterNode_Bypass);
                  channel_4_dynamics_gateNode_Bypass.connect(channel_4_dynamics_limiterNode_Bypass);
                }
              }
              else if (channel_4_gate_On_Off_Button_State == "on"
                && channel_4_compressor_On_Off_Button_State == "off") {
                channel_4_dynamics_compressorNode_Bypass.disconnect(channel_4_dynamics_gateNode);
                channel_4_dynamics_compressorNode_Bypass.connect(channel_4_dynamics_gateNode_Bypass);

                if (channel_4_limiter_On_Off_Button_State == "on") {
                  channel_4_dynamics_gateNode.disconnect(channel_4_dynamics_limiterNode);
                  channel_4_dynamics_gateNode_Bypass.connect(channel_4_dynamics_limiterNode)
                }
                else if (channel_4_limiter_On_Off_Button_State == "off") {
                  channel_4_dynamics_gateNode.disconnect(channel_4_dynamics_limiterNode_Bypass);
                  channel_4_dynamics_gateNode_Bypass.connect(channel_4_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("channel_4_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (channel_4_limiter_On_Off_Button_State == "off"
                && channel_4_gate_On_Off_Button_State == "on") {
                channel_4_dynamics_gateNode.disconnect(channel_4_dynamics_limiterNode_Bypass);
                channel_4_dynamics_gateNode.connect(channel_4_dynamics_limiterNode);
                channel_4_dynamics_limiterNode_Bypass.disconnect(channel_4_volNode);
                channel_4_dynamics_limiterNode.connect(channel_4_volNode);
              }
              else if (channel_4_limiter_On_Off_Button_State == "off"
                && channel_4_gate_On_Off_Button_State == "off") {
                channel_4_dynamics_gateNode_Bypass.disconnect(channel_4_dynamics_limiterNode_Bypass);
                channel_4_dynamics_gateNode_Bypass.connect(channel_4_dynamics_limiterNode);
                channel_4_dynamics_limiterNode_Bypass.disconnect(channel_4_volNode);
                channel_4_dynamics_limiterNode.connect(channel_4_volNode);
              }
              else if (channel_4_limiter_On_Off_Button_State == "on"
                && channel_4_gate_On_Off_Button_State == "on") {
                channel_4_dynamics_gateNode.disconnect(channel_4_dynamics_limiterNode);
                channel_4_dynamics_gateNode.connect(channel_4_dynamics_limiterNode_Bypass);
                channel_4_dynamics_limiterNode.disconnect(channel_4_volNode);
                channel_4_dynamics_limiterNode_Bypass.connect(channel_4_volNode);
              }
              else if (channel_4_limiter_On_Off_Button_State == "on"
                && channel_4_gate_On_Off_Button_State == "off") {
                channel_4_dynamics_gateNode_Bypass.disconnect(channel_4_dynamics_limiterNode);
                channel_4_dynamics_gateNode_Bypass.connect(channel_4_dynamics_limiterNode_Bypass);
                channel_4_dynamics_limiterNode.disconnect(channel_4_volNode);
                channel_4_dynamics_limiterNode_Bypass.connect(channel_4_volNode);
              }

              switchState_dynamics("channel_4_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) player_1  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "fx_1":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (fx_1_compressor_On_Off_Button_State == "off"
                && fx_1_filter_eq_selection == "on") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter.connect(fx_1_dynamics_compressorNode);
                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_1_compressor_On_Off_Button_State == "off"
                && fx_1_filter_eq_selection == "bypass") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode);

                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_1_compressor_On_Off_Button_State == "on"
                && fx_1_filter_eq_selection == "on") {
                fx_1_filter.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter.connect(fx_1_dynamics_compressorNode_Bypass);
                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_1_compressor_On_Off_Button_State == "on"
                && fx_1_filter_eq_selection == "bypass") {
                fx_1_filter_Bypass.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_Bypass.connect(fx_1_dynamics_compressorNode_Bypass);

                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode)
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode_Bypass)
                }
              }
              else if (fx_1_compressor_On_Off_Button_State == "off"
                && fx_1_filter_eq_selection == "eq3") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode);
                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_1_compressor_On_Off_Button_State == "on"
                && fx_1_filter_eq_selection == "eq3") {
                fx_1_filter_eq3.disconnect(fx_1_dynamics_compressorNode);
                fx_1_filter_eq3.connect(fx_1_dynamics_compressorNode_Bypass);
                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }

              else if (fx_1_compressor_On_Off_Button_State == "off"
                && fx_1_filter_eq_selection == "tascam") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode_Bypass);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode);
                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_1_compressor_On_Off_Button_State == "on"
                && fx_1_filter_eq_selection == "tascam") {
                fx_1_tascam_out_Node.disconnect(fx_1_dynamics_compressorNode);
                fx_1_tascam_out_Node.connect(fx_1_dynamics_compressorNode_Bypass);
                if (fx_1_gate_On_Off_Button_State == "on") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode);
                }
                else if (fx_1_gate_On_Off_Button_State == "off") {
                  fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode_Bypass);
                  fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode_Bypass);
                }
              }

              switchState_dynamics("fx_1_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (fx_1_gate_On_Off_Button_State == "off"
                && fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode_Bypass);
                fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode);
                if (fx_1_limiter_On_Off_Button_State == "on") {
                  fx_1_dynamics_gateNode_Bypass.disconnect(fx_1_dynamics_limiterNode);
                  fx_1_dynamics_gateNode.connect(fx_1_dynamics_limiterNode);
                }
                else if (fx_1_limiter_On_Off_Button_State == "off") {
                  fx_1_dynamics_gateNode_Bypass.disconnect(fx_1_dynamics_limiterNode_Bypass);
                  fx_1_dynamics_gateNode.connect(fx_1_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_1_gate_On_Off_Button_State == "off"
                && fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode_Bypass);
                fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode);
                if (fx_1_limiter_On_Off_Button_State == "on") {
                  fx_1_dynamics_gateNode_Bypass.disconnect(fx_1_dynamics_limiterNode);
                  fx_1_dynamics_gateNode.connect(fx_1_dynamics_limiterNode);
                }
                else if (fx_1_limiter_On_Off_Button_State == "off") {
                  fx_1_dynamics_gateNode_Bypass.disconnect(fx_1_dynamics_limiterNode_Bypass);
                  fx_1_dynamics_gateNode.connect(fx_1_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_1_gate_On_Off_Button_State == "on"
                && fx_1_compressor_On_Off_Button_State == "on") {
                fx_1_dynamics_compressorNode.disconnect(fx_1_dynamics_gateNode);
                fx_1_dynamics_compressorNode.connect(fx_1_dynamics_gateNode_Bypass);
                if (fx_1_limiter_On_Off_Button_State == "on") {
                  fx_1_dynamics_gateNode.disconnect(fx_1_dynamics_limiterNode);
                  fx_1_dynamics_gateNode_Bypass.connect(fx_1_dynamics_limiterNode);
                }
                else if (fx_1_limiter_On_Off_Button_State == "off") {
                  fx_1_dynamics_gateNode.disconnect(fx_1_dynamics_limiterNode_Bypass);
                  fx_1_dynamics_gateNode_Bypass.connect(fx_1_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_1_gate_On_Off_Button_State == "on"
                && fx_1_compressor_On_Off_Button_State == "off") {
                fx_1_dynamics_compressorNode_Bypass.disconnect(fx_1_dynamics_gateNode);
                fx_1_dynamics_compressorNode_Bypass.connect(fx_1_dynamics_gateNode_Bypass);

                if (fx_1_limiter_On_Off_Button_State == "on") {
                  fx_1_dynamics_gateNode.disconnect(fx_1_dynamics_limiterNode);
                  fx_1_dynamics_gateNode_Bypass.connect(fx_1_dynamics_limiterNode)
                }
                else if (fx_1_limiter_On_Off_Button_State == "off") {
                  fx_1_dynamics_gateNode.disconnect(fx_1_dynamics_limiterNode_Bypass);
                  fx_1_dynamics_gateNode_Bypass.connect(fx_1_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("fx_1_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (fx_1_limiter_On_Off_Button_State == "off"
                && fx_1_gate_On_Off_Button_State == "on") {
                fx_1_dynamics_gateNode.disconnect(fx_1_dynamics_limiterNode_Bypass);
                fx_1_dynamics_gateNode.connect(fx_1_dynamics_limiterNode);
                fx_1_dynamics_limiterNode_Bypass.disconnect(fx_1_volNode);
                fx_1_dynamics_limiterNode.connect(fx_1_volNode);
              }
              else if (fx_1_limiter_On_Off_Button_State == "off"
                && fx_1_gate_On_Off_Button_State == "off") {
                fx_1_dynamics_gateNode_Bypass.disconnect(fx_1_dynamics_limiterNode_Bypass);
                fx_1_dynamics_gateNode_Bypass.connect(fx_1_dynamics_limiterNode);
                fx_1_dynamics_limiterNode_Bypass.disconnect(fx_1_volNode);
                fx_1_dynamics_limiterNode.connect(fx_1_volNode);
              }
              else if (fx_1_limiter_On_Off_Button_State == "on"
                && fx_1_gate_On_Off_Button_State == "on") {
                fx_1_dynamics_gateNode.disconnect(fx_1_dynamics_limiterNode);
                fx_1_dynamics_gateNode.connect(fx_1_dynamics_limiterNode_Bypass);
                fx_1_dynamics_limiterNode.disconnect(fx_1_volNode);
                fx_1_dynamics_limiterNode_Bypass.connect(fx_1_volNode);
              }
              else if (fx_1_limiter_On_Off_Button_State == "on"
                && fx_1_gate_On_Off_Button_State == "off") {
                fx_1_dynamics_gateNode_Bypass.disconnect(fx_1_dynamics_limiterNode);
                fx_1_dynamics_gateNode_Bypass.connect(fx_1_dynamics_limiterNode_Bypass);
                fx_1_dynamics_limiterNode.disconnect(fx_1_volNode);
                fx_1_dynamics_limiterNode_Bypass.connect(fx_1_volNode);
              }
              switchState_dynamics("fx_1_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) player_1  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "fx_2":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (fx_2_compressor_On_Off_Button_State == "off"
                && fx_2_filter_eq_selection == "on") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter.connect(fx_2_dynamics_compressorNode);
                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_2_compressor_On_Off_Button_State == "off"
                && fx_2_filter_eq_selection == "bypass") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode);

                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_2_compressor_On_Off_Button_State == "on"
                && fx_2_filter_eq_selection == "on") {
                fx_2_filter.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter.connect(fx_2_dynamics_compressorNode_Bypass);
                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_2_compressor_On_Off_Button_State == "on"
                && fx_2_filter_eq_selection == "bypass") {
                fx_2_filter_Bypass.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_Bypass.connect(fx_2_dynamics_compressorNode_Bypass);

                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode)
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode_Bypass)
                }
              }
              else if (fx_2_compressor_On_Off_Button_State == "off"
                && fx_2_filter_eq_selection == "eq3") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode);
                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_2_compressor_On_Off_Button_State == "on"
                && fx_2_filter_eq_selection == "eq3") {
                fx_2_filter_eq3.disconnect(fx_2_dynamics_compressorNode);
                fx_2_filter_eq3.connect(fx_2_dynamics_compressorNode_Bypass);
                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }

              else if (fx_2_compressor_On_Off_Button_State == "off"
                && fx_2_filter_eq_selection == "tascam") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode_Bypass);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode);
                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_2_compressor_On_Off_Button_State == "on"
                && fx_2_filter_eq_selection == "tascam") {
                fx_2_tascam_out_Node.disconnect(fx_2_dynamics_compressorNode);
                fx_2_tascam_out_Node.connect(fx_2_dynamics_compressorNode_Bypass);
                if (fx_2_gate_On_Off_Button_State == "on") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode);
                }
                else if (fx_2_gate_On_Off_Button_State == "off") {
                  fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode_Bypass);
                  fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode_Bypass);
                }
              }
              switchState_dynamics("fx_2_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (fx_2_gate_On_Off_Button_State == "off"
                && fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode_Bypass);
                fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode);
                if (fx_2_limiter_On_Off_Button_State == "on") {
                  fx_2_dynamics_gateNode_Bypass.disconnect(fx_2_dynamics_limiterNode);
                  fx_2_dynamics_gateNode.connect(fx_2_dynamics_limiterNode);
                }
                else if (fx_2_limiter_On_Off_Button_State == "off") {
                  fx_2_dynamics_gateNode_Bypass.disconnect(fx_2_dynamics_limiterNode_Bypass);
                  fx_2_dynamics_gateNode.connect(fx_2_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_2_gate_On_Off_Button_State == "off"
                && fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode_Bypass);
                fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode);
                if (fx_2_limiter_On_Off_Button_State == "on") {
                  fx_2_dynamics_gateNode_Bypass.disconnect(fx_2_dynamics_limiterNode);
                  fx_2_dynamics_gateNode.connect(fx_2_dynamics_limiterNode);
                }
                else if (fx_2_limiter_On_Off_Button_State == "off") {
                  fx_2_dynamics_gateNode_Bypass.disconnect(fx_2_dynamics_limiterNode_Bypass);
                  fx_2_dynamics_gateNode.connect(fx_2_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_2_gate_On_Off_Button_State == "on"
                && fx_2_compressor_On_Off_Button_State == "on") {
                fx_2_dynamics_compressorNode.disconnect(fx_2_dynamics_gateNode);
                fx_2_dynamics_compressorNode.connect(fx_2_dynamics_gateNode_Bypass);
                if (fx_2_limiter_On_Off_Button_State == "on") {
                  fx_2_dynamics_gateNode.disconnect(fx_2_dynamics_limiterNode);
                  fx_2_dynamics_gateNode_Bypass.connect(fx_2_dynamics_limiterNode);
                }
                else if (fx_2_limiter_On_Off_Button_State == "off") {
                  fx_2_dynamics_gateNode.disconnect(fx_2_dynamics_limiterNode_Bypass);
                  fx_2_dynamics_gateNode_Bypass.connect(fx_2_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_2_gate_On_Off_Button_State == "on"
                && fx_2_compressor_On_Off_Button_State == "off") {
                fx_2_dynamics_compressorNode_Bypass.disconnect(fx_2_dynamics_gateNode);
                fx_2_dynamics_compressorNode_Bypass.connect(fx_2_dynamics_gateNode_Bypass);

                if (fx_2_limiter_On_Off_Button_State == "on") {
                  fx_2_dynamics_gateNode.disconnect(fx_2_dynamics_limiterNode);
                  fx_2_dynamics_gateNode_Bypass.connect(fx_2_dynamics_limiterNode)
                }
                else if (fx_2_limiter_On_Off_Button_State == "off") {
                  fx_2_dynamics_gateNode.disconnect(fx_2_dynamics_limiterNode_Bypass);
                  fx_2_dynamics_gateNode_Bypass.connect(fx_2_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("fx_2_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (fx_2_limiter_On_Off_Button_State == "off"
                && fx_2_gate_On_Off_Button_State == "on") {
                fx_2_dynamics_gateNode.disconnect(fx_2_dynamics_limiterNode_Bypass);
                fx_2_dynamics_gateNode.connect(fx_2_dynamics_limiterNode);
                fx_2_dynamics_limiterNode_Bypass.disconnect(fx_2_volNode);
                fx_2_dynamics_limiterNode.connect(fx_2_volNode);
              }
              else if (fx_2_limiter_On_Off_Button_State == "off"
                && fx_2_gate_On_Off_Button_State == "off") {
                fx_2_dynamics_gateNode_Bypass.disconnect(fx_2_dynamics_limiterNode_Bypass);
                fx_2_dynamics_gateNode_Bypass.connect(fx_2_dynamics_limiterNode);
                fx_2_dynamics_limiterNode_Bypass.disconnect(fx_2_volNode);
                fx_2_dynamics_limiterNode.connect(fx_2_volNode);
              }
              else if (fx_2_limiter_On_Off_Button_State == "on"
                && fx_2_gate_On_Off_Button_State == "on") {
                fx_2_dynamics_gateNode.disconnect(fx_2_dynamics_limiterNode);
                fx_2_dynamics_gateNode.connect(fx_2_dynamics_limiterNode_Bypass);
                fx_2_dynamics_limiterNode.disconnect(fx_2_volNode);
                fx_2_dynamics_limiterNode_Bypass.connect(fx_2_volNode);
              }
              else if (fx_2_limiter_On_Off_Button_State == "on"
                && fx_2_gate_On_Off_Button_State == "off") {
                fx_2_dynamics_gateNode_Bypass.disconnect(fx_2_dynamics_limiterNode);
                fx_2_dynamics_gateNode_Bypass.connect(fx_2_dynamics_limiterNode_Bypass);
                fx_2_dynamics_limiterNode.disconnect(fx_2_volNode);
                fx_2_dynamics_limiterNode_Bypass.connect(fx_2_volNode);
              }

              switchState_dynamics("fx_2_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) fx_2  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "fx_3":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (fx_3_compressor_On_Off_Button_State == "off"
                && fx_3_filter_eq_selection == "on") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter.connect(fx_3_dynamics_compressorNode);
                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_3_compressor_On_Off_Button_State == "off"
                && fx_3_filter_eq_selection == "bypass") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode);

                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_3_compressor_On_Off_Button_State == "on"
                && fx_3_filter_eq_selection == "on") {
                fx_3_filter.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter.connect(fx_3_dynamics_compressorNode_Bypass);
                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_3_compressor_On_Off_Button_State == "on"
                && fx_3_filter_eq_selection == "bypass") {
                fx_3_filter_Bypass.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_Bypass.connect(fx_3_dynamics_compressorNode_Bypass);

                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode)
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode_Bypass)
                }
              }
              else if (fx_3_compressor_On_Off_Button_State == "off"
                && fx_3_filter_eq_selection == "eq3") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode);
                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_3_compressor_On_Off_Button_State == "on"
                && fx_3_filter_eq_selection == "eq3") {
                fx_3_filter_eq3.disconnect(fx_3_dynamics_compressorNode);
                fx_3_filter_eq3.connect(fx_3_dynamics_compressorNode_Bypass);
                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }

              else if (fx_3_compressor_On_Off_Button_State == "off"
                && fx_3_filter_eq_selection == "tascam") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode_Bypass);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode);
                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_3_compressor_On_Off_Button_State == "on"
                && fx_3_filter_eq_selection == "tascam") {
                fx_3_tascam_out_Node.disconnect(fx_3_dynamics_compressorNode);
                fx_3_tascam_out_Node.connect(fx_3_dynamics_compressorNode_Bypass);
                if (fx_3_gate_On_Off_Button_State == "on") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode);
                }
                else if (fx_3_gate_On_Off_Button_State == "off") {
                  fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode_Bypass);
                  fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode_Bypass);
                }
              }

              switchState_dynamics("fx_3_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (fx_3_gate_On_Off_Button_State == "off"
                && fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode_Bypass);
                fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode);
                if (fx_3_limiter_On_Off_Button_State == "on") {
                  fx_3_dynamics_gateNode_Bypass.disconnect(fx_3_dynamics_limiterNode);
                  fx_3_dynamics_gateNode.connect(fx_3_dynamics_limiterNode);
                }
                else if (fx_3_limiter_On_Off_Button_State == "off") {
                  fx_3_dynamics_gateNode_Bypass.disconnect(fx_3_dynamics_limiterNode_Bypass);
                  fx_3_dynamics_gateNode.connect(fx_3_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_3_gate_On_Off_Button_State == "off"
                && fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode_Bypass);
                fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode);
                if (fx_3_limiter_On_Off_Button_State == "on") {
                  fx_3_dynamics_gateNode_Bypass.disconnect(fx_3_dynamics_limiterNode);
                  fx_3_dynamics_gateNode.connect(fx_3_dynamics_limiterNode);
                }
                else if (fx_3_limiter_On_Off_Button_State == "off") {
                  fx_3_dynamics_gateNode_Bypass.disconnect(fx_3_dynamics_limiterNode_Bypass);
                  fx_3_dynamics_gateNode.connect(fx_3_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_3_gate_On_Off_Button_State == "on"
                && fx_3_compressor_On_Off_Button_State == "on") {
                fx_3_dynamics_compressorNode.disconnect(fx_3_dynamics_gateNode);
                fx_3_dynamics_compressorNode.connect(fx_3_dynamics_gateNode_Bypass);
                if (fx_3_limiter_On_Off_Button_State == "on") {
                  fx_3_dynamics_gateNode.disconnect(fx_3_dynamics_limiterNode);
                  fx_3_dynamics_gateNode_Bypass.connect(fx_3_dynamics_limiterNode);
                }
                else if (fx_3_limiter_On_Off_Button_State == "off") {
                  fx_3_dynamics_gateNode.disconnect(fx_3_dynamics_limiterNode_Bypass);
                  fx_3_dynamics_gateNode_Bypass.connect(fx_3_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_3_gate_On_Off_Button_State == "on"
                && fx_3_compressor_On_Off_Button_State == "off") {
                fx_3_dynamics_compressorNode_Bypass.disconnect(fx_3_dynamics_gateNode);
                fx_3_dynamics_compressorNode_Bypass.connect(fx_3_dynamics_gateNode_Bypass);

                if (fx_3_limiter_On_Off_Button_State == "on") {
                  fx_3_dynamics_gateNode.disconnect(fx_3_dynamics_limiterNode);
                  fx_3_dynamics_gateNode_Bypass.connect(fx_3_dynamics_limiterNode)
                }
                else if (fx_3_limiter_On_Off_Button_State == "off") {
                  fx_3_dynamics_gateNode.disconnect(fx_3_dynamics_limiterNode_Bypass);
                  fx_3_dynamics_gateNode_Bypass.connect(fx_3_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("fx_3_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (fx_3_limiter_On_Off_Button_State == "off"
                && fx_3_gate_On_Off_Button_State == "on") {
                fx_3_dynamics_gateNode.disconnect(fx_3_dynamics_limiterNode_Bypass);
                fx_3_dynamics_gateNode.connect(fx_3_dynamics_limiterNode);
                fx_3_dynamics_limiterNode_Bypass.disconnect(fx_3_volNode);
                fx_3_dynamics_limiterNode.connect(fx_3_volNode);
              }
              else if (fx_3_limiter_On_Off_Button_State == "off"
                && fx_3_gate_On_Off_Button_State == "off") {
                fx_3_dynamics_gateNode_Bypass.disconnect(fx_3_dynamics_limiterNode_Bypass);
                fx_3_dynamics_gateNode_Bypass.connect(fx_3_dynamics_limiterNode);
                fx_3_dynamics_limiterNode_Bypass.disconnect(fx_3_volNode);
                fx_3_dynamics_limiterNode.connect(fx_3_volNode);
              }
              else if (fx_3_limiter_On_Off_Button_State == "on"
                && fx_3_gate_On_Off_Button_State == "on") {
                fx_3_dynamics_gateNode.disconnect(fx_3_dynamics_limiterNode);
                fx_3_dynamics_gateNode.connect(fx_3_dynamics_limiterNode_Bypass);
                fx_3_dynamics_limiterNode.disconnect(fx_3_volNode);
                fx_3_dynamics_limiterNode_Bypass.connect(fx_3_volNode);
              }
              else if (fx_3_limiter_On_Off_Button_State == "on"
                && fx_3_gate_On_Off_Button_State == "off") {
                fx_3_dynamics_gateNode_Bypass.disconnect(fx_3_dynamics_limiterNode);
                fx_3_dynamics_gateNode_Bypass.connect(fx_3_dynamics_limiterNode_Bypass);
                fx_3_dynamics_limiterNode.disconnect(fx_3_volNode);
                fx_3_dynamics_limiterNode_Bypass.connect(fx_3_volNode);
              }
              switchState_dynamics("fx_3_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) player_1  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    case "fx_4":
      {
        //ARREGLAR ESTO, SON DEMASIADOS IF
        switch (value) {
          case "compressor":
            {//ON
              if (fx_4_compressor_On_Off_Button_State == "off"
                && fx_4_filter_eq_selection == "on") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter.connect(fx_4_dynamics_compressorNode);
                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_4_compressor_On_Off_Button_State == "off"
                && fx_4_filter_eq_selection == "bypass") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode);

                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_4_compressor_On_Off_Button_State == "on"
                && fx_4_filter_eq_selection == "on") {
                fx_4_filter.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter.connect(fx_4_dynamics_compressorNode_Bypass);
                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_4_compressor_On_Off_Button_State == "on"
                && fx_4_filter_eq_selection == "bypass") {
                fx_4_filter_Bypass.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_Bypass.connect(fx_4_dynamics_compressorNode_Bypass);

                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode)
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode_Bypass)
                }
              }
              else if (fx_4_compressor_On_Off_Button_State == "off"
                && fx_4_filter_eq_selection == "eq3") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode);
                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_4_compressor_On_Off_Button_State == "on"
                && fx_4_filter_eq_selection == "eq3") {
                fx_4_filter_eq3.disconnect(fx_4_dynamics_compressorNode);
                fx_4_filter_eq3.connect(fx_4_dynamics_compressorNode_Bypass);
                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }

              else if (fx_4_compressor_On_Off_Button_State == "off"
                && fx_4_filter_eq_selection == "tascam") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode_Bypass);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode);
                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }
              else if (fx_4_compressor_On_Off_Button_State == "on"
                && fx_4_filter_eq_selection == "tascam") {
                fx_4_tascam_out_Node.disconnect(fx_4_dynamics_compressorNode);
                fx_4_tascam_out_Node.connect(fx_4_dynamics_compressorNode_Bypass);
                if (fx_4_gate_On_Off_Button_State == "on") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode);
                }
                else if (fx_4_gate_On_Off_Button_State == "off") {
                  fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode_Bypass);
                  fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode_Bypass);
                }
              }
              switchState_dynamics("fx_4_compressor_On_Off_Button");
              break;
            }
          case "gate":
            {//ON
              if (fx_4_gate_On_Off_Button_State == "off"
                && fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode_Bypass);
                fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode);
                if (fx_4_limiter_On_Off_Button_State == "on") {
                  fx_4_dynamics_gateNode_Bypass.disconnect(fx_4_dynamics_limiterNode);
                  fx_4_dynamics_gateNode.connect(fx_4_dynamics_limiterNode);
                }
                else if (fx_4_limiter_On_Off_Button_State == "off") {
                  fx_4_dynamics_gateNode_Bypass.disconnect(fx_4_dynamics_limiterNode_Bypass);
                  fx_4_dynamics_gateNode.connect(fx_4_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_4_gate_On_Off_Button_State == "off"
                && fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode_Bypass);
                fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode);
                if (fx_4_limiter_On_Off_Button_State == "on") {
                  fx_4_dynamics_gateNode_Bypass.disconnect(fx_4_dynamics_limiterNode);
                  fx_4_dynamics_gateNode.connect(fx_4_dynamics_limiterNode);
                }
                else if (fx_4_limiter_On_Off_Button_State == "off") {
                  fx_4_dynamics_gateNode_Bypass.disconnect(fx_4_dynamics_limiterNode_Bypass);
                  fx_4_dynamics_gateNode.connect(fx_4_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_4_gate_On_Off_Button_State == "on"
                && fx_4_compressor_On_Off_Button_State == "on") {
                fx_4_dynamics_compressorNode.disconnect(fx_4_dynamics_gateNode);
                fx_4_dynamics_compressorNode.connect(fx_4_dynamics_gateNode_Bypass);
                if (fx_4_limiter_On_Off_Button_State == "on") {
                  fx_4_dynamics_gateNode.disconnect(fx_4_dynamics_limiterNode);
                  fx_4_dynamics_gateNode_Bypass.connect(fx_4_dynamics_limiterNode);
                }
                else if (fx_4_limiter_On_Off_Button_State == "off") {
                  fx_4_dynamics_gateNode.disconnect(fx_4_dynamics_limiterNode_Bypass);
                  fx_4_dynamics_gateNode_Bypass.connect(fx_4_dynamics_limiterNode_Bypass);
                }
              }
              else if (fx_4_gate_On_Off_Button_State == "on"
                && fx_4_compressor_On_Off_Button_State == "off") {
                fx_4_dynamics_compressorNode_Bypass.disconnect(fx_4_dynamics_gateNode);
                fx_4_dynamics_compressorNode_Bypass.connect(fx_4_dynamics_gateNode_Bypass);

                if (fx_4_limiter_On_Off_Button_State == "on") {
                  fx_4_dynamics_gateNode.disconnect(fx_4_dynamics_limiterNode);
                  fx_4_dynamics_gateNode_Bypass.connect(fx_4_dynamics_limiterNode)
                }
                else if (fx_4_limiter_On_Off_Button_State == "off") {
                  fx_4_dynamics_gateNode.disconnect(fx_4_dynamics_limiterNode_Bypass);
                  fx_4_dynamics_gateNode_Bypass.connect(fx_4_dynamics_limiterNode_Bypass)
                }
              }
              switchState_dynamics("fx_4_gate_On_Off_Button");
              break;
            }
          case "limiter":
            {
              if (fx_4_limiter_On_Off_Button_State == "off"
                && fx_4_gate_On_Off_Button_State == "on") {
                fx_4_dynamics_gateNode.disconnect(fx_4_dynamics_limiterNode_Bypass);
                fx_4_dynamics_gateNode.connect(fx_4_dynamics_limiterNode);
                fx_4_dynamics_limiterNode_Bypass.disconnect(fx_4_volNode);
                fx_4_dynamics_limiterNode.connect(fx_4_volNode);
              }
              else if (fx_4_limiter_On_Off_Button_State == "off"
                && fx_4_gate_On_Off_Button_State == "off") {
                fx_4_dynamics_gateNode_Bypass.disconnect(fx_4_dynamics_limiterNode_Bypass);
                fx_4_dynamics_gateNode_Bypass.connect(fx_4_dynamics_limiterNode);
                fx_4_dynamics_limiterNode_Bypass.disconnect(fx_4_volNode);
                fx_4_dynamics_limiterNode.connect(fx_4_volNode);
              }
              else if (fx_4_limiter_On_Off_Button_State == "on"
                && fx_4_gate_On_Off_Button_State == "on") {
                fx_4_dynamics_gateNode.disconnect(fx_4_dynamics_limiterNode);
                fx_4_dynamics_gateNode.connect(fx_4_dynamics_limiterNode_Bypass);
                fx_4_dynamics_limiterNode.disconnect(fx_4_volNode);
                fx_4_dynamics_limiterNode_Bypass.connect(fx_4_volNode);
              }
              else if (fx_4_limiter_On_Off_Button_State == "on"
                && fx_4_gate_On_Off_Button_State == "off") {
                fx_4_dynamics_gateNode_Bypass.disconnect(fx_4_dynamics_limiterNode);
                fx_4_dynamics_gateNode_Bypass.connect(fx_4_dynamics_limiterNode_Bypass);
                fx_4_dynamics_limiterNode.disconnect(fx_4_volNode);
                fx_4_dynamics_limiterNode_Bypass.connect(fx_4_volNode);
              }
              switchState_dynamics("fx_4_limiter_On_Off_Button");
              break;
            }
          default: { alert("DEFAULT switch(value) player_1  player_x_dynamics_On_Off "); break; }
        }
        break;
      }
    default: { alert("DEFAULT switch(name) player_1  player_x_dynamics_On_Off "); break; }
  }
}

function hide_all_EQ_divs(value) {
  switch (value) {
    case "1":
      {
        channel_1_tascam_424_controls_div.style.display = "none";
        channel_1_peaking_controls_div.style.display = "none";
        channel_1_allpass_controls_div.style.display = "none";
        channel_1_eq3_controls_div.style.display = "none";
        channel_1_shelf_controls_div.style.display = "none";
        channel_1_empty_controls_div.style.display = "none";
        channel_1_bypass_controls_div.style.display = "none";
        break;
      }
    case "2":
      {
        channel_2_tascam_424_controls_div.style.display = "none";
        channel_2_peaking_controls_div.style.display = "none";
        channel_2_allpass_controls_div.style.display = "none";
        channel_2_eq3_controls_div.style.display = "none";
        channel_2_shelf_controls_div.style.display = "none";
        channel_2_empty_controls_div.style.display = "none";
        channel_2_bypass_controls_div.style.display = "none";
        break;
      }
    case "3":
      {
        channel_3_tascam_424_controls_div.style.display = "none";
        channel_3_peaking_controls_div.style.display = "none";
        channel_3_allpass_controls_div.style.display = "none";
        channel_3_eq3_controls_div.style.display = "none";
        channel_3_shelf_controls_div.style.display = "none";
        channel_3_empty_controls_div.style.display = "none";
        channel_3_bypass_controls_div.style.display = "none";
        break;
      }
    case "4":
      {
        channel_4_tascam_424_controls_div.style.display = "none";
        channel_4_peaking_controls_div.style.display = "none";
        channel_4_allpass_controls_div.style.display = "none";
        channel_4_eq3_controls_div.style.display = "none";
        channel_4_shelf_controls_div.style.display = "none";
        channel_4_empty_controls_div.style.display = "none";
        channel_4_bypass_controls_div.style.display = "none";
        break;
      }
    case "fx_1":
      {
        fx_1_tascam_424_controls_div.style.display = "none";
        fx_1_peaking_controls_div.style.display = "none";
        fx_1_allpass_controls_div.style.display = "none";
        fx_1_eq3_controls_div.style.display = "none";
        fx_1_shelf_controls_div.style.display = "none";
        fx_1_empty_controls_div.style.display = "none";
        fx_1_bypass_controls_div.style.display = "none";
        break;
      }
    case "fx_2":
      {
        fx_2_tascam_424_controls_div.style.display = "none";
        fx_2_peaking_controls_div.style.display = "none";
        fx_2_allpass_controls_div.style.display = "none";
        fx_2_eq3_controls_div.style.display = "none";
        fx_2_shelf_controls_div.style.display = "none";
        fx_2_empty_controls_div.style.display = "none";
        fx_2_bypass_controls_div.style.display = "none";
        break;
      }
    case "fx_3":
      {
        fx_3_tascam_424_controls_div.style.display = "none";
        fx_3_peaking_controls_div.style.display = "none";
        fx_3_allpass_controls_div.style.display = "none";
        fx_3_eq3_controls_div.style.display = "none";
        fx_3_shelf_controls_div.style.display = "none";
        fx_3_empty_controls_div.style.display = "none";
        fx_3_bypass_controls_div.style.display = "none";
        break;
      }
    case "fx_4":
      {
        fx_4_tascam_424_controls_div.style.display = "none";
        fx_4_peaking_controls_div.style.display = "none";
        fx_4_allpass_controls_div.style.display = "none";
        fx_4_eq3_controls_div.style.display = "none";
        fx_4_shelf_controls_div.style.display = "none";
        fx_4_empty_controls_div.style.display = "none";
        fx_4_bypass_controls_div.style.display = "none";
        break;
      }
    default: { break; }
  }
}

function in_outs(element, text) {
  console.log(text);
  console.log(text + " in: " + element.numberOfInputs);
  console.log(text + " out: " + element.numberOfOutputs);
  console.log(text + " output: " + element.output);
}

function callbackLoaded(songNumber, playerNumber) {
  switch (playerNumber) {

    case "1": {
      player_1_songName.innerHTML = array_Canciones[songNumber - 1].title;
      break;
    }
    case "2": {
      player_2_songName.innerHTML = array_Canciones[songNumber - 1].title;
      break;
    }
    case "3": {
      player_3_songName.innerHTML = array_Canciones[songNumber - 1].title;
      break;
    }
    case "4": {
      player_4_songName.innerHTML = array_Canciones[songNumber - 1].title;
      break;
    }
    default: { alert("DEFAULT switch(playerNumber)") }
  }
}

function consoleClear() {
  console.clear();
}

function conPrint(data1, data2) {
  console.clear();
  console.log(data1 + ": " + data2);
}

function playsTestSynth() {
  //soundClips_1.removeChild();
  //parentElement.removeChild(elementToRemove);
  //clipContainer_fx_1_distortion.remove();
  //elementToRemove.remove();
  //To replace an element to the HTML DOM, use the replaceChild() method:
}

async function CustomizedButton() {
  //ACORDE
  //fmSynth_1.triggerAttackRelease(["C4", "E4", "A4"], "2n");

  // create two monophonic synths
  //const synthA = new Tone.FMSynth().toDestination();
  //const synthB = new Tone.AMSynth().toDestination();
  //play a note every quarter-note
  const loopA = new Tone.Loop(time => {
    //duoSynth_2.triggerAttackRelease("C3", "8n", time);
  }, "4n").start(0);
  //play another note every off quarter-note, by starting it "8n"
  const loopB = new Tone.Loop(time => {
    //noiseSynth_1.triggerAttackRelease("G3", "8n", time);
  }, "4n").start("8n");

  muestraLista();

  // the loops start when the Transport is started
  Tone.Transport.start()
  // ramp up to 800 bpm over 10 seconds
  //Tone.Transport.bpm.rampTo(800, 10);
  /*
  const PolySynth= new Tone.PolySynth(Tone.Synth).toDestination();
  const nowPoly = Tone.now()
  PolySynth.triggerAttack("D4", nowPoly);
  PolySynth.triggerAttack("F4", nowPoly + 0.5);
  PolySynth.triggerAttack("A4", nowPoly + 1);
  PolySynth.triggerAttack("C5", nowPoly + 1.5);
  PolySynth.triggerAttack("E5", nowPoly + 2);
  PolySynth.triggerRelease(["D4", "F4", "A4", "C5", "E5"], nowPoly + 4);
  
  const sampler = new Tone.Sampler({
    urls: {
      "C4": "C4.mp3",
      "D#4": "Ds4.mp3",
      "F#4": "Fs4.mp3",
      "A4": "A4.mp3",
    },
    release: 1,
    baseUrl: "https://tonejs.github.io/audio/salamander/",
  }).toDestination();
  
  Tone.loaded().then(() => {
    sampler.triggerAttackRelease(["Eb4", "G4", "Bb4"], 4);
  })
  
  const osc = new Tone.Oscillator().toDestination();
  // start at "C4"
  osc.frequency.value = "C4";
  // ramp to "C2" over 2 seconds
  osc.frequency.rampTo("C2", 2);
  // start the oscillator for 2 seconds
  osc.start().stop("+3");
  */

  /*
  amSynth_1.volume.value = -2;
  console.log("SYNTH PLAY amSynth_1");
  //Tone.Transport.loopStart = 0;
  //Tone.Transport.loopEnd = 1;
  Tone.Transport.bpm = 230;
  Tone.Transport.start();
  */
}

function TransportSTOP() {
  //alert("Tone.Transport.state: " + Tone.Transport.state);
  //Tone.Transport.stop();

  //scramble("player_1");

  if (Tone.Transport.state == "stopped") {
    const bassline = [
      { 'time': '0:0', 'note': 'A1', 'duration': '0:2' },
      { 'time': '0:2', 'note': 'F1', 'duration': '0:2' },
      { 'time': '1:2', 'note': 'D1', 'duration': '1:1' },
      { 'time': '2:1', 'note': 'D0', 'duration': '0:1' },
/*       { 'time': '2:2', 'note': 'D0', 'duration': '0:1' },
    */  { 'time': '2:3', 'note': 'F1', 'duration': '1:0' },
    ];
    const bassPart = new Tone.Part(function (time, note) {
      Synth_1.triggerAttackRelease(note.note, note.duration, time);
    }, bassline).start(0);
    Tone.Transport.start();
  }
  else {
    const bassline = [
      { 'time': '0:0', 'note': 'A1', 'duration': '0:2' },
      { 'time': '0:2', 'note': 'F1', 'duration': '0:2' },
      { 'time': '1:2', 'note': 'D2', 'duration': '0:2' },
      { 'time': '2:3', 'note': 'F2', 'duration': '0:5' },
    ];
    const bassPart = new Tone.Part(function (time, note) {
      fmSynth_1.triggerAttackRelease(note.note, note.duration, time);
    }, bassline).start();
  }
}
/**/
function Sinte() {
  /*
    let event2 = new MouseEvent("click", {
      bubbles: true,
      cancelable: true,
    });
  
    player_4_playButton.dispatchEvent(event2);
  /**/
  player_test_Node.volume.value = -18;
  player_test_Node.connect(TESTfx_1_filter);
  //  player_test_Node.connect(fx_1_dynamics_compressorNode);
  //  player_test_Node.connect(fx_1_dynamics_gateNode);
  //player_test_Node.connect(fx_1_dynamics_limiterNode);

  //player_test_Node.connect(fx_1_panNode);
  //player_test_Node.connect(fx_1_filter_Bypass);
  //player_test_Node.connect(fx_1_filter);
  //player_test_Node.connect(fx_1_filter_eq3);
  //fx_1_filter_eq3.connect(Tone.Destination);
  //fx_1_filter_eq3.connect(fx_1_volNode);
  //player_test_Node.connect(fx_1_tascam_in_Node);
  //player_test_Node.fan(fx_1_eq3_meter);
  //player_test_Node.connect(fx_1_dynamics_compressorNode_Bypass);
  //player_test_Node.connect(fx_1_pingpong_Node);
  //console.log("fx_1_volNode.volume.value: " + fx_1_volNode.volume.value)

  player_test_Node.loop = true;
  if (!player_test_Node.loaded) {
    console.log("player_test_Node: NOT LOADED")
  }
  else {
    player_test_Node.start();
  }
}

function changes_fx_name(channel, effecttype) {
  switch (channel) {
    case "FX1": {
      channel_1_fxSend_1_text.innerHTML =
        channel_2_fxSend_1_text.innerHTML =
        channel_3_fxSend_1_text.innerHTML =
        channel_4_fxSend_1_text.innerHTML =
        fx_1_fxSend_1_text.innerHTML =
        fx_2_fxSend_1_text.innerHTML =
        fx_3_fxSend_1_text.innerHTML =
        fx_4_fxSend_1_text.innerHTML = effecttype;
      break;
    }
    case "FX2": {
      channel_2_fxSend_2_text.innerHTML =
        channel_3_fxSend_2_text.innerHTML =
        channel_4_fxSend_2_text.innerHTML =
        fx_1_fxSend_2_text.innerHTML =
        fx_2_fxSend_2_text.innerHTML =
        fx_3_fxSend_2_text.innerHTML =
        fx_4_fxSend_2_text.innerHTML =
        channel_1_fxSend_2_text.innerHTML = effecttype;
      break;
    }
    case "FX3": {
      channel_1_fxSend_3_text.innerHTML =
        channel_2_fxSend_3_text.innerHTML =
        channel_3_fxSend_3_text.innerHTML =
        channel_4_fxSend_3_text.innerHTML =
        fx_1_fxSend_3_text.innerHTML =
        fx_2_fxSend_3_text.innerHTML =
        fx_3_fxSend_3_text.innerHTML =
        fx_4_fxSend_3_text.innerHTML = effecttype;
      break;
    }
    case "FX4": {
      channel_1_fxSend_4_text.innerHTML =
        channel_2_fxSend_4_text.innerHTML =
        channel_3_fxSend_4_text.innerHTML =
        channel_4_fxSend_4_text.innerHTML =
        fx_1_fxSend_4_text.innerHTML =
        fx_2_fxSend_4_text.innerHTML =
        fx_3_fxSend_4_text.innerHTML =
        fx_4_fxSend_4_text.innerHTML = effecttype;
      break;
    }
    default: { break; }
  }
}

function removes_previous_effect(patch) {
  switch (patch) {
    case "fx_1_autofilter": {
      fx_1_AutoFilter_Node.disconnect(fxReturn_1_fader);
      fx_1_autofilter_div.style.display = "none";
      break;
    }
    case "fx_1_autopanner": {
      fx_1_AutoPanner_Node.disconnect(fxReturn_1_fader);
      fx_1_autopanner_div.style.display = "none";
      break;
    }
    case "fx_1_autowah": {
      fx_1_AutoWah_Node.disconnect(fxReturn_1_fader);
      fx_1_autowah_div.style.display = "none";
      break;
    }
    case "fx_1_bitCrusher": {
      // fx_1_bitCrusher.disconnect(fxReturn_1_fader);
      fx_1_bitCrusher_div.style.display = "none";
      break;
    }
    case "fx_1_chebyshev": {
      fx_1_Chebyshev_Node.disconnect(fxReturn_1_fader);
      fx_1_Chebyshev_div.style.display = "none";
      break;
    }
    case "fx_1_chorus": {
      fx_1_chorus_Node.disconnect(fxReturn_1_fader);
      fx_1_chorus_div.style.display = "none";
      break;
    }
    case "fx_1_Distortion": {
      fx_1_distortion_Node.disconnect(fxReturn_1_fader);
      fx_1_distortion_div.style.display = "none";
      break;
    }
    case "fx_1_Feedback": {
      fx_1_feedback_Node.disconnect(fxReturn_1_fader);
      fx_1_feedback_div.style.display = "none";
      break;
    }
    case "fx_1_frequencyShifter": {
      fx_1_FrequencyShifter_Node.disconnect(fxReturn_1_fader);
      fx_1_frequencyShifter_div.style.display = "none";
      break;
    }
    case "fx_1_phaser": {
      fx_1_phaser_Node.disconnect(fxReturn_1_fader);
      fx_1_phaser_div.style.display = "none";
      break;
    }
    case "fx_1_pingpong": {
      fx_1_pingpong_Node.disconnect(fxReturn_1_fader);
      fx_1_pingpong_div.style.display = "none";
      break;
    }
    case "fx_1_pitchshift": {
      fx_1_pitchshift_Node.disconnect(fxReturn_1_fader);
      fx_1_pitchshift_div.style.display = "none";
      break;
    }
    case "fx_1_reverb": {
      fx_1_reverb_Node.disconnect(fxReturn_1_fader);
      fx_1_reverb_div.style.display = "none";
      break;
    }
    case "fx_1_stereoWidener": {
      fx_1_StereoWidener_Node.disconnect(fxReturn_1_fader);
      fx_1_StereoWidener_div.style.display = "none";
      break;
    }
    case "fx_1_tremolo": {
      fx_1_tremolo_Node.disconnect(fxReturn_1_fader);
      fx_1_tremolo_div.style.display = "none";
      break;
    }
    case "fx_1_vibrato": {
      fx_1_vibrato_Node.disconnect(fxReturn_1_fader);
      fx_1_vibrato_div.style.display = "none";
      break;
    }
    case "fx_2_Distortion": {
      fx_2_distortion_Node.disconnect(fxReturn_2_fader);
      fx_2_distortion_div.style.display = "none";
      break;
    }
    case "fx_2_Feedback": {
      fx_2_feedback_Node.disconnect(fxReturn_2_fader);
      fx_2_feedback_div.style.display = "none";
      break;
    }
    case "fx_2_phaser": {
      fx_2_phaser_Node.disconnect(fxReturn_2_fader);
      fx_2_phaser_div.style.display = "none";
      break;
    }
    case "fx_2_pingpong": {
      fx_2_pingpong_Node.disconnect(fxReturn_2_fader);
      fx_2_pingpong_div.style.display = "none";
      break;
    }
    case "fx_2_pitchshift": {
      fx_2_pitchshift_Node.disconnect(fxReturn_2_fader);
      fx_2_pitchshift_div.style.display = "none";
      break;
    }
    case "fx_2_reverb": {
      fx_2_reverb_Node.disconnect(fxReturn_2_fader);
      fx_2_reverb_div.style.display = "none";
      break;
    }
    case "fx_3_chorus": {
      fx_3_chorus_Node.disconnect(fxReturn_3_fader);
      fx_3_chorus_div.style.display = "none";
      break;
    }
    case "fx_3_Feedback": {
      fx_3_feedback_Node.disconnect(fxReturn_3_fader);
      fx_3_feedback_div.style.display = "none";
      break;
    }
    case "fx_3_frequencyShifter": {
      fx_3_FrequencyShifter_Node.disconnect(fxReturn_3_fader);
      fx_3_frequencyShifter_div.style.display = "none";
      break;
    }
    case "fx_3_pingpong": {
      fx_3_pingpong_Node.disconnect(fxReturn_3_fader);
      fx_3_pingpong_div.style.display = "none";
      break;
    }
    case "fx_3_pitchshift": {
      fx_3_pitchshift_Node.disconnect(fxReturn_3_fader);
      fx_3_pitchshift_div.style.display = "none";
      break;
    }
    case "fx_3_reverb": {
      fx_3_reverb_Node.disconnect(fxReturn_3_fader);
      fx_3_reverb_div.style.display = "none";
      break;
    }
    case "fx_4_chorus": {
      fx_4_chorus_Node.disconnect(fxReturn_4_fader);
      fx_4_chorus_div.style.display = "none";
      break;
    }
    case "fx_4_Feedback": {
      fx_4_feedback_Node.disconnect(fxReturn_4_fader);
      fx_4_feedback_div.style.display = "none";
      break;
    }
    case "fx_4_frequencyShifter": {
      fx_4_FrequencyShifter_Node.disconnect(fxReturn_4_fader);
      fx_4_frequencyShifter_div.style.display = "none";
      break;
    }
    case "fx_4_phaser": {
      fx_4_phaser_Node.disconnect(fxReturn_4_fader);
      fx_4_phaser_div.style.display = "none";
      break;
    }
    case "fx_4_pingpong": {
      fx_4_pingpong_Node.disconnect(fxReturn_4_fader);
      fx_4_pingpong_div.style.display = "none";
      break;
    }
    case "fx_4_reverb": {
      fx_4_reverb_Node.disconnect(fxReturn_4_fader);
      fx_4_reverb_div.style.display = "none";
      break;
    }
    default: { break; }
  }
}

function removes_previous_source(source) {
  switch (source) {
    case "source_1": {
      switch (source_1_actual_patch) {
        case "empty": {
          empty_1_div.style.display = "none";
          break;
        }
        case "noiseSynth": {
          noiseSynth_1.disconnect(channel_1_panNode);
          noiseSynth_1_div.style.display = "none";
          break;
        }
        case "noise": {
          noise_1_Node.disconnect(channel_1_panNode);
          noise_1_div.style.display = "none";
          break;
        }
        case "player": {
          player_1_Node.disconnect(channel_1_panNode);
          player_1_div.style.display = "none";
          break;
        }
        case "grainPlayer": {
          grainPlayer_1_Node.disconnect(channel_1_panNode);
          grainPlayer_1_div.style.display = "none";
          break;
        }
        default: { break; }
      }
      break;
    }
    case "source_2": {
      switch (source_2_actual_patch) {
        case "empty": {
          empty_2_div.style.display = "none";
          break;
        }
        case "noiseSynth": {
          noiseSynth_2.disconnect(channel_2_panNode);
          noiseSynth_2_div.style.display = "none";
          break;
        }
        case "noise": {
          noise_2_Node.disconnect(channel_2_panNode);
          noise_2_div.style.display = "none";
          break;
        }
        case "player": {
          player_2_Node.disconnect(channel_2_panNode);
          player_2_div.style.display = "none";
          break;
        }
        case "grainPlayer": {
          grainPlayer_2_Node.disconnect(channel_2_panNode);
          grainPlayer_2_div.style.display = "none";
          break;
        }
        default: { break; }
      }
      break;
    }
    case "source_3": {
      switch (source_3_actual_patch) {
        case "empty": {
          empty_3_div.style.display = "none";
          break;
        }
        case "noiseSynth": {
          noiseSynth_3.disconnect(channel_3_panNode);
          noiseSynth_3_div.style.display = "none";
          break;
        }
        case "noise": {
          noise_3_Node.disconnect(channel_3_panNode);
          noise_3_div.style.display = "none";
          break;
        }
        case "player": {
          player_3_Node.disconnect(channel_3_panNode);
          player_3_div.style.display = "none";
          break;
        }
        case "grainPlayer": {
          grainPlayer_3_Node.disconnect(channel_3_panNode);
          grainPlayer_3_div.style.display = "none";
          break;
        }
        default: { break; }
      }
      break;
    }
    case "source_4": {
      switch (source_4_actual_patch) {
        case "empty": {
          empty_4_div.style.display = "none";
          break;
        }
        case "noiseSynth": {
          noiseSynth_4.disconnect(channel_4_panNode);
          noiseSynth_4_div.style.display = "none";
          break;
        }
        case "noise": {
          noise_4_Node.disconnect(channel_4_panNode);
          noise_4_div.style.display = "none";
          break;
        }
        case "player": {
          player_4_Node.disconnect(channel_4_panNode);
          player_4_div.style.display = "none";
          break;
        }
        case "grainPlayer": {
          grainPlayer_4_Node.disconnect(channel_4_panNode);
          grainPlayer_4_div.style.display = "none";
          break;
        }
        default: { break; }
      }
      break;
    }
    default: {
      alert("removes_previous_source DEFAULT");
    }
  }
}

function sets_New_FX(channel, effecttype) {
  switch (channel) {
    case "FX1": {
      removes_previous_effect(fx_1_actual_patch);
      switch (effecttype) {
        case "AutoFilter":
          {
            fx_1_AutoFilter_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_AutoFilter_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_AutoFilter_Node);

            fx_1_autofilter_div.style.display = "block";
            fx_1_actual_patch = "fx_1_autofilter";
            break;
          }
        case "AutoPanner":  //NO FUNCA
          {
            fx_1_AutoPanner_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_AutoPanner_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_AutoPanner_Node);

            fx_1_actual_patch = "fx_1_autopanner";
            fx_1_autopanner_div.style.display = "block";
            break;
          }
        case "AutoWah":
          {
            fx_1_AutoWah_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_AutoWah_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_AutoWah_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_AutoWah_Node);

            fx_1_actual_patch = "fx_1_autowah";
            fx_1_autowah_div.style.display = "block";
            break;
          }
        case "BitCrusher":
          {
            /*
            fx_1_bitCrusher_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_bitCrusher_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_bitCrusher_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_bitCrusher_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_bitCrusher_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_bitCrusher_Node);
*/
            fx_1_actual_patch = "fx_1_bitCrusher";
            fx_1_bitCrusher_div.style.display = "block";
            break;
          }
        case "Chebyshev":
          {
            fx_1_Chebyshev_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_Chebyshev_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_Chebyshev_Node);

            fx_1_actual_patch = "fx_1_chebyshev";
            fx_1_Chebyshev_div.style.display = "block";
            break;
          }
        case "Chorus":
          {
            fx_1_chorus_Node.connect(fxReturn_1_fader);

            channel_1_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_chorus_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_chorus_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_chorus_Node);

            fx_1_actual_patch = "fx_1_chorus";
            fx_1_chorus_div.style.display = "block";
            break;
          }
        case "Distortion":
          {
            fx_1_distortion_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_distortion_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_distortion_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_distortion_Node);

            fx_1_actual_patch = "fx_1_Distortion";
            fx_1_distortion_div.style.display = "block";
            break;
          }
        case "FeedbackDelay":
          {
            fx_1_feedback_Node.connect(fxReturn_1_fader);

            channel_1_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_feedback_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_feedback_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_feedback_Node);

            fx_1_feedback_div.style.display = "block";
            fx_1_actual_patch = "fx_1_Feedback";
            break;
          }
        case "FrequencyShifter":
          {
            fx_1_FrequencyShifter_Node.connect(fxReturn_1_fader);

            channel_1_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_FrequencyShifter_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_FrequencyShifter_Node);

            fx_1_actual_patch = "fx_1_frequencyShifter";
            fx_1_frequencyShifter_div.style.display = "block";
            break;
          }
        case "Phaser":
          {
            fx_1_phaser_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_phaser_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_phaser_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_phaser_Node);

            fx_1_actual_patch = "fx_1_phaser";
            fx_1_phaser_div.style.display = "block";
            break;
          }
        case "PingPongDelay":
          {
            fx_1_pingpong_Node.connect(fxReturn_1_fader);

            channel_1_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_pingpong_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_pingpong_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_pingpong_Node);

            fx_1_actual_patch = "fx_1_pingpong";
            fx_1_pingpong_div.style.display = "block";

            break;
          }
        case "PitchShift":
          {
            fx_1_pitchshift_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_pitchshift_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_pitchshift_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_pitchshift_Node);


            fx_1_actual_patch = "fx_1_pitchshift";
            fx_1_pitchshift_div.style.display = "block";
            break;
          }
        case "Reverb":
          {
            fx_1_reverb_Node.connect(fxReturn_1_fader);

            channel_1_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_reverb_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_reverb_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_reverb_Node);

            fx_1_actual_patch = "fx_1_reverb";
            fx_1_reverb_div.style.display = "block";
            break;
          }
        case "Tremolo":
          {
            fx_1_tremolo_Node.connect(fxReturn_1_fader);

            channel_1_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            fx_1_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_tremolo_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_tremolo_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_tremolo_Node);

            fx_1_actual_patch = "fx_1_tremolo";
            fx_1_tremolo_div.style.display = "block";
            break;
          }
        case "Vibrato":
          {
            fx_1_vibrato_Node.connect(fxReturn_1_fader);
            channel_1_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);


            fx_1_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_1_vibrato_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_1_vibrato_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_1_vibrato_Node);

            fx_1_actual_patch = "fx_1_vibrato";
            fx_1_vibrato_div.style.display = "block";
            break;
          }
        default: { alert("default fx_1_select"); break; }
      }
      break;
    }
    case "FX2": {
      removes_previous_effect(fx_2_actual_patch);
      switch (effecttype) {
        case "Distortion":
          {
            fx_2_distortion_Node.connect(fxReturn_2_fader);
            channel_1_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            channel_1_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            channel_1_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            channel_2_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            channel_2_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            channel_2_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            channel_3_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            channel_3_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            channel_3_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            channel_4_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            channel_4_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            channel_4_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            fx_1_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            fx_1_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            fx_1_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            fx_2_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            fx_2_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            fx_2_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            fx_3_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            fx_3_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            fx_3_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            fx_4_fxSend_2_preEq_volNode.connect(fx_2_distortion_Node);
            fx_4_fxSend_2_postEq_volNode.connect(fx_2_distortion_Node);
            fx_4_fxSend_2_postFdr_volNode.connect(fx_2_distortion_Node);

            fx_2_actual_patch = "fx_2_Distortion";
            fx_2_distortion_div.style.display = "block";
            break;
          }
        case "FeedbackDelay":
          {
            fx_2_feedback_Node.connect(fxReturn_2_fader);

            channel_1_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            channel_1_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            channel_1_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            channel_2_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            channel_2_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            channel_2_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            channel_3_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            channel_3_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            channel_3_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            channel_4_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            channel_4_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            channel_4_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            fx_1_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            fx_1_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            fx_1_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            fx_2_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            fx_2_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            fx_2_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            fx_3_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            fx_3_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            fx_3_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            fx_4_fxSend_2_preEq_volNode.connect(fx_2_feedback_Node);
            fx_4_fxSend_2_postEq_volNode.connect(fx_2_feedback_Node);
            fx_4_fxSend_2_postFdr_volNode.connect(fx_2_feedback_Node);

            fx_2_feedback_div.style.display = "block";
            fx_2_actual_patch = "fx_2_Feedback";
            break;
          }
        case "Phaser":
          {
            fx_2_phaser_Node.connect(fxReturn_2_fader);
            channel_1_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            channel_1_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            channel_1_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            channel_2_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            channel_2_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            channel_2_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            channel_3_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            channel_3_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            channel_3_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            channel_4_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            channel_4_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            channel_4_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            fx_1_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            fx_1_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            fx_1_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            fx_2_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            fx_2_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            fx_2_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            fx_3_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            fx_3_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            fx_3_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            fx_4_fxSend_2_preEq_volNode.connect(fx_2_phaser_Node);
            fx_4_fxSend_2_postEq_volNode.connect(fx_2_phaser_Node);
            fx_4_fxSend_2_postFdr_volNode.connect(fx_2_phaser_Node);

            fx_2_actual_patch = "fx_2_phaser";
            fx_2_phaser_div.style.display = "block";
            break;
          }
        case "PingPongDelay":
          {
            fx_2_pingpong_Node.connect(fxReturn_2_fader);

            channel_1_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            channel_1_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            channel_1_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            channel_2_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            channel_2_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            channel_2_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            channel_3_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            channel_3_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            channel_3_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            channel_4_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            channel_4_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            channel_4_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            fx_1_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            fx_1_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            fx_1_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            fx_2_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            fx_2_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            fx_2_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            fx_3_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            fx_3_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            fx_3_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            fx_4_fxSend_2_preEq_volNode.connect(fx_2_pingpong_Node);
            fx_4_fxSend_2_postEq_volNode.connect(fx_2_pingpong_Node);
            fx_4_fxSend_2_postFdr_volNode.connect(fx_2_pingpong_Node);

            fx_2_actual_patch = "fx_2_pingpong";
            fx_2_pingpong_div.style.display = "block";

            break;
          }
        case "PitchShift":
          {
            fx_2_pitchshift_Node.connect(fxReturn_2_fader);
            channel_1_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            channel_1_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            channel_1_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            channel_2_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            channel_2_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            channel_2_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            channel_3_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            channel_3_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            channel_3_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            channel_4_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            channel_4_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            channel_4_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            fx_1_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            fx_1_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            fx_1_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            fx_2_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            fx_2_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            fx_2_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            fx_3_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            fx_3_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            fx_3_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            fx_4_fxSend_2_preEq_volNode.connect(fx_2_pitchshift_Node);
            fx_4_fxSend_2_postEq_volNode.connect(fx_2_pitchshift_Node);
            fx_4_fxSend_2_postFdr_volNode.connect(fx_2_pitchshift_Node);

            fx_2_actual_patch = "fx_2_pitchshift";
            fx_2_pitchshift_div.style.display = "block";
            break;
          }
        case "Reverb":
          {
            fx_2_reverb_Node.connect(fxReturn_2_fader);

            channel_1_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            channel_1_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            channel_1_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            channel_2_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            channel_2_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            channel_2_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            channel_3_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            channel_3_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            channel_3_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            channel_4_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            channel_4_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            channel_4_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            fx_1_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            fx_1_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            fx_1_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            fx_2_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            fx_2_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            fx_2_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            fx_3_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            fx_3_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            fx_3_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            fx_4_fxSend_2_preEq_volNode.connect(fx_2_reverb_Node);
            fx_4_fxSend_2_postEq_volNode.connect(fx_2_reverb_Node);
            fx_4_fxSend_2_postFdr_volNode.connect(fx_2_reverb_Node);

            fx_2_actual_patch = "fx_2_reverb";
            fx_2_reverb_div.style.display = "block";
            break;
          }
        default: { alert("default fx_2_select"); break; }
      }
      break;
    }
    case "FX3": {
      removes_previous_effect(fx_3_actual_patch);
      switch (effecttype) {
        case "Chorus":
          {
            fx_3_chorus_Node.connect(fxReturn_3_fader);

            channel_1_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            channel_1_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            channel_1_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            channel_2_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            channel_2_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            channel_2_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            channel_3_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            channel_3_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            channel_3_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            channel_4_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            channel_4_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            channel_4_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            fx_1_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            fx_1_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            fx_1_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            fx_2_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            fx_2_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            fx_2_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            fx_3_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            fx_3_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            fx_3_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            fx_4_fxSend_3_preEq_volNode.connect(fx_3_chorus_Node);
            fx_4_fxSend_3_postEq_volNode.connect(fx_3_chorus_Node);
            fx_4_fxSend_3_postFdr_volNode.connect(fx_3_chorus_Node);

            fx_3_actual_patch = "fx_3_chorus";
            fx_3_chorus_div.style.display = "block";
            break;
          }
        case "FeedbackDelay":
          {
            fx_3_feedback_Node.connect(fxReturn_3_fader);

            channel_1_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            channel_1_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            channel_1_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            channel_2_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            channel_2_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            channel_2_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            channel_3_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            channel_3_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            channel_3_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            channel_4_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            channel_4_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            channel_4_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            fx_1_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            fx_1_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            fx_1_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            fx_2_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            fx_2_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            fx_2_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            fx_3_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            fx_3_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            fx_3_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            fx_4_fxSend_3_preEq_volNode.connect(fx_3_feedback_Node);
            fx_4_fxSend_3_postEq_volNode.connect(fx_3_feedback_Node);
            fx_4_fxSend_3_postFdr_volNode.connect(fx_3_feedback_Node);

            fx_3_feedback_div.style.display = "block";
            fx_3_actual_patch = "fx_3_Feedback";
            break;
          }
        case "FrequencyShifter":
          {
            fx_3_FrequencyShifter_Node.connect(fxReturn_3_fader);

            channel_1_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_1_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_1_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            channel_2_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_2_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_2_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            channel_3_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_3_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_3_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            channel_4_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_4_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            channel_4_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            fx_1_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_1_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_1_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            fx_2_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_2_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_2_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            fx_3_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_3_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_3_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            fx_4_fxSend_3_preEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_4_fxSend_3_postEq_volNode.connect(fx_3_FrequencyShifter_Node);
            fx_4_fxSend_3_postFdr_volNode.connect(fx_3_FrequencyShifter_Node);

            fx_3_actual_patch = "fx_3_frequencyShifter";
            fx_3_frequencyShifter_div.style.display = "block";
            break;
          }
        case "PingPongDelay":
          {
            fx_3_pingpong_Node.connect(fxReturn_3_fader);

            channel_1_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            channel_1_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            channel_1_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            channel_2_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            channel_2_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            channel_2_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            channel_3_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            channel_3_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            channel_3_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            channel_4_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            channel_4_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            channel_4_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            fx_1_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            fx_1_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            fx_1_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            fx_2_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            fx_2_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            fx_2_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            fx_3_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            fx_3_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            fx_3_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            fx_4_fxSend_3_preEq_volNode.connect(fx_3_pingpong_Node);
            fx_4_fxSend_3_postEq_volNode.connect(fx_3_pingpong_Node);
            fx_4_fxSend_3_postFdr_volNode.connect(fx_3_pingpong_Node);

            fx_3_actual_patch = "fx_3_pingpong";
            fx_3_pingpong_div.style.display = "block";

            break;
          }
        case "PitchShift":
          {
            fx_3_pitchshift_Node.connect(fxReturn_3_fader);
            channel_1_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            channel_1_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            channel_1_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            channel_2_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            channel_2_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            channel_2_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            channel_3_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            channel_3_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            channel_3_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            channel_4_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            channel_4_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            channel_4_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            fx_1_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            fx_1_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            fx_1_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            fx_2_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            fx_2_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            fx_2_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            fx_3_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            fx_3_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            fx_3_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            fx_4_fxSend_3_preEq_volNode.connect(fx_3_pitchshift_Node);
            fx_4_fxSend_3_postEq_volNode.connect(fx_3_pitchshift_Node);
            fx_4_fxSend_3_postFdr_volNode.connect(fx_3_pitchshift_Node);

            fx_3_actual_patch = "fx_3_pitchshift";
            fx_3_pitchshift_div.style.display = "block";
            break;
          }
        case "Reverb":
          {
            fx_3_reverb_Node.connect(fxReturn_3_fader);

            channel_1_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            channel_1_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            channel_1_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            channel_2_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            channel_2_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            channel_2_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            channel_3_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            channel_3_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            channel_3_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            channel_4_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            channel_4_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            channel_4_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            fx_1_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            fx_1_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            fx_1_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            fx_2_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            fx_2_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            fx_2_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            fx_3_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            fx_3_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            fx_3_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            fx_4_fxSend_3_preEq_volNode.connect(fx_3_reverb_Node);
            fx_4_fxSend_3_postEq_volNode.connect(fx_3_reverb_Node);
            fx_4_fxSend_3_postFdr_volNode.connect(fx_3_reverb_Node);

            fx_3_actual_patch = "fx_3_reverb";
            fx_3_reverb_div.style.display = "block";
            break;
          }
        default: { alert("default fx_3_select"); break; }
      }
      break;
    }
    case "FX4": {
      removes_previous_effect(fx_4_actual_patch);
      switch (effecttype) {
        case "Chorus":
          {
            fx_4_chorus_Node.connect(fxReturn_4_fader);

            channel_1_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            channel_1_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            channel_1_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            channel_2_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            channel_2_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            channel_2_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            channel_3_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            channel_3_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            channel_3_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            channel_4_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            channel_4_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            channel_4_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            fx_1_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            fx_1_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            fx_1_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            fx_2_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            fx_2_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            fx_2_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            fx_3_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            fx_3_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            fx_3_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            fx_4_fxSend_4_preEq_volNode.connect(fx_4_chorus_Node);
            fx_4_fxSend_4_postEq_volNode.connect(fx_4_chorus_Node);
            fx_4_fxSend_4_postFdr_volNode.connect(fx_4_chorus_Node);

            fx_4_actual_patch = "fx_4_chorus";
            fx_4_chorus_div.style.display = "block";
            break;
          }
        case "FeedbackDelay":
          {
            fx_4_feedback_Node.connect(fxReturn_4_fader);

            channel_1_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            channel_1_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            channel_1_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            channel_2_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            channel_2_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            channel_2_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            channel_3_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            channel_3_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            channel_3_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            channel_4_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            channel_4_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            channel_4_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            fx_1_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            fx_1_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            fx_1_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            fx_2_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            fx_2_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            fx_2_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            fx_3_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            fx_3_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            fx_3_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            fx_4_fxSend_4_preEq_volNode.connect(fx_4_feedback_Node);
            fx_4_fxSend_4_postEq_volNode.connect(fx_4_feedback_Node);
            fx_4_fxSend_4_postFdr_volNode.connect(fx_4_feedback_Node);

            fx_4_feedback_div.style.display = "block";
            fx_4_actual_patch = "fx_4_Feedback";
            break;
          }
        case "FrequencyShifter":
          {
            fx_4_FrequencyShifter_Node.connect(fxReturn_4_fader);

            channel_1_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_1_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_1_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            channel_2_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_2_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_2_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            channel_3_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_3_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_3_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            channel_4_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_4_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            channel_4_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            fx_1_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_1_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_1_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            fx_2_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_2_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_2_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            fx_3_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_3_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_3_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            fx_4_fxSend_4_preEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_4_fxSend_4_postEq_volNode.connect(fx_4_FrequencyShifter_Node);
            fx_4_fxSend_4_postFdr_volNode.connect(fx_4_FrequencyShifter_Node);

            fx_4_actual_patch = "fx_4_frequencyShifter";
            fx_4_frequencyShifter_div.style.display = "block";
            break;
          }
        case "Phaser":
          {
            fx_4_phaser_Node.connect(fxReturn_4_fader);
            channel_1_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            channel_1_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            channel_1_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            channel_2_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            channel_2_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            channel_2_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            channel_3_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            channel_3_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            channel_3_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            channel_4_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            channel_4_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            channel_4_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            fx_1_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            fx_1_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            fx_1_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            fx_2_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            fx_2_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            fx_2_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            fx_3_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            fx_3_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            fx_3_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            fx_4_fxSend_4_preEq_volNode.connect(fx_4_phaser_Node);
            fx_4_fxSend_4_postEq_volNode.connect(fx_4_phaser_Node);
            fx_4_fxSend_4_postFdr_volNode.connect(fx_4_phaser_Node);

            fx_4_actual_patch = "fx_4_phaser";
            fx_4_phaser_div.style.display = "block";
            break;
          }
        case "PingPongDelay":
          {
            fx_4_pingpong_Node.connect(fxReturn_4_fader);

            channel_1_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            channel_1_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            channel_1_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            channel_2_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            channel_2_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            channel_2_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            channel_3_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            channel_3_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            channel_3_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            channel_4_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            channel_4_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            channel_4_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            fx_1_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            fx_1_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            fx_1_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            fx_2_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            fx_2_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            fx_2_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            fx_3_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            fx_3_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            fx_3_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            fx_4_fxSend_4_preEq_volNode.connect(fx_4_pingpong_Node);
            fx_4_fxSend_4_postEq_volNode.connect(fx_4_pingpong_Node);
            fx_4_fxSend_4_postFdr_volNode.connect(fx_4_pingpong_Node);

            fx_4_actual_patch = "fx_4_pingpong";
            fx_4_pingpong_div.style.display = "block";

            break;
          }
        case "Reverb":
          {
            fx_4_reverb_Node.connect(fxReturn_4_fader);

            channel_1_fxSend_4_preEq_volNode.connect(fx_4_reverb_Node);
            channel_1_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            channel_1_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            channel_2_fxSend_1_preEq_volNode.connect(fx_4_reverb_Node);
            channel_2_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            channel_2_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            channel_3_fxSend_1_preEq_volNode.connect(fx_4_reverb_Node);
            channel_3_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            channel_3_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            channel_4_fxSend_1_preEq_volNode.connect(fx_4_reverb_Node);
            channel_4_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            channel_4_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            fx_1_fxSend_4_preEq_volNode.connect(fx_4_reverb_Node);
            fx_1_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            fx_1_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            fx_2_fxSend_1_preEq_volNode.connect(fx_4_reverb_Node);
            fx_2_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            fx_2_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            fx_3_fxSend_1_preEq_volNode.connect(fx_4_reverb_Node);
            fx_3_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            fx_3_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            fx_4_fxSend_1_preEq_volNode.connect(fx_4_reverb_Node);
            fx_4_fxSend_1_postEq_volNode.connect(fx_4_reverb_Node);
            fx_4_fxSend_1_postFdr_volNode.connect(fx_4_reverb_Node);

            fx_4_actual_patch = "fx_4_reverb";
            fx_4_reverb_div.style.display = "block";
            break;
          }
        default: { alert("default fx_4_select"); break; }
      }
      break;
    }
    default: { break; }
  }
}

function sets_New_Source(source, value) {
  switch (source) {
    case "source_1": {
      removes_previous_source(source);
      switch (value) {
        case "MonoSynth": //
          {
            monoSynth_1.connect(channel_1_panNode);
            monoSynth_1_div.style.display = "block";
            source_1_actual_patch = "monoSynth"
            break;
          }
        case "NoiseSynth": //
          {
            noiseSynth_1.connect(channel_1_panNode);
            noiseSynth_1_div.style.display = "block";
            source_1_actual_patch = "noiseSynth"
            break;
          }
        case "Oscillator": //
          {
            oscillator_1.connect(channel_1_panNode);
            oscillator_1_div.style.display = "block";
            source_1_actual_patch = "oscillator"
            break;
          }
        case "Noise": //
          {
            noise_1_Node.connect(channel_1_panNode);
            noise_1_div.style.display = "block";
            source_1_actual_patch = "noise"
            break;
          }
        case "Player": //
          {
            player_1_Node.connect(channel_1_panNode);
            source_1_actual_patch = "player"
            player_1_div.style.display = "block";
            break;
          }
        case "GrainPlayer": //
          {
            grainPlayer_1_Node.connect(channel_1_panNode);
            source_1_actual_patch = "grainPlayer"
            grainPlayer_1_div.style.display = "block";
            break;
          }
        case "empty": //
          {
            source_1_actual_patch = "empty"
            empty_1_div.style.display = "block";
            break;
          }
        default: { alert("default fx_1_select"); break; }
      }
      break;
    }
    case "source_2": {
      ("source: " + source);
      removes_previous_source(source);
      switch (value) {
        case "NoiseSynth": //
          {
            noiseSynth_2.connect(channel_2_panNode);
            noiseSynth_2_div.style.display = "block";
            source_2_actual_patch = "noiseSynth"
            break;
          }
        case "Oscillator": //
          {
            oscillator_2.connect(channel_2_panNode);
            oscillator_2_div.style.display = "block";
            source_2_actual_patch = "oscillator"
            break;
          }
        case "Noise": //
          {
            noise_2_Node.connect(channel_2_panNode);
            noise_2_div.style.display = "block";
            source_2_actual_patch = "noise"
            break;
          }
        case "Player": //
          {
            player_2_Node.connect(channel_2_panNode);
            source_2_actual_patch = "player"
            player_2_div.style.display = "block";
            break;
          }
        case "GrainPlayer": //
          {
            grainPlayer_2_Node.connect(channel_2_panNode);
            source_2_actual_patch = "grainPlayer"
            grainPlayer_2_div.style.display = "block";
            break;
          }
        case "empty": //
          {
            source_2_actual_patch = "empty"
            empty_2_div.style.display = "block";
            break;
          }
        default: { alert("default fx_2_select"); break; }
      }
      break;
    }
    case "source_3": {
      ("source: " + source);
      removes_previous_source(source);
      switch (value) {
        case "NoiseSynth": //
          {
            noiseSynth_3.connect(channel_3_panNode);
            noiseSynth_3_div.style.display = "block";
            source_3_actual_patch = "noiseSynth"
            break;
          }
        case "Oscillator": //
          {
            oscillator_3.connect(channel_3_panNode);
            oscillator_3_div.style.display = "block";
            source_3_actual_patch = "oscillator"
            break;
          }
        case "Noise": //
          {
            noise_3_Node.connect(channel_3_panNode);
            noise_3_div.style.display = "block";
            source_3_actual_patch = "noise"
            break;
          }
        case "Player": //
          {
            player_3_Node.connect(channel_3_panNode);
            source_3_actual_patch = "player"
            player_3_div.style.display = "block";
            break;
          }
        case "GrainPlayer": //
          {
            grainPlayer_3_Node.connect(channel_3_panNode);
            source_3_actual_patch = "grainPlayer"
            grainPlayer_3_div.style.display = "block";
            break;
          }
        case "empty": //
          {
            source_3_actual_patch = "empty"
            empty_3_div.style.display = "block";
            break;
          }
        default: { alert("default fx_3_select"); break; }
      }
      break;
    }
    case "source_4": {
      ("source: " + source);
      removes_previous_source(source);
      switch (value) {
        case "NoiseSynth": //
          {
            noiseSynth_4.connect(channel_4_panNode);
            noiseSynth_4_div.style.display = "block";
            source_4_actual_patch = "noiseSynth"
            break;
          }
        case "Oscillator": //
          {
            oscillator_4.connect(channel_4_panNode);
            oscillator_4_div.style.display = "block";
            source_4_actual_patch = "oscillator"
            break;
          }
        case "Noise": //
          {
            noise_4_Node.connect(channel_4_panNode);
            noise_4_div.style.display = "block";
            source_4_actual_patch = "noise"
            break;
          }
        case "Player": //
          {
            player_4_Node.connect(channel_4_panNode);
            source_4_actual_patch = "player"
            player_4_div.style.display = "block";
            break;
          }
        case "GrainPlayer": //
          {
            grainPlayer_4_Node.connect(channel_4_panNode);
            source_4_actual_patch = "grainPlayer"
            grainPlayer_4_div.style.display = "block";
            break;
          }
        case "empty": //
          {
            source_4_actual_patch = "empty"
            empty_4_div.style.display = "block";
            break;
          }
        default: { alert("default fx_4_select"); break; }
      }
      break;
    }
    default: { break; }
  }
}

function mostrarerror(evento) {

  console.log("Error: " + evento.error);
  console.log("Mensaje: " + evento.message);
  console.log("Línea: " + evento.lineno);
  console.log("Columna: " + evento.colno);
  console.log("URL: " + evento.filename);
  console.log("\n");
  console.log("DOMError.name: " + DOMError.name);
  /*
const button = document.querySelector("button");
 
button.onclick = () => {
  try {
    throw new DOMException("Custom DOM Exception Triggered.");
  } catch (error) {
    document.querySelector("#output").textContent = `Error: ${error.message}`;
  }
};
  */
}

//------------------------------------------
//REPOSICIONAR LUEGO
channel_2_volNode.fan(channel_2_rms_meter);
channel_3_volNode.fan(channel_3_rms_meter);
channel_4_volNode.fan(channel_4_rms_meter);

//---------------------------------

function updatesMeters() {
  meter_test_Node_RMS.innerHTML = Math.round(`${meter_test_Node.getValue()}`);
  player_1_rms_meter_inner.innerHTML = Math.round(`${player_1_rms_meter.getValue()}`);
  player_2_rms_meter_inner.innerHTML = Math.round(`${player_2_rms_meter.getValue()}`);
  player_3_rms_meter_inner.innerHTML = Math.round(`${player_3_rms_meter.getValue()}`);
  player_4_rms_meter_inner.innerHTML = Math.round(`${player_4_rms_meter.getValue()}`);

  channel_1_rms_meter_inner.innerHTML = Math.round(`${channel_1_rms_meter.getValue()}`);
  channel_1_filter_bypass_meter_inner.innerHTML = Math.round(`${channel_1_filter_bypass_meter.getValue()}`);
  channel_1_filter_allpass_meter_inner.innerHTML = Math.round(`${channel_1_filter_meter.getValue()}`);
  channel_1_shelf_meter_inner.innerHTML = Math.round(`${channel_1_filter_meter.getValue()}`);
  channel_1_peaking_meter_inner.innerHTML = Math.round(`${channel_1_filter_meter.getValue()}`);
  channel_1_rms_comp_bypass_meter_inner.innerHTML = Math.round(`${channel_1_rms_comp_bypass_meter.getValue()}`);
  channel_1_rms_gate_bypass_meter_inner.innerHTML = Math.round(`${channel_1_rms_gate_bypass_meter.getValue()}`);
  channel_1_rms_limiter_bypass_meter_inner.innerHTML = Math.round(`${channel_1_rms_limiter_bypass_meter.getValue()}`);
  channel_1_rms_comp_meter_inner.innerHTML = Math.round(`${channel_1_rms_comp_meter.getValue()}`);
  channel_1_rms_gate_meter_inner.innerHTML = Math.round(`${channel_1_rms_gate_meter.getValue()}`);
  channel_1_rms_limiter_meter_inner.innerHTML = Math.round(`${channel_1_rms_limiter_meter.getValue()}`);
  channel_1_tascam_424_Hi_meter_inner.innerHTML = Math.round(`${channel_1_tascam_424_Hi_meter.getValue()}`);
  channel_1_tascam_424_Mid_meter_inner.innerHTML = Math.round(`${channel_1_tascam_424_Mid_meter.getValue()}`);
  channel_1_tascam_424_Low_meter_inner.innerHTML = Math.round(`${channel_1_tascam_424_Low_meter.getValue()}`);
  channel_1_eq3_meter_inner.innerHTML = Math.round(`${channel_1_eq3_meter.getValue()}`);

  grainPlayer_1_rms_value.innerHTML = Math.round(`${grainPlayer_1_rmsNode.getValue()}`);

  channel_2_rms_meter_inner.innerHTML = Math.round(`${channel_2_rms_meter.getValue()}`);
  channel_3_rms_meter_inner.innerHTML = Math.round(`${channel_3_rms_meter.getValue()}`);
  channel_4_rms_meter_inner.innerHTML = Math.round(`${channel_4_rms_meter.getValue()}`);

  fx_1_rms_meter_inner.innerHTML = Math.round(`${fx_1_rms_meter.getValue()}`);
  fx_2_rms_meter_inner.innerHTML = Math.round(`${fx_2_rms_meter.getValue()}`);
  fx_3_rms_meter_inner.innerHTML = Math.round(`${fx_3_rms_meter.getValue()}`);
  fx_4_rms_meter_inner.innerHTML = Math.round(`${fx_4_rms_meter.getValue()}`);
}

function hide_all_divs(value) {
  switch (value) {
    case "fx_1_select": {
      fx_1_autofilter_div.style.display = "none";
      fx_1_autopanner_div.style.display = "none";
      fx_1_autowah_div.style.display = "none";
      fx_1_distortion_div.style.display = "none";
      fx_1_pingpong_div.style.display = "none";
      fx_1_vibrato_div.style.display = "none";
      break;
    }
    case "fx_2_select": {
      fx_2_distortion_div.style.display = "none";
      fx_2_feedback_div.style.display = "none";
      fx_2_phaser_div.style.display = "none";
      fx_2_pingpong_div.style.display = "none";
      fx_2_pitchshift_div.style.display = "none";
      fx_2_reverb_div.style.display = "none";
      break;
    }
    case "fx_3_select": {
      fx_3_chorus_div.style.display = "none";
      fx_3_feedback_div.style.display = "none";
      fx_3_frequencyShifter_div.style.display = "none";
      fx_3_pingpong_div.style.display = "none";
      fx_3_pitchshift_div.style.display = "none";
      fx_3_reverb_div.style.display = "none";
      break;
    }
    case "fx_4_select": {
      fx_4_chorus_div.style.display = "none";
      fx_4_feedback_div.style.display = "none";
      fx_4_frequencyShifter_div.style.display = "none";
      fx_4_phaser_div.style.display = "none";
      fx_4_pingpong_div.style.display = "none";
      fx_4_reverb_div.style.display = "none";
      break;
    }
  }
}

function switchState_dynamics(name) {
  switch (name) {
    case "channel_1_compressor_On_Off_Button":
      {
        if (channel_1_compressor_On_Off_Button_State == "on") {
          channel_1_compressor_On_Off_Button_State = "off";
          channel_1_compressor_On_Off_Button.innerText = "Off";
          channel_1_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_compressor_On_Off_Button", "off");
        }
        else if (channel_1_compressor_On_Off_Button_State == "off") {
          channel_1_compressor_On_Off_Button_State = "on";
          channel_1_compressor_On_Off_Button.innerText = "On"
          channel_1_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "channel_1_gate_On_Off_Button":
      {
        if (channel_1_gate_On_Off_Button_State == "on") {
          channel_1_gate_On_Off_Button_State = "off";
          channel_1_gate_On_Off_Button.innerText = "Off";
          channel_1_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_gate_On_Off_Button", "off");
        }
        else if (channel_1_gate_On_Off_Button_State == "off") {
          channel_1_gate_On_Off_Button_State = "on";
          channel_1_gate_On_Off_Button.innerText = "On"
          channel_1_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_gate_On_Off_Button", "on");
        }
        break;
      }
    case "channel_1_limiter_On_Off_Button":
      {
        if (channel_1_limiter_On_Off_Button_State == "on") {
          channel_1_limiter_On_Off_Button_State = "off";
          channel_1_limiter_On_Off_Button.innerText = "Off";
          channel_1_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_limiter_On_Off_Button", "off");
        }
        else if (channel_1_limiter_On_Off_Button_State == "off") {
          channel_1_limiter_On_Off_Button_State = "on";
          channel_1_limiter_On_Off_Button.innerText = "On"
          channel_1_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_1_limiter_On_Off_Button", "on");

        }
        break;
      }
    case "channel_2_compressor_On_Off_Button":
      {
        if (channel_2_compressor_On_Off_Button_State == "on") {
          channel_2_compressor_On_Off_Button_State = "off";
          channel_2_compressor_On_Off_Button.innerText = "Off";
          channel_2_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_compressor_On_Off_Button", "off");
        }
        else if (channel_2_compressor_On_Off_Button_State == "off") {
          channel_2_compressor_On_Off_Button_State = "on";
          channel_2_compressor_On_Off_Button.innerText = "On"
          channel_2_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "channel_2_gate_On_Off_Button":
      {
        if (channel_2_gate_On_Off_Button_State == "on") {
          channel_2_gate_On_Off_Button_State = "off";
          channel_2_gate_On_Off_Button.innerText = "Off";
          channel_2_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_gate_On_Off_Button", "off");
        }
        else if (channel_2_gate_On_Off_Button_State == "off") {
          channel_2_gate_On_Off_Button_State = "on";
          channel_2_gate_On_Off_Button.innerText = "On"
          channel_2_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_gate_On_Off_Button", "on");
        }
        break;
      }
    case "channel_2_limiter_On_Off_Button":
      {
        if (channel_2_limiter_On_Off_Button_State == "on") {
          channel_2_limiter_On_Off_Button_State = "off";
          channel_2_limiter_On_Off_Button.innerText = "Off";
          channel_2_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_limiter_On_Off_Button", "off");
        }
        else if (channel_2_limiter_On_Off_Button_State == "off") {
          channel_2_limiter_On_Off_Button_State = "on";
          channel_2_limiter_On_Off_Button.innerText = "On"
          channel_2_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_2_limiter_On_Off_Button", "on");

        }
        break;
      }
    case "channel_3_compressor_On_Off_Button":
      {
        if (channel_3_compressor_On_Off_Button_State == "on") {
          channel_3_compressor_On_Off_Button_State = "off";
          channel_3_compressor_On_Off_Button.innerText = "Off";
          channel_3_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_compressor_On_Off_Button", "off");
        }
        else if (channel_3_compressor_On_Off_Button_State == "off") {
          channel_3_compressor_On_Off_Button_State = "on";
          channel_3_compressor_On_Off_Button.innerText = "On"
          channel_3_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "channel_3_gate_On_Off_Button":
      {
        if (channel_3_gate_On_Off_Button_State == "on") {
          channel_3_gate_On_Off_Button_State = "off";
          channel_3_gate_On_Off_Button.innerText = "Off";
          channel_3_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_gate_On_Off_Button", "off");
        }
        else if (channel_3_gate_On_Off_Button_State == "off") {
          channel_3_gate_On_Off_Button_State = "on";
          channel_3_gate_On_Off_Button.innerText = "On"
          channel_3_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_gate_On_Off_Button", "on");
        }
        break;
      }
    case "channel_3_limiter_On_Off_Button":
      {
        if (channel_3_limiter_On_Off_Button_State == "on") {
          channel_3_limiter_On_Off_Button_State = "off";
          channel_3_limiter_On_Off_Button.innerText = "Off";
          channel_3_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_limiter_On_Off_Button", "off");
        }
        else if (channel_3_limiter_On_Off_Button_State == "off") {
          channel_3_limiter_On_Off_Button_State = "on";
          channel_3_limiter_On_Off_Button.innerText = "On"
          channel_3_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_3_limiter_On_Off_Button", "on");

        }
        break;
      }
    case "channel_4_compressor_On_Off_Button":
      {
        if (channel_4_compressor_On_Off_Button_State == "on") {
          channel_4_compressor_On_Off_Button_State = "off";
          channel_4_compressor_On_Off_Button.innerText = "Off";
          channel_4_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_compressor_On_Off_Button", "off");
        }
        else if (channel_4_compressor_On_Off_Button_State == "off") {
          channel_4_compressor_On_Off_Button_State = "on";
          channel_4_compressor_On_Off_Button.innerText = "On"
          channel_4_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "channel_4_gate_On_Off_Button":
      {
        if (channel_4_gate_On_Off_Button_State == "on") {
          channel_4_gate_On_Off_Button_State = "off";
          channel_4_gate_On_Off_Button.innerText = "Off";
          channel_4_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_gate_On_Off_Button", "off");
        }
        else if (channel_4_gate_On_Off_Button_State == "off") {
          channel_4_gate_On_Off_Button_State = "on";
          channel_4_gate_On_Off_Button.innerText = "On"
          channel_4_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_gate_On_Off_Button", "on");
        }
        break;
      }
    case "channel_4_limiter_On_Off_Button":
      {
        if (channel_4_limiter_On_Off_Button_State == "on") {
          channel_4_limiter_On_Off_Button_State = "off";
          channel_4_limiter_On_Off_Button.innerText = "Off";
          channel_4_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_limiter_On_Off_Button", "off");
        }
        else if (channel_4_limiter_On_Off_Button_State == "off") {
          channel_4_limiter_On_Off_Button_State = "on";
          channel_4_limiter_On_Off_Button.innerText = "On"
          channel_4_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "channel_4_limiter_On_Off_Button", "on");
        }
        break;
      }
    case "fx_1_compressor_On_Off_Button":
      {
        if (fx_1_compressor_On_Off_Button_State == "on") {
          fx_1_compressor_On_Off_Button_State = "off";
          fx_1_compressor_On_Off_Button.innerText = "Off";
          fx_1_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_compressor_On_Off_Button", "off");
        }
        else if (fx_1_compressor_On_Off_Button_State == "off") {
          fx_1_compressor_On_Off_Button_State = "on";
          fx_1_compressor_On_Off_Button.innerText = "On"
          fx_1_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "fx_1_gate_On_Off_Button":
      {
        if (fx_1_gate_On_Off_Button_State == "on") {
          fx_1_gate_On_Off_Button_State = "off";
          fx_1_gate_On_Off_Button.innerText = "Off";
          fx_1_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_gate_On_Off_Button", "off");
        }
        else if (fx_1_gate_On_Off_Button_State == "off") {
          fx_1_gate_On_Off_Button_State = "on";
          fx_1_gate_On_Off_Button.innerText = "On"
          fx_1_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_gate_On_Off_Button", "on");
        }
        break;
      }
    case "fx_1_limiter_On_Off_Button":
      {
        if (fx_1_limiter_On_Off_Button_State == "on") {
          fx_1_limiter_On_Off_Button_State = "off";
          fx_1_limiter_On_Off_Button.innerText = "Off";
          fx_1_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_limiter_On_Off_Button", "off");
        }
        else if (fx_1_limiter_On_Off_Button_State == "off") {
          fx_1_limiter_On_Off_Button_State = "on";
          fx_1_limiter_On_Off_Button.innerText = "On"
          fx_1_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_1_limiter_On_Off_Button", "on");
        }
        break;
      }
    case "fx_2_compressor_On_Off_Button":
      {
        if (fx_2_compressor_On_Off_Button_State == "on") {
          fx_2_compressor_On_Off_Button_State = "off";
          fx_2_compressor_On_Off_Button.innerText = "Off";
          fx_2_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_compressor_On_Off_Button", "off");
        }
        else if (fx_2_compressor_On_Off_Button_State == "off") {
          fx_2_compressor_On_Off_Button_State = "on";
          fx_2_compressor_On_Off_Button.innerText = "On"
          fx_2_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "fx_2_gate_On_Off_Button":
      {
        if (fx_2_gate_On_Off_Button_State == "on") {
          fx_2_gate_On_Off_Button_State = "off";
          fx_2_gate_On_Off_Button.innerText = "Off";
          fx_2_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_gate_On_Off_Button", "off");
        }
        else if (fx_2_gate_On_Off_Button_State == "off") {
          fx_2_gate_On_Off_Button_State = "on";
          fx_2_gate_On_Off_Button.innerText = "On"
          fx_2_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_gate_On_Off_Button", "on");
        }
        break;
      }
    case "fx_2_limiter_On_Off_Button":
      {
        if (fx_2_limiter_On_Off_Button_State == "on") {
          fx_2_limiter_On_Off_Button_State = "off";
          fx_2_limiter_On_Off_Button.innerText = "Off";
          fx_2_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_limiter_On_Off_Button", "off");
        }
        else if (fx_2_limiter_On_Off_Button_State == "off") {
          fx_2_limiter_On_Off_Button_State = "on";
          fx_2_limiter_On_Off_Button.innerText = "On"
          fx_2_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_2_limiter_On_Off_Button", "on");
        }
        break;
      }
    case "fx_3_compressor_On_Off_Button":
      {
        if (fx_3_compressor_On_Off_Button_State == "on") {
          fx_3_compressor_On_Off_Button_State = "off";
          fx_3_compressor_On_Off_Button.innerText = "Off";
          fx_3_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_compressor_On_Off_Button", "off");
        }
        else if (fx_3_compressor_On_Off_Button_State == "off") {
          fx_3_compressor_On_Off_Button_State = "on";
          fx_3_compressor_On_Off_Button.innerText = "On"
          fx_3_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "fx_3_gate_On_Off_Button":
      {
        if (fx_3_gate_On_Off_Button_State == "on") {
          fx_3_gate_On_Off_Button_State = "off";
          fx_3_gate_On_Off_Button.innerText = "Off";
          fx_3_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_gate_On_Off_Button", "off");
        }
        else if (fx_3_gate_On_Off_Button_State == "off") {
          fx_3_gate_On_Off_Button_State = "on";
          fx_3_gate_On_Off_Button.innerText = "On"
          fx_3_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_gate_On_Off_Button", "on");
        }
        break;
      }
    case "fx_3_limiter_On_Off_Button":
      {
        if (fx_3_limiter_On_Off_Button_State == "on") {
          fx_3_limiter_On_Off_Button_State = "off";
          fx_3_limiter_On_Off_Button.innerText = "Off";
          fx_3_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_limiter_On_Off_Button", "off");
        }
        else if (fx_3_limiter_On_Off_Button_State == "off") {
          fx_3_limiter_On_Off_Button_State = "on";
          fx_3_limiter_On_Off_Button.innerText = "On"
          fx_3_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_3_limiter_On_Off_Button", "on");
        }
        break;
      }
    case "fx_4_compressor_On_Off_Button":
      {
        if (fx_4_compressor_On_Off_Button_State == "on") {
          fx_4_compressor_On_Off_Button_State = "off";
          fx_4_compressor_On_Off_Button.innerText = "Off";
          fx_4_compressor_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_compressor_On_Off_Button", "off");
        }
        else if (fx_4_compressor_On_Off_Button_State == "off") {
          fx_4_compressor_On_Off_Button_State = "on";
          fx_4_compressor_On_Off_Button.innerText = "On"
          fx_4_compressor_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_compressor_On_Off_Button", "on");
        }
        break;
      }
    case "fx_4_gate_On_Off_Button":
      {
        if (fx_4_gate_On_Off_Button_State == "on") {
          fx_4_gate_On_Off_Button_State = "off";
          fx_4_gate_On_Off_Button.innerText = "Off";
          fx_4_gate_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_gate_On_Off_Button", "off");
        }
        else if (fx_4_gate_On_Off_Button_State == "off") {
          fx_4_gate_On_Off_Button_State = "on";
          fx_4_gate_On_Off_Button.innerText = "On"
          fx_4_gate_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_gate_On_Off_Button", "on");
        }
        break;
      }
    case "fx_4_limiter_On_Off_Button":
      {
        if (fx_4_limiter_On_Off_Button_State == "on") {
          fx_4_limiter_On_Off_Button_State = "off";
          fx_4_limiter_On_Off_Button.innerText = "Off";
          fx_4_limiter_On_Off_Button.style.backgroundColor = "white";
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_limiter_On_Off_Button", "off");
        }
        else if (fx_4_limiter_On_Off_Button_State == "off") {
          fx_4_limiter_On_Off_Button_State = "on";
          fx_4_limiter_On_Off_Button.innerText = "On"
          fx_4_limiter_On_Off_Button.style.backgroundColor = "green";
          mixEvent.logIntoListaAction(Tone.now(), "fx_4_limiter_On_Off_Button", "on");
        }
        break;
      }
    default: { break; }
  }
}

function switchState_filter_eq_selection(name, value) {
  /* 
    alert("switchState_filter_eq_selection: " + value
      + "\n" + "name:  " + name);
    /*  */
  switch (name) {
    case "channel_1_filter_eq_selection":
      {
        switch (channel_1_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              channel_1_filter_eq_selection = "on";
              channel_1_filter_eq_On_Button.style.backgroundColor = "green";
              channel_1_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_1_filter_eq_selection = "eq3";
              channel_1_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_1_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_1_filter_eq_selection = "tascam";
              channel_1_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_1_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {
            if (value == "bypass") {
              channel_1_filter_eq_selection = "bypass";
              channel_1_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_1_filter_eq_selection = "eq3";
              channel_1_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_1_filter_eq_selection = "tascam";
              channel_1_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {

            if (value == "bypass") {
              channel_1_filter_eq_selection = "bypass";
              channel_1_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_1_filter_eq_selection = "on";
              channel_1_filter_eq_On_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_1_filter_eq_selection = "tascam";
              channel_1_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              channel_1_filter_eq_selection = "bypass";
              channel_1_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_1_filter_eq_selection = "on";
              channel_1_filter_eq_On_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_1_filter_eq_selection = "eq3";
              channel_1_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_1_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_2_filter_eq_selection":
      {
        switch (channel_2_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              channel_2_filter_eq_selection = "on";
              channel_2_filter_eq_On_Button.style.backgroundColor = "green";
              channel_2_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_2_filter_eq_selection = "eq3";
              channel_2_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_2_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_2_filter_eq_selection = "tascam";
              channel_2_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_2_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {

            if (value == "bypass") {
              channel_2_filter_eq_selection = "bypass";
              channel_2_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_2_filter_eq_selection = "eq3";
              channel_2_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_2_filter_eq_selection = "tascam";
              channel_2_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_Button.style.backgroundColor = "white";
            }

            break;
          }
          case "eq3": {

            if (value == "bypass") {
              channel_2_filter_eq_selection = "bypass";
              channel_2_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_2_filter_eq_selection = "on";
              channel_2_filter_eq_On_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_2_filter_eq_selection = "tascam";
              channel_2_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              channel_2_filter_eq_selection = "bypass";
              channel_2_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_2_filter_eq_selection = "on";
              channel_2_filter_eq_On_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_2_filter_eq_selection = "eq3";
              channel_2_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_2_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_3_filter_eq_selection":
      {
        switch (channel_3_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              channel_3_filter_eq_selection = "on";
              channel_3_filter_eq_On_Button.style.backgroundColor = "green";
              channel_3_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_3_filter_eq_selection = "eq3";
              channel_3_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_3_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_3_filter_eq_selection = "tascam";
              channel_3_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_3_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {
            if (value == "bypass") {
              channel_3_filter_eq_selection = "bypass";
              channel_3_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_3_filter_eq_selection = "eq3";
              channel_3_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_3_filter_eq_selection = "tascam";
              channel_3_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {
            if (value == "bypass") {
              channel_3_filter_eq_selection = "bypass";
              channel_3_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_3_filter_eq_selection = "on";
              channel_3_filter_eq_On_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_3_filter_eq_selection = "tascam";
              channel_3_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              channel_3_filter_eq_selection = "bypass";
              channel_3_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_3_filter_eq_selection = "on";
              channel_3_filter_eq_On_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_3_filter_eq_selection = "eq3";
              channel_3_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_3_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "channel_4_filter_eq_selection":
      {
        switch (channel_4_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              channel_4_filter_eq_selection = "on";
              channel_4_filter_eq_On_Button.style.backgroundColor = "green";
              channel_4_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_4_filter_eq_selection = "eq3";
              channel_4_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_4_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_4_filter_eq_selection = "tascam";
              channel_4_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_4_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {
            if (value == "bypass") {
              channel_4_filter_eq_selection = "bypass";
              channel_4_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_4_filter_eq_selection = "eq3";
              channel_4_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_4_filter_eq_selection = "tascam";
              channel_4_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {
            if (value == "bypass") {
              channel_4_filter_eq_selection = "bypass";
              channel_4_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_4_filter_eq_selection = "on";
              channel_4_filter_eq_On_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              channel_4_filter_eq_selection = "tascam";
              channel_4_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              channel_4_filter_eq_selection = "bypass";
              channel_4_filter_eq_bypass_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              channel_4_filter_eq_selection = "on";
              channel_4_filter_eq_On_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              channel_4_filter_eq_selection = "eq3";
              channel_4_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              channel_4_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_1_filter_eq_selection":
      {
        switch (fx_1_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              fx_1_filter_eq_selection = "on";
              fx_1_filter_eq_On_Button.style.backgroundColor = "green";
              fx_1_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_1_filter_eq_selection = "eq3";
              fx_1_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_1_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_1_filter_eq_selection = "tascam";
              fx_1_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_1_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {
            if (value == "bypass") {
              fx_1_filter_eq_selection = "bypass";
              fx_1_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_1_filter_eq_selection = "eq3";
              fx_1_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_1_filter_eq_selection = "tascam";
              fx_1_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {
            if (value == "bypass") {
              fx_1_filter_eq_selection = "bypass";
              fx_1_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_1_filter_eq_selection = "on";
              fx_1_filter_eq_On_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_1_filter_eq_selection = "tascam";
              fx_1_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              fx_1_filter_eq_selection = "bypass";
              fx_1_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_1_filter_eq_selection = "on";
              fx_1_filter_eq_On_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_1_filter_eq_selection = "eq3";
              fx_1_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_1_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_2_filter_eq_selection":
      {
        switch (fx_2_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              fx_2_filter_eq_selection = "on";
              fx_2_filter_eq_On_Button.style.backgroundColor = "green";
              fx_2_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_2_filter_eq_selection = "eq3";
              fx_2_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_2_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_2_filter_eq_selection = "tascam";
              fx_2_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_2_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {
            if (value == "bypass") {
              fx_2_filter_eq_selection = "bypass";
              fx_2_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_2_filter_eq_selection = "eq3";
              fx_2_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_2_filter_eq_selection = "tascam";
              fx_2_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {
            if (value == "bypass") {
              fx_2_filter_eq_selection = "bypass";
              fx_2_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_2_filter_eq_selection = "on";
              fx_2_filter_eq_On_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_2_filter_eq_selection = "tascam";
              fx_2_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              fx_2_filter_eq_selection = "bypass";
              fx_2_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_2_filter_eq_selection = "on";
              fx_2_filter_eq_On_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_2_filter_eq_selection = "eq3";
              fx_2_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_2_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_3_filter_eq_selection":
      {
        switch (fx_3_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              fx_3_filter_eq_selection = "on";
              fx_3_filter_eq_On_Button.style.backgroundColor = "green";
              fx_3_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_3_filter_eq_selection = "eq3";
              fx_3_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_3_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_3_filter_eq_selection = "tascam";
              fx_3_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_3_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {

            if (value == "bypass") {
              fx_3_filter_eq_selection = "bypass";
              fx_3_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_3_filter_eq_selection = "eq3";
              fx_3_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_3_filter_eq_selection = "tascam";
              fx_3_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {

            if (value == "bypass") {
              fx_3_filter_eq_selection = "bypass";
              fx_3_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_3_filter_eq_selection = "on";
              fx_3_filter_eq_On_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_3_filter_eq_selection = "tascam";
              fx_3_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              fx_3_filter_eq_selection = "bypass";
              fx_3_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_3_filter_eq_selection = "on";
              fx_3_filter_eq_On_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_3_filter_eq_selection = "eq3";
              fx_3_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_3_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    case "fx_4_filter_eq_selection":
      {
        switch (fx_4_filter_eq_selection) {
          case "bypass": {
            if (value == "on") {
              fx_4_filter_eq_selection = "on";
              fx_4_filter_eq_On_Button.style.backgroundColor = "green";
              fx_4_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_4_filter_eq_selection = "eq3";
              fx_4_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_4_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_4_filter_eq_selection = "tascam";
              fx_4_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_4_filter_eq_bypass_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "on": {
            if (value == "bypass") {
              fx_4_filter_eq_selection = "bypass";
              fx_4_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_4_filter_eq_selection = "eq3";
              fx_4_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_4_filter_eq_selection = "tascam";
              fx_4_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "eq3": {

            if (value == "bypass") {
              fx_4_filter_eq_selection = "bypass";
              fx_4_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_4_filter_eq_selection = "on";
              fx_4_filter_eq_On_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            else if (value == "tascam") {
              fx_4_filter_eq_selection = "tascam";
              fx_4_filter_eq_On_Tascam_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_EQ3_Button.style.backgroundColor = "white";
            }
            break;
          }
          case "tascam": {
            if (value == "bypass") {
              fx_4_filter_eq_selection = "bypass";
              fx_4_filter_eq_bypass_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "on") {
              fx_4_filter_eq_selection = "on";
              fx_4_filter_eq_On_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            else if (value == "eq3") {
              fx_4_filter_eq_selection = "eq3";
              fx_4_filter_eq_On_EQ3_Button.style.backgroundColor = "green";
              fx_4_filter_eq_On_Tascam_Button.style.backgroundColor = "white";
            }
            break;
          }
          default: { break; }
        }
        break;
      }
    default: { alert("DEFAULT switchState_filter_eq_selection"); break; }
  }
}

function removeElement(tagName) {
  const elementToRemove = document.querySelector(tagName);
  if (!elementToRemove) {
    console.warn(`No element ${tagName} found`);
    return;
  }
  elementToRemove.remove(elementToRemove);
}

const channel_1_select_Available_Nodes = document.getElementById("channel_1_select_Available_Nodes");
channel_1_select_Available_Nodes.addEventListener("change", function (e) {
  sets_New_Source("source_1", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "channel_1_select_Available_Nodes", e.currentTarget.value);
});

const channel_2_select_Available_Nodes = document.getElementById("channel_2_select_Available_Nodes");
channel_2_select_Available_Nodes.addEventListener("change", function (e) {
  sets_New_Source("source_2", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "channel_2_select_Available_Nodes", e.currentTarget.value);
});

const channel_3_select_Available_Nodes = document.getElementById("channel_3_select_Available_Nodes");
channel_3_select_Available_Nodes.addEventListener("change", function (e) {
  sets_New_Source("source_3", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "channel_3_select_Available_Nodes", e.currentTarget.value);
});

const channel_4_select_Available_Nodes = document.getElementById("channel_4_select_Available_Nodes");
channel_4_select_Available_Nodes.addEventListener("change", function (e) {
  sets_New_Source("source_4", e.currentTarget.value);
  mixEvent.logIntoListaAction(Tone.now(), "channel_4_select_Available_Nodes", e.currentTarget.value);
});

function multiPlay() {
  if (multiple_play_source_1.checked == true) {
    if (player_1_Node.buffer.duration != 0) {
      player_1_Node.start();
      player_1_playButton.style.backgroundColor = "green";
      mixEvent.logIntoListaAction(Tone.now(), "player_1_multiPlay", "play");
    }
  }
  if (multiple_play_source_2.checked == true) {
    if (player_2_Node.buffer.duration != 0) {
      player_2_Node.start();
      player_2_playButton.style.backgroundColor = "green";
      mixEvent.logIntoListaAction(Tone.now(), "player_2_multiPlay", "play");
    }
  }
  if (multiple_play_source_3.checked == true) {
    if (player_3_Node.buffer.duration != 0) {
      player_3_Node.start();
      player_3_playButton.style.backgroundColor = "green";
      mixEvent.logIntoListaAction(Tone.now(), "player_3_multiPlay", "play");
    }
  }
  if (multiple_play_source_4.checked == true) {
    if (player_4_Node.buffer.duration != 0) {
      player_4_Node.start();
      player_4_playButton.style.backgroundColor = "green";
      mixEvent.logIntoListaAction(Tone.now(), "player_4_multiPlay", "play");
    }
    if (multiple_play_test_player.checked == true) {
      if (player_test_Node.buffer.duration != 0) {
        player_test_Node.start();
      }
    }
  }
  if (multiple_play_test_player.checked == true) {
    if (player_test_Node.buffer.duration != 0) {
      player_test_Node.start();
    }
  }
}
function multiStop() {
  if (multiple_play_source_1.checked == true) {
    if (player_1_Node.buffer.duration != 0) {
      player_1_Node.stop();
      player_1_playButton.style.backgroundColor = "white";
      mixEvent.logIntoListaAction(Tone.now(), "player_1_multiStop", "stop");
    }
  }
  if (multiple_play_source_2.checked == true) {
    if (player_2_Node.buffer.duration != 0) {
      player_2_Node.stop();
      player_2_playButton.style.backgroundColor = "white";
      mixEvent.logIntoListaAction(Tone.now(), "player_2_multiStop", "stop");
    }
  }
  if (multiple_play_source_3.checked == true) {
    if (player_3_Node.buffer.duration != 0) {
      player_3_Node.stop();
      player_3_playButton.style.backgroundColor = "white";
      mixEvent.logIntoListaAction(Tone.now(), "player_3_multiStop", "stop");
    }
  }
  if (multiple_play_source_4.checked == true) {
    if (player_4_Node.buffer.duration != 0) {
      player_4_Node.stop();
      player_4_playButton.style.backgroundColor = "white";
      mixEvent.logIntoListaAction(Tone.now(), "player_4_multiStop", "stop");
    }
  }
  if (multiple_play_test_player.checked == true) {
    if (player_test_Node.buffer.duration != 0) {
      player_test_Node.stop();
    }
  }
}

async function multiLoad() {
  try {
    const ctx = new window.AudioContext();
    const [fileHandle] = await window.showOpenFilePicker({
      multiple: false,
      types: [
        {
          description: 'Audio files',
          accept: {
            'audio/*': ['.wav', '.ogg', '.mp3', '.mp4', '.aac', '.flac', '.webm'],
          }
        },
      ],
      excludeAcceptAllOption: true,
      startIn: 'downloads'
    });
    const file = await fileHandle.getFile();
    const arrayBuffer = await file.arrayBuffer();
    const decodedBuffer = await ctx.decodeAudioData(arrayBuffer);

    if (multiple_play_source_1.checked == true) {
      player_1_Node.buffer.set(decodedBuffer);
      player_1_load_text.innerHTML = fileHandle.name;
      channel_1_songName.innerHTML = fileHandle.name;
      channel_1_duration_text.innerHTML = Math.round(`${player_1_Node.buffer.duration}`);
      player_1_duration_value.innerHTML = Math.round(`${player_1_Node.buffer.duration}`);
      mixEvent.logIntoListaAction(Tone.now(), "player_1", fileHandle.name);
    }
    if (multiple_play_source_2.checked == true) {
      player_2_Node.buffer.set(decodedBuffer);
      player_2_load_text.innerHTML = fileHandle.name;
      channel_2_songName.innerHTML = fileHandle.name;
      channel_2_duration_text.innerHTML = Math.round(`${player_2_Node.buffer.duration}`);
      player_2_duration_value.innerHTML = Math.round(`${player_2_Node.buffer.duration}`);
      mixEvent.logIntoListaAction(Tone.now(), "player_2", fileHandle.name);
    }
    if (multiple_play_source_3.checked == true) {
      player_3_Node.buffer.set(decodedBuffer);
      player_3_load_text.innerHTML = fileHandle.name;
      channel_3_songName.innerHTML = fileHandle.name;
      channel_3_duration_text.innerHTML = Math.round(`${player_3_Node.buffer.duration}`);
      player_3_duration_value.innerHTML = Math.round(`${player_3_Node.buffer.duration}`);
      mixEvent.logIntoListaAction(Tone.now(), "player_3", fileHandle.name);
    }
    if (multiple_play_source_4.checked == true) {
      player_4_Node.buffer.set(decodedBuffer);
      player_4_load_text.innerHTML = fileHandle.name;
      channel_4_songName.innerHTML = fileHandle.name;
      channel_4_duration_text.innerHTML = Math.round(`${player_4_Node.buffer.duration}`);
      player_4_duration_value.innerHTML = Math.round(`${player_4_Node.buffer.duration}`);
      mixEvent.logIntoListaAction(Tone.now(), "player_4", fileHandle.name);
    }
    if (multiple_play_test_player.checked == true) {
      player_test_Node.buffer.set(decodedBuffer);
    }
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('User dismissed the file picker.');
    } else {
      console.error('Error loading file:', error);
    }
  }
}

//https://youtube.com/shorts/SnHiWFh0Aco?si=TIXRTiJJpOvFq3wo

function scramble(value) {
  switch (value) {
    case "player_1":
      {
        const buff = new Tone.Buffer(player_1_Node.buffer);
        //console.log("buff.name: ", buff.name);
        /* 
        alerta("buff")
           console.log("player_1_Node,buff.numberOfChannels: " + buff.numberOfChannels);
          console.log("buff samplerate: " + buff.sampleRate);
          console.log("Tone.context samplerate: " + Tone.context.sampleRate);
    /**/
        let tamanio2 = buff.length;
        let randomPosition = 0;
        const Float32 = new Float32Array(tamanio2);
        const Float32_bySlice = new Float32Array(tamanio2);
        let testslice = 0;
        //console.log("Float32: ", Float32);
        //let k = 0;
        /*
        do {
          randomPosition = getRndInteger(0, tamanio2);
          if (randomPosition + 96000 < buff.length) {
            for (i = 0; i < 96000 - 1; i++) {
              for (let channel = 0; channel < 2; channel++) {
                Float32[k] = buff.getChannelData(channel)[randomPosition + i];
                k++; tamanio2--;
              }
            }
          }
        }
        while (k < buff.length);
      /**/
        let randomDuration = buff.duration * 1000;
        // console.log("randomDuration: ", randomDuration);

        do {
          randomPosition = getRndInteger(0, buff.duration);
          console.log("randomPosition: ", randomPosition);
          if (randomPosition + 2 < buff.duration) {
            testslice = buff.slice(randomPosition, randomPosition + 2);
            console.log("testslice: ", testslice);
            Float32_bySlice = concatFloat32Arrays(Float32_bySlice, testslice);
            console.log("temp_Float32_bySlice: ", temp_Float32_bySlice);

            //       Float32_bySlice = temp_Float32_bySlice;

            for (i = 0; i < buff.length; i++) {
              for (let channel = 0; channel < 2; channel++) {
                Float32[i] = buff.getChannelData(channel)[i];
                // PASAR DATA DESDE TESTSLICE
              }
            }
          }
        } while (i < buff.length);
        console.log("i: " + i)
        //   console.log("Float32: ", Float32);
        //const testslice = buff.slice(randomPosition, randomPosition + 2);
        //console.log("testslice: ", testslice);

        /*
                const testslice2 = buff.slice(0, 2.50);
                console.log("testslice2: ", testslice2);
        
                const testslice3 = buff.slice(0, 2);
                console.log("testslice3: ", testslice3);
        
                const testretest = concatFloat32Arrays(testslice2, testslice3);
                console.log("testretest: ", testretest);
        /**/
        const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
        //        const decodedBuffer_twosecs = Tone.Buffer.fromArray(testretest);
        //  player_1_Node.buffer.set(decodedBuffer_twosecs);
        player_1_Node.buffer.set(decodedBuffer_twosecs);
        /*
                const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
                player_1_Node.buffer.set(decodedBuffer_twosecs);
          */
        //scramble2(decodedBuffer);
        break;
      }
    default:
      { break; }
  }
}

function scramble2(buffer) {
  console.log("buffer: " + buffer);
  console.log("player_1_Node,buffer.numberOfChannels: " + player_1_Node.buffer.numberOfChannels);
  console.log("buffer.numberOfChannels : " + buffer.numberOfChannels);
  console.log("buffer samplerate: " + buffer.sampleRate);
  console.log("Tone.context samplerate: " + Tone.context.sampleRate);

  let tamanio2 = buffer.length;
  let randomPosition = 0;
  const Float32 = new Float32Array(buffer.length);
  let k = 0;
  do {
    randomPosition = getRndInteger(0, tamanio2);
    if (randomPosition + 96000 < buffer.length) {
      for (i = 0; i < 96000 - 1; i++) {
        for (let channel = 0; channel < 2; channel++) {
          Float32[k] = buffer.getChannelData(channel)[randomPosition + i];
          k++; tamanio2--;
        }
      }
    }
  }
  while (k < buffer.length);

  //console.log("Float32: " + "\n" + Float32);
  const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
  player_1_Node.buffer.set(decodedBuffer_twosecs);
  player_1_Node.volume.value = -12;
  //player_1_Node.start();
}

function concatFloat32Arrays(array1, array2) {
  //AMBOS ARRAYS DEBEN SER CONVERTIDOS A FLOAT32ARRAY
  //Y DESPUES CONCAT
  console.log("array1: ", array1);
  //alerta("array1")
  console.log("array2: ", array2);
  //alerta("array2")
  //  
  console.log("array1.name: ", array1.name);
  console.log("array2.name: ", array2.name);

  const Float32_2 = new Float32Array(array1);
  const Float32_1 = new Float32Array(array2);

  for (let i = 0; i < array1.length; i++) {
    for (let channel = 0; channel < 2; channel++) {
      Float32_1[i] = array1.getChannelData(channel)[i];
      // PASAR DATA DESDE TESTSLICE
    }
  }

  for (let i = 0; i < array2.length; i++) {
    for (let channel = 0; channel < 2; channel++) {
      Float32_2[i] = array2.getChannelData(channel)[i];
      // PASAR DATA DESDE TESTSLICE
    }
  }
  //console.log("array2: ", array2);
  //alerta("concat array");
  const resultLength = array1.length + array2.length;
  const resultArray = new Float32Array(resultLength);
  resultArray.set(Float32_1, 0); // Copy elements of array1 starting at index 0
  resultArray.set(Float32_2, Float32_1.length); // Copy elements of array2 starting after array1's elements
  console.log("resultArray: ", resultArray);
  return resultArray;
}

// Example usage:
/*
const arr1 = new Float32Array([1.1, 2.2, 3.3]);
const arr2 = new Float32Array([4.4, 5.5, 6.6]);
 
const concatenatedArray = concatFloat32Arrays(arr1, arr2);
console.log(concatenatedArray); // Output: Float32Array [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]
*/
/**/

function playsMatrix(buffer) {
  let tamanio2 = buffer.length;
  let max = tamanio2 / 48000;
  let maxTrunc = Math.trunc(max) + 1;
  let randomPosition = 0;
  //let test = tamanio2-(maxTrunc-1);
  console.log("tamanio2: " + tamanio2);
  console.log("max: " + max);
  console.log("maxTrunc: " + maxTrunc);
  const Float32 = new Float32Array(buffer.length);
  let k = 0;
  do {
    randomPosition = getRndInteger(0, tamanio2);
    if (randomPosition + 48000 < buffer.length) {
      for (i = 0; i < 48000; i++) {
        for (let channel = 0; channel < 2; channel++) {
          Float32[k] = buffer.getChannelData(channel)[randomPosition + i];
          k++; tamanio2--;
        }
      }
    }
  } while (k < buffer.length);
  console.log("tamanio2: " + tamanio2);
  const decodedBuffer_twosecs = Tone.Buffer.fromArray(Float32);
  //  player_1_Node.buffer.set(decodedBuffer_twosecs);
  player_2_Node.buffer.set(decodedBuffer_twosecs);
  player_2_Node.volume.value = -12;
  player_2_Node.start();
  /**/
}

function scrambler(tempScramblerFloat32Array) {
  console.log("tempScramblerFloat32Array SCRAMBLE FOO: " + tempScramblerFloat32Array);
  //console.log("tempScramblerFloat32Array SCRAMBLE FOO lenmgth: " + tempScramblerFloat32Array.length);
  // console.log("tempScramblerFloat32Array channels: " + tempScramblerFloat32Array.numberOfChannels);
  // console.log("player_1_Node channels: " + player_1_Node.buffer.numberOfChannels);
  // console.log("tempScramblerFloat32Array type: " + tempScramblerFloat32Array.type);

  let randomPosition = 0;
  const bufferScrambled = new Float32Array(player_1_Node.buffer.length);
  let tamanio3 = tempScramblerFloat32Array.length;
  //  console.log("tamanio3: " + tamanio3);
  // console.log("bufferScrambled.length SCRAMBLE FOO: " + bufferScrambled.length);
  const buff = tempScramblerFloat32Array.toArray();
  console.log("buff: " + buff);

  let k = 0;
  do {
    //console.log("test test test ");
    randomPosition = getRndInteger(0, tamanio3);
    if (randomPosition + 48000 < bufferScrambled.length) {
      for (i = 0; i < 48000 - 1; i++) {
        for (let channel = 0; channel < 2; channel++) {
          bufferScrambled[k] = buff.getChannelData(channel)[randomPosition + i];
          k++;
          tamanio3--;
          console.log("channel:" + channel);
          console.log("k:" + k);
          console.log("tamanio3:" + tamanio3);
        }
      }
    }
  }
  while (k < bufferScrambled.length);
  const decodedBuffer_twosecs = Tone.Buffer.fromArray(bufferScrambled)
  player_1_Node.buffer.set(decodedBuffer_twosecs);
  console.log("test test test ");
  console.log("bufferScrambled SCRAMBLE FOO: " + bufferScrambled);

  return bufferScrambled;
}

/*
        const Float32 = new Float32Array(decodedBuffer.length);
        let k = 0;
        do {
          randomPosition = getRndInteger(0, tamanio2);
          if (randomPosition + 48000 < decodedBuffer.length) {
            for (i = 0; i < 48000 - 1; i++) {
              for (let channel = 0; channel < 2; channel++) {
                Float32[k] = decodedBuffer.getChannelData(channel)[randomPosition + i];
                k++; tamanio2--;
              }
            }
          }
        }
        while (k < decodedBuffer.length);
 
/**/

function createMatrix(N, M) {
  var matrix = new Array(N);
  // Array with initial size of N, not fixed!
  for (var i = 0; i < N; ++i) {
    matrix[i] = new Array(M);
  }
  return matrix;
}

function isShowOpenFilePickerSupported() {
  if ('showOpenFilePicker' in self) {
    console.log("showOpenFilePicker is Supported");
  }
  else {
    console.log("showOpenFilePicker is NOT Supported");
  }
}

function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function alerta(texto) {
  alert(texto + "\n");
}

function agregaReverbWorklet() {
  /**
    Main thread (e.g. index.js)
   **/
  const audioCtx = new AudioContext()
  // Loads module script via AudioWorklet.
  audioCtx.audioWorklet.addModule('js/audio-worklet-reverb-processor.js')
    .then(() => getLiveAudio(audioCtx))
    .then((liveIn) => {
      // After the resolution of module loading, an AudioWorkletNode can be constructed.
      let reverbWorkletNode = new AudioWorkletNode(audioCtx, 'reverb-processor')
      // AudioWorkletNode can be interoperable with other native AudioNodes.
      liveIn.connect(reverbWorkletNode).connect(audioCtx.destination)
    })
    .catch(e => console.error(e))

  function getLiveAudio(audioCtx) {
    return navigator.mediaDevices.getUserMedia({
      audio: true
    })
      .then(stream => audioCtx.createMediaStreamSource(stream))
  }
  /**/
}

async function saveFile() {
  try {
    const options = {
      suggestedName: 'my-document.txt', // Suggested file name
      types: [{
        description: 'Text Files',
        accept: {
          'text/plain': ['.txt'],
        },
      }],
    };

    const fileHandle = await window.showSaveFilePicker(options);
    const writableStream = await fileHandle.createWritable();
    var cadena = table_to_String(lista);
    var allSettings = allSettings_to_String();
    // Write content to the file
    await writableStream.write(allSettings);
    await writableStream.write(cadena);
    await writableStream.close();
    console.log('File saved successfully!');
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('User dismissed the file picker.');
    } else {
      console.error('Error saving file:', error);
    }
  }
}

function allSettings_to_String() {
  var allSettings = "", temp = "";
  temp =
    "channel_1_volume" + ", " + channel_1_volNode.volume.value + "\n" +
    "channel_1_pan" + ", " + channel_1_panNode.pan.value + "\n" +
    "source_1_actual_patch" + ", " + source_1_actual_patch + "\n" +
    "player_1_scrambler" + ", " + player_1_scrambler + "\n" +
    "player_1_volume" + ", " + player_1_volume.value + "\n" +
    "player_1_playback_rate" + ", " + player_1_playback_rate.value + "\n" +
    "player_1_Node.loop" + ", " + player_1_Node.loop + "\n" +
    "player_1_Node.autoplay" + ", " + player_1_Node.autoplay + "\n" +
    "player_1_Node.reverse" + ", " + player_1_Node.reverse + "\n" +
    "player_1_Node.loopStart" + ", " + player_1_Node.loopStart + "\n" +
    "player_1_Node.loopEnd" + ", " + player_1_Node.loopEnd + "\n" +
    "channel_1_filter_eq_selection" + ", " + channel_1_filter_eq_selection + "\n" +
    "channel_1_filter_eq_type" + ", " + channel_1_filter_eq_type + "\n" +
    "channel_1_filter_frequency" + ", " + channel_1_filter.frequency.value + "\n" +
    "channel_1_filter_Q" + ", " + channel_1_filter.Q.value + "\n" +
    "channel_1_filter_gain" + ", " + channel_1_filter.gain.value + "\n" +
    "channel_1_filter_rolloff" + ", " + channel_1_filter.rolloff + "\n" +
    "channel_1_filter_eq3_low" + ", " + channel_1_filter_eq3.low.value + "\n" +
    "channel_1_filter_eq3_mid" + ", " + channel_1_filter_eq3.mid.value + "\n" +
    "channel_1_filter_eq3_high" + ", " + channel_1_filter_eq3.high.value + "\n" +
    "channel_1_filter_eq3_lowFrequency" + ", " + channel_1_filter_eq3.lowFrequency.value + "\n" +
    "channel_1_filter_eq3_highFrequency" + ", " + channel_1_filter_eq3.highFrequency.value + "\n" +
    "channel_1_filter_eq3_Q" + ", " + channel_1_filter_eq3.Q.value + "\n" +
    "channel_1_tascam_HighShelf_FilterNode_frequency" + ", " + channel_1_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "channel_1_tascam_HighShelf_FilterNode_gain" + ", " + channel_1_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "channel_1_tascam_HighShelf_FilterNode_rolloff" + ", " + channel_1_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "channel_1_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + channel_1_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "channel_1_tascam_Mid_SemiParam_FilterNode_gain" + ", " + channel_1_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "channel_1_tascam_Mid_SemiParam_FilterNode_Q" + ", " + channel_1_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "channel_1_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + channel_1_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "channel_1_tascam_LowShelf_FilterNode_frequency" + ", " + channel_1_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "channel_1_tascam_LowShelf_FilterNode_gain" + ", " + channel_1_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "channel_1_tascam_LowShelf_FilterNode_rolloff" + ", " + channel_1_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "channel_1_compressor_On_Off_Button_State" + ", " + channel_1_compressor_On_Off_Button_State + "\n" +
    "channel_1_dynamics_compressorNode_reduction" + ", " + channel_1_dynamics_compressorNode.reduction + "\n" +
    "channel_1_dynamics_compressorNode.ratio" + ", " + channel_1_dynamics_compressorNode.ratio.value + "\n" +
    "channel_1_dynamics_threshold" + ", " + channel_1_dynamics_compressorNode.threshold.value + "\n" +
    "channel_1_dynamics_release" + ", " + channel_1_dynamics_release.value + "\n" +
    "channel_1_dynamics_attack" + ", " + channel_1_dynamics_attack.value + "\n" +
    "channel_1_dynamics_knee" + ", " + channel_1_dynamics_knee.value + "\n" +
    "channel_1_gate_On_Off_Button_State" + ", " + channel_1_gate_On_Off_Button_State + "\n" +
    "channel_1_dynamics_gateNode.threshold" + ", " + channel_1_dynamics_gateNode.threshold + "\n" +
    "channel_1_dynamics_gateNode.smoothing" + ", " + channel_1_dynamics_gateNode.smoothing + "\n" +
    "channel_1_limiter_On_Off_Button_State" + ", " + channel_1_limiter_On_Off_Button_State + "\n" +
    "channel_1_dynamics_limiterNode.threshold.value" + ", " + channel_1_dynamics_limiterNode.threshold.value + "\n" +
    "channel_1_dynamics_limiterNode.reduction" + ", " + channel_1_dynamics_limiterNode.reduction + "\n" +
    "channel_1_fxSend_1_state" + ", " + channel_1_fxSend_1_state + "\n" +
    "channel_1_fxSend_1" + ", " + channel_1_fxSend_1.value + "\n" +
    "channel_1_fxSend_2_state" + ", " + channel_1_fxSend_2_state + "\n" +
    "channel_1_fxSend_2" + ", " + channel_1_fxSend_2.value + "\n" +
    "channel_1_fxSend_3_state" + ", " + channel_1_fxSend_3_state + "\n" +
    "channel_1_fxSend_3" + ", " + channel_1_fxSend_3.value + "\n" +
    "channel_1_fxSend_4_state" + ", " + channel_1_fxSend_4_state + "\n" +
    "channel_1_fxSend_4" + ", " + channel_1_fxSend_4.value + "\n" +

    "channel_2_volume" + ", " + channel_2_volNode.volume.value + "\n" +
    "channel_2_pan" + ", " + channel_2_panNode.pan.value + "\n" +
    "source_2_actual_patch" + ", " + source_2_actual_patch + "\n" +
    "player_2_scrambler" + ", " + player_2_scrambler + "\n" +
    "player_2_volume" + ", " + player_2_volume.value + "\n" +
    "player_2_playback_rate" + ", " + player_2_playback_rate.value + "\n" +
    "player_2_Node.loop" + ", " + player_2_Node.loop + "\n" +
    "player_2_Node.autoplay" + ", " + player_2_Node.autoplay + "\n" +
    "player_2_Node.reverse" + ", " + player_2_Node.reverse + "\n" +
    "player_2_Node.loopStart" + ", " + player_2_Node.loopStart + "\n" +
    "player_2_Node.loopEnd" + ", " + player_2_Node.loopEnd + "\n" +
    "channel_2_filter_eq_selection" + ", " + channel_2_filter_eq_selection + "\n" +
    "channel_2_filter_eq_type" + ", " + channel_2_filter_eq_type + "\n" +
    "channel_2_filter_frequency" + ", " + channel_2_filter.frequency.value + "\n" +
    "channel_2_filter_Q" + ", " + channel_2_filter.Q.value + "\n" +
    "channel_2_filter_gain" + ", " + channel_2_filter.gain.value + "\n" +
    "channel_2_filter_rolloff" + ", " + channel_2_filter.rolloff + "\n" +
    "channel_2_filter_eq3_low" + ", " + channel_2_filter_eq3.low.value + "\n" +
    "channel_2_filter_eq3_mid" + ", " + channel_2_filter_eq3.mid.value + "\n" +
    "channel_2_filter_eq3_high" + ", " + channel_2_filter_eq3.high.value + "\n" +
    "channel_2_filter_eq3_lowFrequency" + ", " + channel_2_filter_eq3.lowFrequency.value + "\n" +
    "channel_2_filter_eq3_highFrequency" + ", " + channel_2_filter_eq3.highFrequency.value + "\n" +
    "channel_2_filter_eq3_Q" + ", " + channel_2_filter_eq3.Q.value + "\n" +
    "channel_2_tascam_HighShelf_FilterNode_frequency" + ", " + channel_2_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "channel_2_tascam_HighShelf_FilterNode_gain" + ", " + channel_2_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "channel_2_tascam_HighShelf_FilterNode_rolloff" + ", " + channel_2_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "channel_2_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + channel_2_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "channel_2_tascam_Mid_SemiParam_FilterNode_gain" + ", " + channel_2_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "channel_2_tascam_Mid_SemiParam_FilterNode_Q" + ", " + channel_2_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "channel_2_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + channel_2_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "channel_2_tascam_LowShelf_FilterNode_frequency" + ", " + channel_2_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "channel_2_tascam_LowShelf_FilterNode_gain" + ", " + channel_2_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "channel_2_tascam_LowShelf_FilterNode_rolloff" + ", " + channel_2_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "channel_2_compressor_On_Off_Button_State" + ", " + channel_2_compressor_On_Off_Button_State + "\n" +
    "channel_2_dynamics_compressorNode_reduction" + ", " + channel_2_dynamics_compressorNode.reduction + "\n" +
    "channel_2_dynamics_compressorNode.ratio" + ", " + channel_2_dynamics_compressorNode.ratio.value + "\n" +
    "channel_2_dynamics_threshold" + ", " + channel_2_dynamics_compressorNode.threshold.value + "\n" +
    "channel_2_dynamics_release" + ", " + channel_2_dynamics_release.value + "\n" +
    "channel_2_dynamics_attack" + ", " + channel_2_dynamics_attack.value + "\n" +
    "channel_2_dynamics_knee" + ", " + channel_2_dynamics_knee.value + "\n" +
    "channel_2_gate_On_Off_Button_State" + ", " + channel_2_gate_On_Off_Button_State + "\n" +
    "channel_2_dynamics_gateNode.threshold" + ", " + channel_2_dynamics_gateNode.threshold + "\n" +
    "channel_2_dynamics_gateNode.smoothing" + ", " + channel_2_dynamics_gateNode.smoothing + "\n" +
    "channel_2_limiter_On_Off_Button_State" + ", " + channel_2_limiter_On_Off_Button_State + "\n" +
    "channel_2_dynamics_limiterNode.threshold.value" + ", " + channel_2_dynamics_limiterNode.threshold.value + "\n" +
    "channel_2_dynamics_limiterNode.reduction" + ", " + channel_2_dynamics_limiterNode.reduction + "\n" +
    "channel_2_fxSend_1_state" + ", " + channel_2_fxSend_1_state + "\n" +
    "channel_2_fxSend_1" + ", " + channel_2_fxSend_1.value + "\n" +
    "channel_2_fxSend_2_state" + ", " + channel_2_fxSend_2_state + "\n" +
    "channel_2_fxSend_2" + ", " + channel_2_fxSend_2.value + "\n" +
    "channel_2_fxSend_3_state" + ", " + channel_2_fxSend_3_state + "\n" +
    "channel_2_fxSend_3" + ", " + channel_2_fxSend_3.value + "\n" +
    "channel_2_fxSend_4_state" + ", " + channel_2_fxSend_4_state + "\n" +
    "channel_2_fxSend_4" + ", " + channel_2_fxSend_4.value + "\n" +

    "channel_3_volume" + ", " + channel_3_volNode.volume.value + "\n" +
    "channel_3_pan" + ", " + channel_3_panNode.pan.value + "\n" +
    "source_3_actual_patch" + ", " + source_3_actual_patch + "\n" +
    "player_3_scrambler" + ", " + player_3_scrambler + "\n" +
    "player_3_volume" + ", " + player_3_volume.value + "\n" +
    "player_3_playback_rate" + ", " + player_3_playback_rate.value + "\n" +
    "player_3_Node.loop" + ", " + player_3_Node.loop + "\n" +
    "player_3_Node.autoplay" + ", " + player_3_Node.autoplay + "\n" +
    "player_3_Node.reverse" + ", " + player_3_Node.reverse + "\n" +
    "player_3_Node.loopStart" + ", " + player_3_Node.loopStart + "\n" +
    "player_3_Node.loopEnd" + ", " + player_3_Node.loopEnd + "\n" +
    "channel_3_filter_eq_selection" + ", " + channel_3_filter_eq_selection + "\n" +
    "channel_3_filter_eq_type" + ", " + channel_3_filter_eq_type + "\n" +
    "channel_3_filter_frequency" + ", " + channel_3_filter.frequency.value + "\n" +
    "channel_3_filter_Q" + ", " + channel_3_filter.Q.value + "\n" +
    "channel_3_filter_gain" + ", " + channel_3_filter.gain.value + "\n" +
    "channel_3_filter_rolloff" + ", " + channel_3_filter.rolloff + "\n" +
    "channel_3_filter_eq3_low" + ", " + channel_3_filter_eq3.low.value + "\n" +
    "channel_3_filter_eq3_mid" + ", " + channel_3_filter_eq3.mid.value + "\n" +
    "channel_3_filter_eq3_high" + ", " + channel_3_filter_eq3.high.value + "\n" +
    "channel_3_filter_eq3_lowFrequency" + ", " + channel_3_filter_eq3.lowFrequency.value + "\n" +
    "channel_3_filter_eq3_highFrequency" + ", " + channel_3_filter_eq3.highFrequency.value + "\n" +
    "channel_3_filter_eq3_Q" + ", " + channel_3_filter_eq3.Q.value + "\n" +
    "channel_3_tascam_HighShelf_FilterNode_frequency" + ", " + channel_3_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "channel_3_tascam_HighShelf_FilterNode_gain" + ", " + channel_3_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "channel_3_tascam_HighShelf_FilterNode_rolloff" + ", " + channel_3_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "channel_3_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + channel_3_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "channel_3_tascam_Mid_SemiParam_FilterNode_gain" + ", " + channel_3_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "channel_3_tascam_Mid_SemiParam_FilterNode_Q" + ", " + channel_3_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "channel_3_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + channel_3_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "channel_3_tascam_LowShelf_FilterNode_frequency" + ", " + channel_3_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "channel_3_tascam_LowShelf_FilterNode_gain" + ", " + channel_3_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "channel_3_tascam_LowShelf_FilterNode_rolloff" + ", " + channel_3_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "channel_3_compressor_On_Off_Button_State" + ", " + channel_3_compressor_On_Off_Button_State + "\n" +
    "channel_3_dynamics_compressorNode_reduction" + ", " + channel_3_dynamics_compressorNode.reduction + "\n" +
    "channel_3_dynamics_compressorNode.ratio" + ", " + channel_3_dynamics_compressorNode.ratio.value + "\n" +
    "channel_3_dynamics_threshold" + ", " + channel_3_dynamics_compressorNode.threshold.value + "\n" +
    "channel_3_dynamics_release" + ", " + channel_3_dynamics_release.value + "\n" +
    "channel_3_dynamics_attack" + ", " + channel_3_dynamics_attack.value + "\n" +
    "channel_3_dynamics_knee" + ", " + channel_3_dynamics_knee.value + "\n" +
    "channel_3_gate_On_Off_Button_State" + ", " + channel_3_gate_On_Off_Button_State + "\n" +
    "channel_3_dynamics_gateNode.threshold" + ", " + channel_3_dynamics_gateNode.threshold + "\n" +
    "channel_3_dynamics_gateNode.smoothing" + ", " + channel_3_dynamics_gateNode.smoothing + "\n" +
    "channel_3_limiter_On_Off_Button_State" + ", " + channel_3_limiter_On_Off_Button_State + "\n" +
    "channel_3_dynamics_limiterNode.threshold.value" + ", " + channel_3_dynamics_limiterNode.threshold.value + "\n" +
    "channel_3_dynamics_limiterNode.reduction" + ", " + channel_3_dynamics_limiterNode.reduction + "\n" +
    "channel_3_fxSend_1_state" + ", " + channel_3_fxSend_1_state + "\n" +
    "channel_3_fxSend_1" + ", " + channel_3_fxSend_1.value + "\n" +
    "channel_3_fxSend_2_state" + ", " + channel_3_fxSend_2_state + "\n" +
    "channel_3_fxSend_2" + ", " + channel_3_fxSend_2.value + "\n" +
    "channel_3_fxSend_3_state" + ", " + channel_3_fxSend_3_state + "\n" +
    "channel_3_fxSend_3" + ", " + channel_3_fxSend_3.value + "\n" +
    "channel_3_fxSend_4_state" + ", " + channel_3_fxSend_4_state + "\n" +
    "channel_3_fxSend_4" + ", " + channel_3_fxSend_4.value + "\n" +

    "channel_4_volume" + ", " + channel_4_volNode.volume.value + "\n" +
    "channel_4_pan" + ", " + channel_4_panNode.pan.value + "\n" +
    "source_4_actual_patch" + ", " + source_4_actual_patch + "\n" +
    "player_4_scrambler" + ", " + player_4_scrambler + "\n" +
    "player_4_volume" + ", " + player_4_volume.value + "\n" +
    "player_4_playback_rate" + ", " + player_4_playback_rate.value + "\n" +
    "player_4_Node.loop" + ", " + player_4_Node.loop + "\n" +
    "player_4_Node.autoplay" + ", " + player_4_Node.autoplay + "\n" +
    "player_4_Node.reverse" + ", " + player_4_Node.reverse + "\n" +
    "player_4_Node.loopStart" + ", " + player_4_Node.loopStart + "\n" +
    "player_4_Node.loopEnd" + ", " + player_4_Node.loopEnd + "\n" +
    "channel_4_filter_eq_selection" + ", " + channel_4_filter_eq_selection + "\n" +
    "channel_4_filter_eq_type" + ", " + channel_4_filter_eq_type + "\n" +
    "channel_4_filter_frequency" + ", " + channel_4_filter.frequency.value + "\n" +
    "channel_4_filter_Q" + ", " + channel_4_filter.Q.value + "\n" +
    "channel_4_filter_gain" + ", " + channel_4_filter.gain.value + "\n" +
    "channel_4_filter_rolloff" + ", " + channel_4_filter.rolloff + "\n" +
    "channel_4_filter_eq3_low" + ", " + channel_4_filter_eq3.low.value + "\n" +
    "channel_4_filter_eq3_mid" + ", " + channel_4_filter_eq3.mid.value + "\n" +
    "channel_4_filter_eq3_high" + ", " + channel_4_filter_eq3.high.value + "\n" +
    "channel_4_filter_eq3_lowFrequency" + ", " + channel_4_filter_eq3.lowFrequency.value + "\n" +
    "channel_4_filter_eq3_highFrequency" + ", " + channel_4_filter_eq3.highFrequency.value + "\n" +
    "channel_4_filter_eq3_Q" + ", " + channel_4_filter_eq3.Q.value + "\n" +
    "channel_4_tascam_HighShelf_FilterNode_frequency" + ", " + channel_4_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "channel_4_tascam_HighShelf_FilterNode_gain" + ", " + channel_4_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "channel_4_tascam_HighShelf_FilterNode_rolloff" + ", " + channel_4_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "channel_4_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + channel_4_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "channel_4_tascam_Mid_SemiParam_FilterNode_gain" + ", " + channel_4_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "channel_4_tascam_Mid_SemiParam_FilterNode_Q" + ", " + channel_4_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "channel_4_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + channel_4_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "channel_4_tascam_LowShelf_FilterNode_frequency" + ", " + channel_4_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "channel_4_tascam_LowShelf_FilterNode_gain" + ", " + channel_4_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "channel_4_tascam_LowShelf_FilterNode_rolloff" + ", " + channel_4_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "channel_4_compressor_On_Off_Button_State" + ", " + channel_4_compressor_On_Off_Button_State + "\n" +
    "channel_4_dynamics_compressorNode_reduction" + ", " + channel_4_dynamics_compressorNode.reduction + "\n" +
    "channel_4_dynamics_compressorNode.ratio" + ", " + channel_4_dynamics_compressorNode.ratio.value + "\n" +
    "channel_4_dynamics_threshold" + ", " + channel_4_dynamics_compressorNode.threshold.value + "\n" +
    "channel_4_dynamics_release" + ", " + channel_4_dynamics_release.value + "\n" +
    "channel_4_dynamics_attack" + ", " + channel_4_dynamics_attack.value + "\n" +
    "channel_4_dynamics_knee" + ", " + channel_4_dynamics_knee.value + "\n" +
    "channel_4_gate_On_Off_Button_State" + ", " + channel_4_gate_On_Off_Button_State + "\n" +
    "channel_4_dynamics_gateNode.threshold" + ", " + channel_4_dynamics_gateNode.threshold + "\n" +
    "channel_4_dynamics_gateNode.smoothing" + ", " + channel_4_dynamics_gateNode.smoothing + "\n" +
    "channel_4_limiter_On_Off_Button_State" + ", " + channel_4_limiter_On_Off_Button_State + "\n" +
    "channel_4_dynamics_limiterNode.threshold.value" + ", " + channel_4_dynamics_limiterNode.threshold.value + "\n" +
    "channel_4_dynamics_limiterNode.reduction" + ", " + channel_4_dynamics_limiterNode.reduction + "\n" +
    "channel_4_fxSend_1_state" + ", " + channel_4_fxSend_1_state + "\n" +
    "channel_4_fxSend_1" + ", " + channel_4_fxSend_1.value + "\n" +
    "channel_4_fxSend_2_state" + ", " + channel_4_fxSend_2_state + "\n" +
    "channel_4_fxSend_2" + ", " + channel_4_fxSend_2.value + "\n" +
    "channel_4_fxSend_3_state" + ", " + channel_4_fxSend_3_state + "\n" +
    "channel_4_fxSend_3" + ", " + channel_4_fxSend_3.value + "\n" +
    "channel_4_fxSend_4_state" + ", " + channel_4_fxSend_4_state + "\n" +
    "channel_4_fxSend_4" + ", " + channel_4_fxSend_4.value + "\n" +

    "fx_1_volNode" + ", " + fx_1_volNode.volume.value + "\n" +
    "fx_1_panNode" + ", " + fx_1_panNode.pan.value + "\n" +
    "fx_1_actual_patch" + ", " + fx_1_actual_patch + "\n" +
    "fx_1_filter_eq_selection" + ", " + fx_1_filter_eq_selection + "\n" +
    "fx_1_filter_eq_type" + ", " + fx_1_filter_eq_type + "\n" +
    "fx_1_filter_frequency" + ", " + fx_1_filter.frequency.value + "\n" +
    "fx_1_filter_Q" + ", " + fx_1_filter.Q.value + "\n" +
    "fx_1_filter_gain" + ", " + fx_1_filter.gain.value + "\n" +
    "fx_1_filter_rolloff" + ", " + fx_1_filter.rolloff + "\n" +
    "fx_1_filter_eq3_low" + ", " + fx_1_filter_eq3.low.value + "\n" +
    "fx_1_filter_eq3_mid" + ", " + fx_1_filter_eq3.mid.value + "\n" +
    "fx_1_filter_eq3_high" + ", " + fx_1_filter_eq3.high.value + "\n" +
    "fx_1_filter_eq3_lowFrequency" + ", " + fx_1_filter_eq3.lowFrequency.value + "\n" +
    "fx_1_filter_eq3_highFrequency" + ", " + fx_1_filter_eq3.highFrequency.value + "\n" +
    "fx_1_filter_eq3_Q" + ", " + fx_1_filter_eq3.Q.value + "\n" +
    "fx_1_tascam_HighShelf_FilterNode_frequency" + ", " + fx_1_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "fx_1_tascam_HighShelf_FilterNode_gain" + ", " + fx_1_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "fx_1_tascam_HighShelf_FilterNode_rolloff" + ", " + fx_1_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "fx_1_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + fx_1_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "fx_1_tascam_Mid_SemiParam_FilterNode_gain" + ", " + fx_1_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "fx_1_tascam_Mid_SemiParam_FilterNode_Q" + ", " + fx_1_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "fx_1_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + fx_1_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "fx_1_tascam_LowShelf_FilterNode_frequency" + ", " + fx_1_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "fx_1_tascam_LowShelf_FilterNode_gain" + ", " + fx_1_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "fx_1_tascam_LowShelf_FilterNode_rolloff" + ", " + fx_1_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "fx_1_compressor_On_Off_Button_State" + ", " + fx_1_compressor_On_Off_Button_State + "\n" +
    "fx_1_dynamics_compressorNode_reduction" + ", " + fx_1_dynamics_compressorNode.reduction + "\n" +
    "fx_1_dynamics_compressorNode.ratio" + ", " + fx_1_dynamics_compressorNode.ratio.value + "\n" +
    "fx_1_dynamics_threshold" + ", " + fx_1_dynamics_compressorNode.threshold.value + "\n" +
    "fx_1_dynamics_release" + ", " + fx_1_dynamics_release.value + "\n" +
    "fx_1_dynamics_attack" + ", " + fx_1_dynamics_attack.value + "\n" +
    "fx_1_dynamics_knee" + ", " + fx_1_dynamics_knee.value + "\n" +
    "fx_1_gate_On_Off_Button_State" + ", " + fx_1_gate_On_Off_Button_State + "\n" +
    "fx_1_dynamics_gateNode.threshold" + ", " + fx_1_dynamics_gateNode.threshold + "\n" +
    "fx_1_dynamics_gateNode.smoothing" + ", " + fx_1_dynamics_gateNode.smoothing + "\n" +
    "fx_1_limiter_On_Off_Button_State" + ", " + fx_1_limiter_On_Off_Button_State + "\n" +
    "fx_1_dynamics_limiterNode.threshold.value" + ", " + fx_1_dynamics_limiterNode.threshold.value + "\n" +
    "fx_1_dynamics_limiterNode.reduction" + ", " + fx_1_dynamics_limiterNode.reduction + "\n" +
    "fx_1_fxSend_1_state" + ", " + fx_1_fxSend_1_state + "\n" +
    "fx_1_fxSend_1" + ", " + fx_1_fxSend_1.value + "\n" +
    "fx_1_fxSend_2_state" + ", " + fx_1_fxSend_2_state + "\n" +
    "fx_1_fxSend_2" + ", " + fx_1_fxSend_2.value + "\n" +
    "fx_1_fxSend_3_state" + ", " + fx_1_fxSend_3_state + "\n" +
    "fx_1_fxSend_3" + ", " + fx_1_fxSend_3.value + "\n" +
    "fx_1_fxSend_4_state" + ", " + fx_1_fxSend_4_state + "\n" +
    "fx_1_fxSend_4" + ", " + fx_1_fxSend_4.value + "\n" +

    "fx_2_volume" + ", " + fx_2_volNode.volume.value + "\n" +
    "fx_2_pan" + ", " + fx_2_panNode.pan.value + "\n" +
    "fx_2_actual_patch" + ", " + fx_2_actual_patch + "\n" +
    "fx_2_filter_eq_selection" + ", " + fx_2_filter_eq_selection + "\n" +
    "fx_2_filter_eq_type" + ", " + fx_2_filter_eq_type + "\n" +
    "fx_2_filter_frequency" + ", " + fx_2_filter.frequency.value + "\n" +
    "fx_2_filter_Q" + ", " + fx_2_filter.Q.value + "\n" +
    "fx_2_filter_gain" + ", " + fx_2_filter.gain.value + "\n" +
    "fx_2_filter_rolloff" + ", " + fx_2_filter.rolloff + "\n" +
    "fx_2_filter_eq3_low" + ", " + fx_2_filter_eq3.low.value + "\n" +
    "fx_2_filter_eq3_mid" + ", " + fx_2_filter_eq3.mid.value + "\n" +
    "fx_2_filter_eq3_high" + ", " + fx_2_filter_eq3.high.value + "\n" +
    "fx_2_filter_eq3_lowFrequency" + ", " + fx_2_filter_eq3.lowFrequency.value + "\n" +
    "fx_2_filter_eq3_highFrequency" + ", " + fx_2_filter_eq3.highFrequency.value + "\n" +
    "fx_2_filter_eq3_Q" + ", " + fx_2_filter_eq3.Q.value + "\n" +
    "fx_2_tascam_HighShelf_FilterNode_frequency" + ", " + fx_2_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "fx_2_tascam_HighShelf_FilterNode_gain" + ", " + fx_2_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "fx_2_tascam_HighShelf_FilterNode_rolloff" + ", " + fx_2_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "fx_2_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + fx_2_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "fx_2_tascam_Mid_SemiParam_FilterNode_gain" + ", " + fx_2_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "fx_2_tascam_Mid_SemiParam_FilterNode_Q" + ", " + fx_2_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "fx_2_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + fx_2_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "fx_2_tascam_LowShelf_FilterNode_frequency" + ", " + fx_2_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "fx_2_tascam_LowShelf_FilterNode_gain" + ", " + fx_2_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "fx_2_tascam_LowShelf_FilterNode_rolloff" + ", " + fx_2_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "fx_2_compressor_On_Off_Button_State" + ", " + fx_2_compressor_On_Off_Button_State + "\n" +
    "fx_2_dynamics_compressorNode_reduction" + ", " + fx_2_dynamics_compressorNode.reduction + "\n" +
    "fx_2_dynamics_compressorNode.ratio" + ", " + fx_2_dynamics_compressorNode.ratio.value + "\n" +
    "fx_2_dynamics_threshold" + ", " + fx_2_dynamics_compressorNode.threshold.value + "\n" +
    "fx_2_dynamics_release" + ", " + fx_2_dynamics_release.value + "\n" +
    "fx_2_dynamics_attack" + ", " + fx_2_dynamics_attack.value + "\n" +
    "fx_2_dynamics_knee" + ", " + fx_2_dynamics_knee.value + "\n" +
    "fx_2_gate_On_Off_Button_State" + ", " + fx_2_gate_On_Off_Button_State + "\n" +
    "fx_2_dynamics_gateNode.threshold" + ", " + fx_2_dynamics_gateNode.threshold + "\n" +
    "fx_2_dynamics_gateNode.smoothing" + ", " + fx_2_dynamics_gateNode.smoothing + "\n" +
    "fx_2_limiter_On_Off_Button_State" + ", " + fx_2_limiter_On_Off_Button_State + "\n" +
    "fx_2_dynamics_limiterNode.threshold.value" + ", " + fx_2_dynamics_limiterNode.threshold.value + "\n" +
    "fx_2_dynamics_limiterNode.reduction" + ", " + fx_2_dynamics_limiterNode.reduction + "\n" +
    "fx_2_fxSend_1_state" + ", " + fx_2_fxSend_1_state + "\n" +
    "fx_2_fxSend_1" + ", " + fx_2_fxSend_1.value + "\n" +
    "fx_2_fxSend_2_state" + ", " + fx_2_fxSend_2_state + "\n" +
    "fx_2_fxSend_2" + ", " + fx_2_fxSend_2.value + "\n" +
    "fx_2_fxSend_3_state" + ", " + fx_2_fxSend_3_state + "\n" +
    "fx_2_fxSend_3" + ", " + fx_2_fxSend_3.value + "\n" +
    "fx_2_fxSend_4_state" + ", " + fx_2_fxSend_4_state + "\n" +
    "fx_2_fxSend_4" + ", " + fx_2_fxSend_4.value + "\n" +

    "fx_3_volume" + ", " + fx_3_volNode.volume.value + "\n" +
    "fx_3_pan" + ", " + fx_3_panNode.pan.value + "\n" +
    "fx_3_actual_patch" + ", " + fx_3_actual_patch + "\n" +
    "fx_3_filter_eq_selection" + ", " + fx_3_filter_eq_selection + "\n" +
    "fx_3_filter_eq_type" + ", " + fx_3_filter_eq_type + "\n" +
    "fx_3_filter_frequency" + ", " + fx_3_filter.frequency.value + "\n" +
    "fx_3_filter_Q" + ", " + fx_3_filter.Q.value + "\n" +
    "fx_3_filter_gain" + ", " + fx_3_filter.gain.value + "\n" +
    "fx_3_filter_rolloff" + ", " + fx_3_filter.rolloff + "\n" +
    "fx_3_filter_eq3_low" + ", " + fx_3_filter_eq3.low.value + "\n" +
    "fx_3_filter_eq3_mid" + ", " + fx_3_filter_eq3.mid.value + "\n" +
    "fx_3_filter_eq3_high" + ", " + fx_3_filter_eq3.high.value + "\n" +
    "fx_3_filter_eq3_lowFrequency" + ", " + fx_3_filter_eq3.lowFrequency.value + "\n" +
    "fx_3_filter_eq3_highFrequency" + ", " + fx_3_filter_eq3.highFrequency.value + "\n" +
    "fx_3_filter_eq3_Q" + ", " + fx_3_filter_eq3.Q.value + "\n" +
    "fx_3_tascam_HighShelf_FilterNode_frequency" + ", " + fx_3_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "fx_3_tascam_HighShelf_FilterNode_gain" + ", " + fx_3_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "fx_3_tascam_HighShelf_FilterNode_rolloff" + ", " + fx_3_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "fx_3_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + fx_3_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "fx_3_tascam_Mid_SemiParam_FilterNode_gain" + ", " + fx_3_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "fx_3_tascam_Mid_SemiParam_FilterNode_Q" + ", " + fx_3_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "fx_3_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + fx_3_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "fx_3_tascam_LowShelf_FilterNode_frequency" + ", " + fx_3_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "fx_3_tascam_LowShelf_FilterNode_gain" + ", " + fx_3_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "fx_3_tascam_LowShelf_FilterNode_rolloff" + ", " + fx_3_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "fx_3_compressor_On_Off_Button_State" + ", " + fx_3_compressor_On_Off_Button_State + "\n" +
    "fx_3_dynamics_compressorNode_reduction" + ", " + fx_3_dynamics_compressorNode.reduction + "\n" +
    "fx_3_dynamics_compressorNode.ratio" + ", " + fx_3_dynamics_compressorNode.ratio.value + "\n" +
    "fx_3_dynamics_threshold" + ", " + fx_3_dynamics_compressorNode.threshold.value + "\n" +
    "fx_3_dynamics_release" + ", " + fx_3_dynamics_release.value + "\n" +
    "fx_3_dynamics_attack" + ", " + fx_3_dynamics_attack.value + "\n" +
    "fx_3_dynamics_knee" + ", " + fx_3_dynamics_knee.value + "\n" +
    "fx_3_gate_On_Off_Button_State" + ", " + fx_3_gate_On_Off_Button_State + "\n" +
    "fx_3_dynamics_gateNode.threshold" + ", " + fx_3_dynamics_gateNode.threshold + "\n" +
    "fx_3_dynamics_gateNode.smoothing" + ", " + fx_3_dynamics_gateNode.smoothing + "\n" +
    "fx_3_limiter_On_Off_Button_State" + ", " + fx_3_limiter_On_Off_Button_State + "\n" +
    "fx_3_dynamics_limiterNode.threshold.value" + ", " + fx_3_dynamics_limiterNode.threshold.value + "\n" +
    "fx_3_dynamics_limiterNode.reduction" + ", " + fx_3_dynamics_limiterNode.reduction + "\n" +
    "fx_3_fxSend_1_state" + ", " + fx_3_fxSend_1_state + "\n" +
    "fx_3_fxSend_1" + ", " + fx_3_fxSend_1.value + "\n" +
    "fx_3_fxSend_2_state" + ", " + fx_3_fxSend_2_state + "\n" +
    "fx_3_fxSend_2" + ", " + fx_3_fxSend_2.value + "\n" +
    "fx_3_fxSend_3_state" + ", " + fx_3_fxSend_3_state + "\n" +
    "fx_3_fxSend_3" + ", " + fx_3_fxSend_3.value + "\n" +
    "fx_3_fxSend_4_state" + ", " + fx_3_fxSend_4_state + "\n" +
    "fx_3_fxSend_4" + ", " + fx_3_fxSend_4.value + "\n" +

    "fx_4_volume" + ", " + fx_4_volNode.volume.value + "\n" +
    "fx_4_pan" + ", " + fx_4_panNode.pan.value + "\n" +
    "fx_4_actual_patch" + ", " + fx_4_actual_patch + "\n" +
    "fx_4_filter_eq_selection" + ", " + fx_4_filter_eq_selection + "\n" +
    "fx_4_filter_eq_type" + ", " + fx_4_filter_eq_type + "\n" +
    "fx_4_filter_frequency" + ", " + fx_4_filter.frequency.value + "\n" +
    "fx_4_filter_Q" + ", " + fx_4_filter.Q.value + "\n" +
    "fx_4_filter_gain" + ", " + fx_4_filter.gain.value + "\n" +
    "fx_4_filter_rolloff" + ", " + fx_4_filter.rolloff + "\n" +
    "fx_4_filter_eq3_low" + ", " + fx_4_filter_eq3.low.value + "\n" +
    "fx_4_filter_eq3_mid" + ", " + fx_4_filter_eq3.mid.value + "\n" +
    "fx_4_filter_eq3_high" + ", " + fx_4_filter_eq3.high.value + "\n" +
    "fx_4_filter_eq3_lowFrequency" + ", " + fx_4_filter_eq3.lowFrequency.value + "\n" +
    "fx_4_filter_eq3_highFrequency" + ", " + fx_4_filter_eq3.highFrequency.value + "\n" +
    "fx_4_filter_eq3_Q" + ", " + fx_4_filter_eq3.Q.value + "\n" +
    "fx_4_tascam_HighShelf_FilterNode_frequency" + ", " + fx_4_tascam_HighShelf_FilterNode.frequency.value + "\n" +
    "fx_4_tascam_HighShelf_FilterNode_gain" + ", " + fx_4_tascam_HighShelf_FilterNode.gain.value + "\n" +
    "fx_4_tascam_HighShelf_FilterNode_rolloff" + ", " + fx_4_tascam_HighShelf_FilterNode.rolloff + "\n" +
    "fx_4_tascam_Mid_SemiParam_FilterNode_frequency" + ", " + fx_4_tascam_Mid_SemiParam_FilterNode.frequency.value + "\n" +
    "fx_4_tascam_Mid_SemiParam_FilterNode_gain" + ", " + fx_4_tascam_Mid_SemiParam_FilterNode.gain.value + "\n" +
    "fx_4_tascam_Mid_SemiParam_FilterNode_Q" + ", " + fx_4_tascam_Mid_SemiParam_FilterNode.Q.value + "\n" +
    "fx_4_tascam_Mid_SemiParam_FilterNode_rolloff" + ", " + fx_4_tascam_Mid_SemiParam_FilterNode.rolloff + "\n" +
    "fx_4_tascam_LowShelf_FilterNode_frequency" + ", " + fx_4_tascam_LowShelf_FilterNode.frequency.value + "\n" +
    "fx_4_tascam_LowShelf_FilterNode_gain" + ", " + fx_4_tascam_LowShelf_FilterNode.gain.value + "\n" +
    "fx_4_tascam_LowShelf_FilterNode_rolloff" + ", " + fx_4_tascam_LowShelf_FilterNode.rolloff + "\n" +
    "fx_4_compressor_On_Off_Button_State" + ", " + fx_4_compressor_On_Off_Button_State + "\n" +
    "fx_4_dynamics_compressorNode_reduction" + ", " + fx_4_dynamics_compressorNode.reduction + "\n" +
    "fx_4_dynamics_compressorNode.ratio" + ", " + fx_4_dynamics_compressorNode.ratio.value + "\n" +
    "fx_4_dynamics_threshold" + ", " + fx_4_dynamics_compressorNode.threshold.value + "\n" +
    "fx_4_dynamics_release" + ", " + fx_4_dynamics_release.value + "\n" +
    "fx_4_dynamics_attack" + ", " + fx_4_dynamics_attack.value + "\n" +
    "fx_4_dynamics_knee" + ", " + fx_4_dynamics_knee.value + "\n" +
    "fx_4_gate_On_Off_Button_State" + ", " + fx_4_gate_On_Off_Button_State + "\n" +
    "fx_4_dynamics_gateNode.threshold" + ", " + fx_4_dynamics_gateNode.threshold + "\n" +
    "fx_4_dynamics_gateNode.smoothing" + ", " + fx_4_dynamics_gateNode.smoothing + "\n" +
    "fx_4_limiter_On_Off_Button_State" + ", " + fx_4_limiter_On_Off_Button_State + "\n" +
    "fx_4_dynamics_limiterNode.threshold.value" + ", " + fx_4_dynamics_limiterNode.threshold.value + "\n" +
    "fx_4_dynamics_limiterNode.reduction" + ", " + fx_4_dynamics_limiterNode.reduction + "\n" +
    "fx_4_fxSend_1_state" + ", " + fx_4_fxSend_1_state + "\n" +
    "fx_4_fxSend_1" + ", " + fx_4_fxSend_1.value + "\n" +
    "fx_4_fxSend_2_state" + ", " + fx_4_fxSend_2_state + "\n" +
    "fx_4_fxSend_2" + ", " + fx_4_fxSend_2.value + "\n" +
    "fx_4_fxSend_3_state" + ", " + fx_4_fxSend_3_state + "\n" +
    "fx_4_fxSend_3" + ", " + fx_4_fxSend_3.value + "\n" +
    "fx_4_fxSend_4_state" + ", " + fx_4_fxSend_4_state + "\n" +
    "fx_4_fxSend_4" + ", " + fx_4_fxSend_4.value + "\n" +
    "\n";
  allSettings = allSettings.concat("", temp);
  return allSettings;
}

function table_to_String(lista) {
  var cadena = "atTime" + ", " + "element" + ", " + "action" + ", " +
    "newValue" + ", " + "rampTime" + "\n";
  var temp = "";
  for (let i = 0; i < lista.length; i++) {
    temp = lista[i].atTime + ", " + lista[i].element + ", " + lista[i].action
      + ", " + lista[i].newValue + ", " + lista[i].rampTime + "\n";
    cadena = cadena.concat("", temp);
  }
  return cadena;
}

//USAR ESTO PARA BAJAR ARCHIVOS DE AUDIO QUIZAS
/*
function guardarTablaComoCSV(lista, nombreArchivo) {
  const tabla = document.getElementById(lista);
  let csv = [];
  for (let i = 0; i < tabla.rows.length; i++) {
    let fila = tabla.rows[i];
    let filaCSV = [];
    for (let j = 0; j < fila.cells.length; j++) {
      filaCSV.push(fila.cells[j].innerText);
    }
    csv.push(filaCSV.join(","));
  }
  const csvData = csv.join("\n");
  const a = document.createElement('a');
  a.href = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvData);
  a.target = '_blank';
  a.download = nombreArchivo + '.csv';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}
// Ejemplo de uso:
// <table id="miTabla">...</table>
// <button onclick="guardarTablaComoCSV('miTabla', 'datosTabla')">Guardar como CSV</button>
/**/

//************************************************************************
//************************************************************************
//EQ high/mid/low values are all in Decibels, so 0 would mean no change.
//  -Infinity should silence all of those bins.
/* DISTINTOS TIPOS DE ECUALIZADORES
//************************************************************************
TASCAM 424 EQ SECTION
Equalizer
HIGH (Shelving): 10 kHz, ±10 dB
MID (Parametric): 250 Hz to 5 kHz, ±12 dB
LOW (Shelving): 100 Hz, ±10 dB
//-------------------------------------------------------------------------
MACKIE 24-8
Hi Mid EQ
full parametric, ±15dB freq.
sweep from 500Hz–18kHz
bandwidth variable from
1/12 octave to 3 octaves

Lo Mid EQ
sweep from 45Hz–3kHz±15dB

Hi Shelving EQ
12kHz ±15dB

Lo Shelving EQ
80Hz ±15dB

Lo Cut EQ (HPF)
75Hz 18dB/octave
(Tchebechev)
//-------------------------------------------------------------------------
NEVE 1073 PRE AMP & EQ

EQ Specification

High Frequency: Smooth +/-16dB fixed frequency shelving at 12kHz
Low Frequency: Smooth +/-16dB shelving with selectable frequencies of 35Hz, 60Hz, 110Hz & 220Hz
Mid Frequency: Smooth +/-18dB peaking, fixed ‘Q’ with selectable centre frequencies of 0.36kHz, 0.7kHz 1.6kHz, 3.2kHz, 4.8kHz & 7.2kHz
High Pass Filter: 18dB per octave slope, switchable between 50Hz, 80Hz, 160Hz & 300Hz
//-------------------------------------------------------------------------
G e o r g e M a s s e n b u r g L a b s (GLM 8200)
FORM FACTOR – 2 CHANNELS, 5 BANDS: FULLY PARAMETRIC
1. 15 Hz – 800 Hz, Q of 0.4 – 4.0 or shelving, 15 dB boost/cut
2. 15 Hz – 800 Hz, Q of 0.4 – 4.0, 15 dB boost/cut
3. 120 Hz – 8 kHz, Q of 0.4 – 4.0, 15 dB boost/cut
4. 400 Hz – 26 kHz, Q of 0.4 – 4.0, 15 dB boost/cut
5. 400 Hz – 26 kHz, Q of 0.4 – 4.0 or shelving, 15 dB boost/cut
//-------------------------------------------------------------------------
API's 500

Number of Channels:	1
High Pass Filter:	Yes
Low Pass Filter:	Yes
Number of Bands:	3-band
Boost/Cut Range:	±12dB
Q Type:	Proportional Q
Freq Range High:	2.5kHz-20kHz
Freq Range Mid:	200Hz-5kHz
Freq Range Low:	30Hz-400Hz
//-------------------------------------------------------------------------
Solid State Logic

LF Shelf EQ: +/- 9dB Gain at 30, 50, 70, 90Hz
HF Shelf EQ: +/- 9dB Gain at 8k, 12k, 16k and 20kHz.
HMF Parametric EQ: +/- 9dB (focus mode 18dB) Gain 400Hz-9kHz
LMF Parametric EQ: +/- 9dB (focus mode 18dB) Gain 100Hz-1.1kHz
Switchable HPF: OFF, 30, 40, 50Hz
Gain Trim: +/- 12dB
Switched Bypass: Yes
//************************************************************************
*/
/*
var test = document.getElementById("fx_1_clip");
var child = document.getElementById("article_1");
test.removeChild(child);
//  console.log (test.parentElement);
console.log (test.children);
*/
/*
  if (fx_1.disposed == true) {
    alert("fx_1.disposed == true");
    const soundClips_1 = document.getElementById("fx_1_clip");
    const clipContainer = document.getElementsByClassName("clip_1");
    soundClips_1.removeChild(clipContainer);
 
  }
  else {
    alert("fx_1.disposed == false");
  }
  // const soundClips_1 = document.getElementById("fx_1_clip");
  // const clipContainer = document.getElementsByClassName("clip_1");
  //console.log("childNodes: " + soundClips_1.childNodes);
  //soundClips_1.removeChild(clipContainer);
*/



const TESTfx_1_filter_1_select = document.getElementById("TESTfx_1_filter_1_select");
TESTfx_1_filter_1_select.addEventListener("change", function (e) {

  switch (e.currentTarget.value) {
    case "lowpass":
    case "highpass":
    case "bandpass":
    case "notch":
    case "allpass":
      {
        TESTfx_1_filter.type = e.currentTarget.value;
        TESTfx_1_filter_eq_type = "allpass";
        mixEvent.logIntoListaAction(Tone.now(), "TESTfx_1_filter_select", e.currentTarget.value);
        if (TESTfx_1_filter_eq_type == "on") {
          hide_all_EQ_divs("1");
          TESTfx_1_allpass_controls_div.style.display = "block";
        }
        break;
      }
    case "lowshelf":
    case "highshelf":
      {
        TESTfx_1_filter.type = e.currentTarget.value;
        TESTfx_1_filter_eq_type = "shelf";
        mixEvent.logIntoListaAction(Tone.now(), "TESTfx_1_filter_select", e.currentTarget.value);
        break;
      }
    case "peaking":
      {
        TESTfx_1_filter.type = e.currentTarget.value;
        TESTfx_1_filter_eq_type = "peaking";
        mixEvent.logIntoListaAction(Tone.now(), "TESTfx_1_filter_select", e.currentTarget.value);
        break;
      }
    case "empty": {
      TESTfx_1_filter_eq_type = "empty";
      TESTfx_1_filter.set({
        frequency: 20000,
        type: "lowpass",
        Q: 0,
        gain: 0,
        rolloff: -96,
      });
      mixEvent.logIntoListaAction(Tone.now(), "TESTfx_1_filter_select", "empty");
      break;
    }
    default:
      { alert(" EQ1 DEFAULT TESTfx_1_filter_select switch"); }
  }
});

//SHELF
const TESTfx_1_filter_frequency_text_shelf = document.getElementById("TESTfx_1_filter_frequency_text_shelf");
const TESTfx_1_filter_frequency_shelf = document.getElementById("TESTfx_1_filter_frequency_shelf");
const TESTfx_1_filter_frequency_value_shelf = document.getElementById("TESTfx_1_filter_frequency_value_shelf");
TESTfx_1_filter_frequency_shelf.addEventListener("change", function (e) {
  TESTfx_1_filter.frequency.value = e.currentTarget.value;
  TESTfx_1_filter_frequency_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_frequency_text_shelf", e.currentTarget.value);
});

const TESTfx_1_filter_detune_text_shelf = document.getElementById("player_1_filter_detune_text_shelf");
const TESTfx_1_filter_detune_shelf = document.getElementById("TESTfx_1_filter_detune_shelf");
const TESTfx_1_filter_detune_value_shelf = document.getElementById("TESTfx_1_filter_detune_value_shelf");
TESTfx_1_filter_detune_shelf.addEventListener("change", function (e) {
  TESTfx_1_filter.detune.value = e.currentTarget.value;
  TESTfx_1_filter_detune_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_detune_text_shelf", e.currentTarget.value);
});

const TESTfx_1_filter_gain_text_shelf = document.getElementById("TESTfx_1_filter_gain_text_shelf");
const TESTfx_1_filter_gain_shelf = document.getElementById("TESTfx_1_filter_gain_shelf");
const TESTfx_1_filter_gain_value_shelf = document.getElementById("TESTfx_1_filter_gain_value_shelf");
TESTfx_1_filter_gain_shelf.addEventListener("change", function (e) {
  TESTfx_1_filter.gain.value = e.currentTarget.value;
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_gain_shelf", e.currentTarget.value);
  TESTfx_1_filter_gain_value_shelf.innerHTML = Math.round(`${e.currentTarget.value}`);
});

//PEAKING
const TESTfx_1_filter_frequency_text_peaking = document.getElementById("TESTfx_1_filter_frequency_text_peaking");
const TESTfx_1_filter_frequency_peaking = document.getElementById("TESTfx_1_filter_frequency_peaking");
const TESTfx_1_filter_frequency_value_peaking = document.getElementById("TESTfx_1_filter_frequency_value_peaking");
TESTfx_1_filter_frequency_peaking.addEventListener("change", function (e) {
  TESTfx_1_filter.frequency.value = e.currentTarget.value;
  TESTfx_1_filter_frequency_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_frequency_peaking", e.currentTarget.value);
});

const TESTfx_1_filter_Q_text_peaking = document.getElementById("TESTfx_1_filter_Q_text_peaking");
const TESTfx_1_filter_Q_peaking = document.getElementById("TESTfx_1_filter_Q_peaking");
const TESTfx_1_filter_Q_value_peaking = document.getElementById("TESTfx_1_filter_Q_value_peaking");
TESTfx_1_filter_Q_peaking.addEventListener("change", function (e) {
  TESTfx_1_filter.Q.value = e.currentTarget.value;
  TESTfx_1_filter_Q_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_Q_peaking", e.currentTarget.value);
});

const TESTfx_1_filter_detune_text_peaking = document.getElementById("TESTfx_1_filter_detune_text_peaking");
const TESTfx_1_filter_detune_peaking = document.getElementById("TESTfx_1_filter_detune_peaking");
const TESTfx_1_filter_detune_value_peaking = document.getElementById("TESTfx_1_filter_detune_value_peaking");
TESTfx_1_filter_detune_peaking.addEventListener("change", function (e) {
  TESTfx_1_filter.detune.value = e.currentTarget.value;
  TESTfx_1_filter_detune_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_detune_peaking", e.currentTarget.value);
});

const TESTfx_1_filter_gain_text_peaking = document.getElementById("TESTfx_1_filter_gain_text_peaking");
const TESTfx_1_filter_gain_peaking = document.getElementById("TESTfx_1_filter_gain_peaking");
const TESTfx_1_filter_gain_value_peaking = document.getElementById("TESTfx_1_filter_gain_value_peaking");
TESTfx_1_filter_gain_peaking.addEventListener("change", function (e) {
  TESTfx_1_filter.gain.value = e.currentTarget.value;
  TESTfx_1_filter_gain_value_peaking.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_gain_peaking", e.currentTarget.value);
});

//ALLPASS
const TESTfx_1_filter_frequency_allpass = document.getElementById("TESTfx_1_filter_frequency_allpass");
const TESTfx_1_filter_frequency_value_allpass = document.getElementById("TESTfx_1_filter_frequency_value_allpass");
const TESTfx_1_filter_frequency_text_allpass = document.getElementById("TESTfx_1_filter_frequency_text_allpass");
TESTfx_1_filter_frequency_allpass.addEventListener("change", function (e) {
  TESTfx_1_filter.frequency.value = e.currentTarget.value;
  TESTfx_1_filter_frequency_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaAction(Tone.now(), "TESTfx_1_filter_frequency_value_allpass", e.currentTarget.value);
});

const TESTfx_1_filter_Q_allpass = document.getElementById("TESTfx_1_filter_Q_allpass");
const TESTfx_1_filter_Q_value_allpass = document.getElementById("TESTfx_1_filter_Q_value_allpass");
const TESTfx_1_filter_Q_text_allpass = document.getElementById("TESTfx_1_filter_Q_text_allpass");
TESTfx_1_filter_Q_allpass.addEventListener("change", function (e) {
  TESTfx_1_filter.Q.value = e.currentTarget.value;
  TESTfx_1_filter_Q_value_allpass.innerHTML = `${e.currentTarget.value}`;
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_Q_value_allpass", e.currentTarget.value);
});

const TESTfx_1_filter_detune_allpass = document.getElementById("TESTfx_1_filter_detune_allpass");
const TESTfx_1_filter_detune_value_allpass = document.getElementById("TESTfx_1_filter_detune_value_allpass");
const TESTfx_1_filter_detune_text_allpass = document.getElementById("TESTfx_1_filter_detune_text_allpass");
TESTfx_1_filter_detune_allpass.addEventListener("change", function (e) {
  TESTfx_1_filter.detune.value = e.currentTarget.value;
  TESTfx_1_filter_detune_value_allpass.innerHTML = Math.round(`${e.currentTarget.value}`);
  mixEvent.logIntoListaNewValue(Tone.now(), "TESTfx_1_filter_detune_value_allpass", e.currentTarget.value);
});

const TESTfx_1_filter_eq_On_Button = document.getElementById("TESTfx_1_filter_eq_On_Button");
//const TESTfx_1_filter = new Tone.Filter().connect(fx_1_dynamics_compressorNode_Bypass);

const TESTfx_1_filter = new Tone.Filter();
//channel_1_filter.debug = true;
TESTfx_1_filter.set({
  frequency: 1000,
  type: "bandpass",
  Q: 0.4,
  gain: 0,
  rolloff: -96,
});

TESTfx_1_filter.fan(channel_1_fxSend_1_postEq_volNode, channel_1_fxSend_2_postEq_volNode, channel_1_fxSend_3_postEq_volNode, channel_1_fxSend_4_postEq_volNode);

const TESTfx_1_filter_meter = new Tone.Meter(0);
TESTfx_1_filter.connect(TESTfx_1_filter_meter);
//fx_1_panNode.connect(TESTfx_1_filter);
//TESTfx_1_filter.connect(fx_1_filter_Bypass);

const TESTfx_1_empty_controls_div = document.getElementById("TESTfx_1_empty_controls_div");
TESTfx_1_empty_controls_div.style.display = "none";

const TESTfx_1_bypass_controls_div = document.getElementById("TESTfx_1_bypass_controls_div");
TESTfx_1_bypass_controls_div.style.display = "none";

const TESTfx_1_allpass_controls_div = document.getElementById("TESTfx_1_allpass_controls_div");
TESTfx_1_allpass_controls_div.style.display = "block";

const TESTfx_1_shelf_controls_div = document.getElementById("TESTfx_1_shelf_controls_div");
TESTfx_1_shelf_controls_div.style.display = "none";

const TESTfx_1_peaking_controls_div = document.getElementById("TESTfx_1_peaking_controls_div");
TESTfx_1_peaking_controls_div.style.display = "none";

const TESTfx_1_tascam_424_controls_div = document.getElementById("TESTfx_1_tascam_424_controls_div");
TESTfx_1_tascam_424_controls_div.style.display = "none";

const TESTfx_1_eq3_controls_div = document.getElementById("TESTfx_1_eq3_controls_div");
TESTfx_1_eq3_controls_div.style.display = "none";

/**/
